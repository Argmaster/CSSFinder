# Copyright 2023 Krzysztof Wiśniewski <argmaster.world@gmail.com>
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the “Software”), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# ------------------------------------------------------------------------------------ #
#                                                                                      #
#   THIS FILE WAS AUTOMATICALLY GENERATED FROM TEMPLATE. DO NOT MODIFY.                #
#                                                                                      #
#   To modify this file, modify `scripts/templates/numpy.pyjinja2` and                 #
#   use `poe gen-numpy-impl` to generate python files.                                 #
#                                                                                      #
# ------------------------------------------------------------------------------------ #
#
"""This module contains implementation of backend operations in numpy.

Spec
----

- Floating precision:   {{floating}}
- Complex precision:    {{complex}}
"""

from __future__ import annotations

import numpy as np
import numpy.typing as npt
from numba import jit


{% if debug_dtype_checks %}

from typing import Any


#   ██████     ███████    ██████     ██    ██     ██████
#   ██   ██    ██         ██   ██    ██    ██    ██
#   ██   ██    █████      ██████     ██    ██    ██   ███
#   ██   ██    ██         ██   ██    ██    ██    ██    ██
#   ██████     ███████    ██████      ██████      ██████


def assert_dtype(ob: Any, dtype: Any) -> None:
    if ob.dtype != dtype:
        raise AssertionError(ob.dtype)

{% endif %}

#    █████  ██████  ███    ███ ███    ███  ██████  ███    ██
#   ██     ██    ██ ████  ████ ████  ████ ██    ██ ████   ██
#   ██     ██    ██ ██ ████ ██ ██ ████ ██ ██    ██ ██ ██  ██
#   ██     ██    ██ ██  ██  ██ ██  ██  ██ ██    ██ ██  ██ ██
#    █████  ██████  ██      ██ ██      ██  ██████  ██   ████


_REAL = np.cos(0.01 * np.pi)
_IMAG = 1j * np.sin(0.01 * np.pi)
_VALUE = (_REAL + _IMAG - 1).astype({{complex}})


{% if not disable_jit %}@jit(nopython=True, nogil=True, cache=True)
{% endif %}def product(
    matrix1: npt.NDArray[{{complex}}], matrix2: npt.NDArray[{{complex}}]
) -> {{floating}}:
    """Calculate scalar product of two matrices."""
    {% if debug_dtype_checks %}assert_dtype(matrix1, {{complex}}){% endif %}
    {% if debug_dtype_checks %}assert_dtype(matrix2, {{complex}}){% endif %}

    retval = np.trace(np.dot(matrix1, matrix2)).real
    {% if debug_dtype_checks %}assert_dtype(retval, {{floating}}){% endif %}

    return retval  # type: ignore


{% if not disable_jit %}@jit(nopython=True, nogil=True, cache=True)
{% endif %}def get_random_haar_1d(depth: int) -> npt.NDArray[{{complex}}]:
    """Generate a random vector with Haar measure."""

    real = np.random.uniform(0, 1, depth)
    imag = np.random.uniform(0, 1, depth)

    retval = np.exp(2 * np.pi * 1j * real) * np.sqrt(-np.log(imag))
    {% if is_32bit %}
    {# np.random.uniform return np.float64 so cast is only needed when using complex64, #}
    {# as real * imag results in np.complex128 type. #}
    retval = (retval).astype({{complex}})
    {% endif %}

    {% if debug_dtype_checks %}assert_dtype(retval, {{complex}}){% endif %}

    return retval  # type: ignore


{% if not disable_jit %}@jit(nopython=True, nogil=True, cache=True)
{% endif %}def get_random_haar_2d(depth: int, quantity: int) -> npt.NDArray[{{complex}}]:
    """Generate multiple random vectors with Haar measure in form of matrix."""

    real = np.random.uniform(0, 1, (quantity, depth))
    imag = np.random.uniform(0, 1, (quantity, depth))

    retval = np.exp(2 * np.pi * 1j * real) * np.sqrt(-np.log(imag))
    {% if is_32bit %}
    {# np.random.uniform return np.float64 so cast is only needed when using complex64, #}
    {# as real * imag results in np.complex128 type. #}
    retval = (retval).astype({{complex}})
    {% endif %}

    {% if debug_dtype_checks %}assert_dtype(retval, {{complex}}){% endif %}

    return retval  # type: ignore


{% if not disable_jit %}@jit(nopython=True, nogil=True, cache=True)
{% endif %}def normalize(mtx: npt.NDArray[{{complex}}]) -> npt.NDArray[{{complex}}]:
    """Normalization of a vector."""
    {% if debug_dtype_checks %}assert_dtype(mtx, {{complex}}){% endif %}

    mtx2 = np.dot(mtx, np.conj(mtx))
    {% if debug_dtype_checks %}assert_dtype(mtx2, {{complex}}){% endif %}

    val = np.sqrt(np.real(mtx2))
    {% if debug_dtype_checks %}assert_dtype(val, {{floating}}){% endif %}

    retval = (mtx / val)
    {% if debug_dtype_checks %}assert_dtype(retval, {{complex}}){% endif %}

    return retval  # type: ignore


{% if not disable_jit %}@jit(nopython=True, nogil=True, cache=True)
{% endif %}def project(mtx1: npt.NDArray[{{complex}}]) -> npt.NDArray[{{complex}}]:
    """Build a projection from a vector."""
    {% if debug_dtype_checks %}assert_dtype(mtx1, {{complex}}){% endif %}

    retval = np.outer(mtx1, np.conj(mtx1))
    {% if debug_dtype_checks %}assert_dtype(retval, {{complex}}){% endif %}

    return retval  # type: ignore


{% if not disable_jit %}@jit(forceobj=True, cache=True)
{% endif %}def kronecker(
    mtx: npt.NDArray[{{complex}}], mtx1: npt.NDArray[{{complex}}]
) -> npt.NDArray[{{complex}}]:
    """Kronecker Product."""
    {% if debug_dtype_checks %}assert_dtype(mtx, {{complex}}){% endif %}
    {% if debug_dtype_checks %}assert_dtype(mtx1, {{complex}}){% endif %}

    ddd1 = len(mtx)
    ddd2 = len(mtx1)

    output_shape = (ddd1 * ddd2, ddd1 * ddd2)

    dot_0_1 = np.tensordot(mtx, mtx1, 0)
    {% if debug_dtype_checks %}assert_dtype(dot_0_1, {{complex}}){% endif %}

    out_mtx = np.swapaxes(dot_0_1, 1, 2)
    {% if debug_dtype_checks %}assert_dtype(out_mtx, {{complex}}){% endif %}

    retval = out_mtx.reshape(output_shape).astype({{complex}}, copy=False)
    {% if debug_dtype_checks %}assert_dtype(retval, {{complex}}){% endif %}

    return retval  # type: ignore


{% if not disable_jit %}@jit(nopython=True, nogil=True, cache=True)
{% endif %}def rotate(
    rho2: npt.NDArray[{{complex}}], unitary: npt.NDArray[{{complex}}]
) -> npt.NDArray[{{complex}}]:
    """Sandwich an operator with a unitary."""
    {% if debug_dtype_checks %}assert_dtype(rho2, {{complex}}){% endif %}
    {% if debug_dtype_checks %}assert_dtype(unitary, {{complex}}){% endif %}

    rho2a = np.dot(rho2, np.conj(unitary).T)  # matmul replaced with dot
    {% if debug_dtype_checks %}assert_dtype(rho2a, {{complex}}){% endif %}

    rho2a = np.dot(unitary, rho2a)  # matmul replaced with dot
    {% if debug_dtype_checks %}assert_dtype(rho2a, {{complex}}){% endif %}

    return rho2a  # type: ignore

# pylint: disable=line-too-long
#
#   ██████     ███████    ███████            ███    ███     ██████     ██████     ███████
#   ██   ██    ██         ██                 ████  ████    ██    ██    ██   ██    ██
#   ██   ██    █████      ███████            ██ ████ ██    ██    ██    ██   ██    █████
#   ██   ██    ██              ██            ██  ██  ██    ██    ██    ██   ██    ██
#   ██████     ██         ███████            ██      ██     ██████     ██████     ███████
#
# pylint: disable=line-too-long

{% if not disable_jit %}@jit(forceobj=True)
{% endif %}def optimize_d_fs(
    new_state: npt.NDArray[{{complex}}],
    visibility_state: npt.NDArray[{{complex}}],
    depth: int,
    quantity: int,
    epochs: int,
) -> npt.NDArray[{{complex}}]:
    """Optimize implementation for FSnQd mode."""

    {% if debug_dtype_checks %}assert_dtype(new_state, {{complex}}){% endif %}
    {% if debug_dtype_checks %}assert_dtype(visibility_state, {{complex}}){% endif %}

    product_2_3 = product(new_state, visibility_state)

    # To make sure rotated_2 is not unbound
    unitary = random_unitary_d_fs(depth, quantity, 0)
    {% if debug_dtype_checks %}assert_dtype(unitary, {{complex}}){% endif %}

    rotated_2 = rotate(new_state, unitary)

    for idx in range(epochs):
        idx_mod = idx % int(quantity)
        unitary = random_unitary_d_fs(depth, quantity, idx_mod)
        {% if debug_dtype_checks %}assert_dtype(unitary, {{complex}}){% endif %}

        rotated_2 = rotate(new_state, unitary)
        {% if debug_dtype_checks %}assert_dtype(rotated_2, {{complex}}){% endif %}

        product_rot2_3 = product(rotated_2, visibility_state)

        if product_2_3 > product_rot2_3:
            unitary = unitary.conj().T
            rotated_2 = rotate(new_state, unitary)
            {% if debug_dtype_checks %}assert_dtype(rotated_2, {{complex}}){% endif %}

        while (new_product_2_3 := product_rot2_3) > product_2_3:
            product_2_3 = new_product_2_3
            rotated_2 = rotate(rotated_2, unitary)
            {% if debug_dtype_checks %}assert_dtype(rotated_2, {{complex}}){% endif %}

            product_rot2_3 = product(rotated_2, visibility_state)

    return rotated_2.astype({{complex}}, copy=False)  # type: ignore


{% if not disable_jit %}@jit(forceobj=True, cache=True)
{% endif %}def random_unitary_d_fs(
    depth: int, quantity: int, idx: int
) -> npt.NDArray[{{complex}}]:
    """N quDits."""
    value = _random_unitary_d_fs(depth)
    {% if debug_dtype_checks %}assert_dtype(value, {{complex}}){% endif %}

    mtx = expand_d_fs(value, depth, quantity, idx)
    {% if debug_dtype_checks %}assert_dtype(mtx, {{complex}}){% endif %}

    return mtx  # type: ignore


{% if not disable_jit %}@jit(nopython=True, nogil=True, cache=True)
{% endif %}def _random_unitary_d_fs(depth: int) -> npt.NDArray[{{complex}}]:
    random_mtx = random_d_fs(depth, 1)
    {% if debug_dtype_checks %}assert_dtype(random_mtx, {{complex}}){% endif %}

    identity_mtx = np.identity(depth).astype({{complex}})
    {% if debug_dtype_checks %}assert_dtype(identity_mtx, {{complex}}){% endif %}

    rand_mul = np.multiply(_VALUE, random_mtx)
    {% if debug_dtype_checks %}assert_dtype(rand_mul, {{complex}}){% endif %}

    value = np.add(rand_mul, identity_mtx)
    {% if debug_dtype_checks %}assert_dtype(value, {{complex}}){% endif %}
    return value  # type: ignore


{% if not disable_jit %}@jit(nopython=True, nogil=True, cache=True)
{% endif %}def random_d_fs(depth: int, quantity: int) -> npt.NDArray[{{complex}}]:
    """Random n quDit state."""
    rand_vectors = get_random_haar_2d(depth, quantity)
    vector = normalize(rand_vectors[0])
    {% if debug_dtype_checks %}assert_dtype(vector, {{complex}}){% endif %}

    for i in range(quantity - 1):
        idx_vector = normalize(rand_vectors[i])
        {% if debug_dtype_checks %}assert_dtype(idx_vector, {{complex}}){% endif %}

        vector = np.outer(vector, idx_vector).flatten()
        {% if debug_dtype_checks %}assert_dtype(vector, {{complex}}){% endif %}

    vector = project(vector)
    {% if debug_dtype_checks %}assert_dtype(vector, {{complex}}){% endif %}

    return vector  # type: ignore



{% if not disable_jit %}@jit(forceobj=True, cache=True)
{% endif %}def expand_d_fs(
    value: npt.NDArray[{{complex}}],
    depth: int,
    quantity: int,
    idx: int,
) -> npt.NDArray[{{complex}}]:
    """Expand an operator to n quDits."""
    {% if debug_dtype_checks %}assert_dtype(value, {{complex}}){% endif %}

    depth_1 = int(depth**idx)
    identity_1 = np.identity(depth_1, dtype={{complex}})
    {% if debug_dtype_checks %}assert_dtype(identity_1, {{complex}}){% endif %}

    depth_2 = int(depth ** (quantity - idx - 1))
    identity_2 = np.identity(depth_2, dtype={{complex}})
    {% if debug_dtype_checks %}assert_dtype(identity_2, {{complex}}){% endif %}

    kronecker_1 = kronecker(identity_1, value)
    {% if debug_dtype_checks %}assert_dtype(kronecker_1, {{complex}}){% endif %}

    kronecker_2 = kronecker(kronecker_1, identity_2)
    {% if debug_dtype_checks %}assert_dtype(kronecker_2, {{complex}}){% endif %}

    return kronecker_2  # type: ignore


#   ██████     ███████            ███    ███     ██████     ██████     ███████
#   ██   ██    ██                 ████  ████    ██    ██    ██   ██    ██
#   ██████     ███████            ██ ████ ██    ██    ██    ██   ██    █████
#   ██   ██         ██            ██  ██  ██    ██    ██    ██   ██    ██
#   ██████     ███████            ██      ██     ██████     ██████     ███████


{% if not disable_jit %}@jit(nopython=True, nogil=True, cache=True)
{% endif %}def random_bs(depth: int, quantity: int) -> npt.NDArray[{{complex}}]:
    """Draw random biseparable state."""
    random_vector_1 = normalize(get_random_haar_1d(depth))
    random_vector_2 = normalize(get_random_haar_1d(quantity))
    print(random_vector_1.shape)
    print(random_vector_2.shape)

    vector = np.outer(random_vector_1, random_vector_2)
    {% if debug_dtype_checks %}assert_dtype(vector, {{complex}}){% endif %}

    vector = project(vector)
    {% if debug_dtype_checks %}assert_dtype(vector, {{complex}}){% endif %}

    return vector  # type: ignore


{% macro _random_unitary_bs() -%}
    random_vector = normalize(get_random_haar_1d(depth))
    {% if debug_dtype_checks %}assert_dtype(random_vector, {{complex}}){% endif %}

    random_matrix = project(random_vector)
    {% if debug_dtype_checks %}assert_dtype(random_matrix, {{complex}}){% endif %}

    identity_depth = np.identity(depth).astype({{complex}})
    {% if debug_dtype_checks %}assert_dtype(identity_depth, {{complex}}){% endif %}

    identity_quantity = np.identity(quantity).astype({{complex}})
    {% if debug_dtype_checks %}assert_dtype(identity_quantity, {{complex}}){% endif %}

    unitary_biseparable = (_VALUE * random_matrix + identity_depth)
    {% if debug_dtype_checks %}assert_dtype(unitary_biseparable, {{complex}}){% endif %}
{%- endmacro %}


{% if not disable_jit %}@jit(nopython=True, nogil=True, cache=True)
{% endif %}def random_unitary_bs(depth: int, quantity: int) -> npt.NDArray[{{complex}}]:
    """Draw random unitary for biseparable state."""

    {{_random_unitary_bs()}}

    retval = kronecker(unitary_biseparable, identity_quantity)
    {% if debug_dtype_checks %}assert_dtype(retval, {{complex}}){% endif %}

    return retval  # type: ignore


{% if not disable_jit %}@jit(nopython=True, nogil=True, cache=True)
{% endif %}def random_unitary_bs_reverse(depth: int, quantity: int) -> npt.NDArray[{{complex}}]:
    """Draw random unitary for biseparable state."""

    {{_random_unitary_bs()}}

    retval = kronecker(identity_quantity, unitary_biseparable)
    {% if debug_dtype_checks %}assert_dtype(retval, {{complex}}){% endif %}

    return retval  # type: ignore


{% if not disable_jit %}@jit(forceobj=True)
{% endif %}def optimize_bs(
    new_state: npt.NDArray[{{complex}}],
    visibility_state: npt.NDArray[{{complex}}],
    depth: int,
    quantity: int,
    updates_count: int,
) -> npt.NDArray[{{complex}}]:
    """Runs the minimization algorithm to optimize the biseparable state.

    Parameters
    ----------
    new_state : npt.NDArray[{{complex}}]
        Randomly drawn state to be optimized.
    visibility_state : npt.NDArray[{{complex}}]
        Visibility matrix.
    depth : int
        Depth of analyzed system.
    quantity : int
        Quantity of quDits in system.
    updates_count : int
        Number of optimizer iterations to execute.

    Returns
    -------
    npt.NDArray[{{complex}}]
        Optimized state.
    """

    pp1 = product(new_state, visibility_state)

    return_state = new_state.copy()

    for index in range(updates_count):
        if index % 2:
            unitary = random_unitary_bs(depth, quantity)
        else:
            unitary = random_unitary_bs_reverse(depth, quantity)
        {% if debug_dtype_checks %}assert_dtype(unitary, {{complex}}){% endif %}

        return_state = rotate(new_state, unitary)
        {% if debug_dtype_checks %}assert_dtype(return_state, {{complex}}){% endif %}

        if pp1 > product(return_state, visibility_state):
            unitary = unitary.conj().T
            return_state = rotate(new_state, unitary)
            {% if debug_dtype_checks %}assert_dtype(return_state, {{complex}}){% endif %}

        while (pp2 := product(return_state, visibility_state)) > pp1:
            pp1 = pp2
            return_state = rotate(return_state, unitary)
            {% if debug_dtype_checks %}assert_dtype(return_state, {{complex}}){% endif %}

        {% if debug_dtype_checks %}assert_dtype(return_state, {{complex}}){% endif %}

    {% if debug_dtype_checks %}assert_dtype(return_state, {{complex}}){% endif %}

    return return_state
