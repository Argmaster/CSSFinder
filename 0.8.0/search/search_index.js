var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"CSSFinder"},{"location":"index.html#cssfinder-closest-separable-state-finder","title":"CSSFinder - Closest Separable State Finder","text":"<p>CSSFinder is a software designed to find the closest separable state (CSS) for a given quantum state. This helps in quantifying entanglement and classifying quantum states as entangled or separable.</p> <p>This software has been designed in a modular way. This is manifested by the separation of the main part, which contains the user interface and modularity support elements, from the algorithm implementation. The main part was written in Python and uses the mechanisms of Python modules. Since it is possible to craft shared libraries in such a way that Python imports them as native modules any compiled language can be used to create highly optimized implementations of desired algorithms. Such implementations are called backends and they use minimalistic interface to interact with main part of the program.</p> <p>In parallel with the development of this main part, two implementations of the algorithm were created:</p> <ul> <li><code>cssfinder_backend_numpy</code> - based on Python NumPy library implementing highly   optimized multidimensional arrays and linear algebra.</li> <li><code>cssfinder_backend_rust</code> - based on Rust ndarray crate which is an equivalent   of NumPy from Rust language world.</li> </ul> <p>Development of those two implementations allowed us to better understand limits of what can and what can not become faster.</p>"},{"location":"index.html#documentation","title":"Documentation","text":"<p>CSSFinder online documentation can be found here.</p>"},{"location":"index.html#installation","title":"Installation","text":"<p>To install CSSFinder from PyPI, use <code>pip</code> in terminal:</p> <pre><code>pip install cssfinder\n</code></pre> <p>You will have to also install a <code>backend</code> package, which contains concrete implementation of algorithms. Simples way is to just install <code>numpy</code> or <code>rust</code> extras set:</p> <pre><code>pip install cssfinder[numpy]\n</code></pre> <pre><code>pip install cssfinder[rust]\n</code></pre> <p>For more detailed description of installation process visit CSSFinder online documentation.</p>"},{"location":"index.html#quick-start-guide","title":"Quick start guide","text":"<p>For quick start guide please visit Quick Start Guide in CSSFinder online documentation.</p>"},{"location":"index.html#command-line-interface","title":"Command line interface","text":"<p>To display command line interface map use following command:</p> <pre><code>cssfinder show-command-tree\n</code></pre> <p>Output should look similar to this:</p> <pre><code> ...cssfinder show-command-tree\nmain                           - CSSFinder is a script for finding closest separable states.\n\u251c\u2500\u2500 clone-example              - Clone one of examples to specific location.\n\u251c\u2500\u2500 create-new-json-project    - Create new JSON based project directory `&lt;name&gt;` in current working directory.\n\u251c\u2500\u2500 create-new-python-project  - Create new Python based project directory `&lt;name&gt;` in current working\n\u251c\u2500\u2500 list-backends              - List available backends.\n\u251c\u2500\u2500 list-examples              - Show list of all available example projects.\n\u251c\u2500\u2500 project                    - Group of commands for interaction with projects.\n\u2502   \u251c\u2500\u2500 add-gilbert-task       - Add new gilbert algorithm task.\n\u2502   \u251c\u2500\u2500 create-json-summary    - Load and display project.\n\u2502   \u251c\u2500\u2500 create-task-report     - Create short report for task.\n\u2502   \u251c\u2500\u2500 inspect                - Load project from PROJECT_PATH and display its contents.\n\u2502   \u251c\u2500\u2500 inspect-output         - Load project from PROJECT_PATH and display output of task specified by\n\u2502   \u251c\u2500\u2500 inspect-tasks          - Load project from PROJECT_PATH and inspect configuration of tasks specified by\n\u2502   \u251c\u2500\u2500 list-tasks             - Load project from PROJECT_PATH and list names of all tasks defined.\n\u2502   \u251c\u2500\u2500 run-tasks              - Run tasks from the project.\n\u2502   \u2514\u2500\u2500 to-python              - Load project from JSON_PROJECT_PATH and convert it to Python based project.\n\u2514\u2500\u2500 show-command-tree          - Show the command tree of your CLI.\n</code></pre>"},{"location":"index.html#development","title":"Development","text":"<p>For development guidelines please visit Development in CSSFinder online documentation.</p>"},{"location":"Changelog.html","title":"Changelog","text":"<p>NOTE: CSSFinder follows the semver versioning standard.</p>"},{"location":"Changelog.html#080-april-17-2024","title":"0.8.0 - April 17, 2024","text":"<ul> <li>Added documentation with MkDocs. Documentation contains multiple guides for   new users and full autogenerated package reference.</li> <li>Changed command line interface. Now <code>cssfinder project</code> commands no longer   auto-detect project as current working directory.</li> <li>Added JSON report format.</li> </ul>"},{"location":"Changelog.html#070-may-19-2023","title":"0.7.0 - May 19, 2023","text":"<ul> <li>Added G3PaE3qD mode support.</li> <li>Changed CLI structure to be flatter.</li> <li>Added command allowing for inspecting projects and outputs.</li> <li>Added command for batch calculation of summaries for task outputs.</li> <li>Bumped version of cssfinder-backend-rust to 0.1.1</li> <li>Bumped version of cssfinder-backend-numpy to 0.5.0</li> </ul>"},{"location":"Changelog.html#060-april-27-2023","title":"0.6.0 - April 27, 2023","text":"<ul> <li>Added 32x32 matrix FSnQd example <code>benchmark_32x32</code>.</li> <li>Added 64x64 matrix FSnQd example <code>benchmark_64x64</code>.</li> <li>Added automatic flush to json file for perf measurements.</li> <li>Added automated task parallel queue.</li> <li>Added parallel control parameters to <code>task run</code> cli.</li> <li>Added extras groups <code>backend-numpy</code> and <code>backend-rust</code> containing optional   backend dependencies.</li> <li>Added CLI/TUI interface for adding new task.</li> <li>Added command for creating new static projects.</li> <li>Changed <code>cssfinder project ./path/to/project</code> to   <code>cssfinder project -p ./path/to/project</code> (replaced argument with an option).</li> <li>Changed logger to output log files with <code>.log</code> extension.</li> <li>Fixed <code>jinja2</code> dependency missing error.</li> <li>Bump rich from 13.3.2 to 13.3.3 (#33)</li> <li>Bump pydantic from 1.10.6 to 1.10.7 (#32)</li> </ul>"},{"location":"Changelog.html#050-mar-20-2023","title":"0.5.0 - Mar 20, 2023","text":"<ul> <li>Add dynamically loaded backends.</li> <li>Remove bundled numpy backend. Now it has to be installed separately from   <code>cssfinder_backend_numpy</code>.</li> <li>Add automatic priority elevation, may require administrator privileges.</li> </ul>"},{"location":"Changelog.html#040-mar-17-2023","title":"0.4.0 - Mar 17, 2023","text":"<ul> <li>Add interface for accessing bundled examples.</li> <li>Add support for projections and symmetries.</li> </ul>"},{"location":"Changelog.html#030-mar-15-2023","title":"0.3.0 - Mar 15, 2023","text":"<ul> <li>Add HTML and PDF reports.</li> <li>Fix matrix shape deduction in SBiPa mode.</li> <li>Fix system tests when run in parallel.</li> <li>Add examples to <code>CSSFinder</code> package (wheel/sdist).</li> </ul>"},{"location":"Changelog.html#020-mar-10-2023","title":"0.2.0 - Mar 10, 2023","text":"<ul> <li>Fix SBiPa mode when given fixed system size. System size detection is still   not working.</li> </ul>"},{"location":"Changelog.html#010-mar-8-2023","title":"0.1.0 - Mar 8, 2023","text":"<ul> <li>Add project based execution using <code>cssfproject.json</code> file.</li> <li>Add report generation for projects with   <code>cssfinder project &lt;project-path&gt; task-report &lt;task-name&gt;</code> command.</li> <li>Add fully separable state for n quDits (<code>FSnQd</code>) mode.</li> <li>Add backend based on numpy with single (32 bit float) and double (64 bit   float) precision.</li> <li>Add CI system with tests, quality checks and automated deployments.</li> </ul>"},{"location":"LICENSE.html","title":"License","text":"<p>Copyright 2023 Krzysztof Wi\u015bniewski</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"development/00_setup.html","title":"Setup","text":"<p>This project uses <code>Python</code> programming language and requires at least python <code>3.8</code> for development and distribution. Development dependencies <code>poetry</code> for managing dependencies and distribution building. It is necessary to perform any operations in development environment.</p> <p>To install poetry globally (preferred way) use <code>pip</code> in terminal:</p> <pre><code>pip install poetry\n</code></pre> <p>Then use</p> <pre><code>poetry shell\n</code></pre> <p>to spawn new shell with virtual environment activated. Virtual environment will be indicated by terminal prompt prefix <code>(cssfinder-py3.10)</code>, version indicated in prefix depends on used version of Python interpreter. It is not necessary to use Python 3.10, however at least 3.8 is required.</p> <p>Within shell with active virtual environment use:</p> <pre><code>poetry install --sync\n</code></pre> <p>To install all dependencies. Every time you perform a <code>git pull</code> or change a branch, you should call this command to make sure you have the correct versions of dependencies.</p> <p>Last line should contain something like:</p> <pre><code>Installing the current project: cssfinder (0.1.0)\n</code></pre> <p>If no error messages are shown, You are good to go.</p>"},{"location":"development/01_code_quality.html","title":"Code quality","text":"<p>To ensure that all code follow same style guidelines and code quality rules, multiple static analysis tools are used. For simplicity, all of them are configured as <code>pre-commit</code> (learn about pre-commit) hooks. Most of them however are listed as development dependencies.</p> <ul> <li> <p><code>autocopyright</code>: This hook automatically adds copyright headers to files. It   is used to ensure that all files in the repository have a consistent   copyright notice.</p> </li> <li> <p><code>autoflake</code>: This hook automatically removes unused imports from Python code.   It is used to help keep code clean and maintainable by removing unnecessary   code.</p> </li> <li> <p><code>docformatter</code>: This hook automatically formats docstrings in Python code. It   is used to ensure that docstrings are consistent and easy to read.</p> </li> <li> <p><code>prettier</code>: This hook automatically formats code in a variety of languages,   including JavaScript, HTML, CSS, and Markdown. It is used to ensure that code   is consistently formatted and easy to read.</p> </li> <li> <p><code>isort</code>: This hook automatically sorts Python imports. It is used to ensure   that imports are organized in a consistent and readable way.</p> </li> <li> <p><code>black</code>: This hook automatically formats Python code. It is used to ensure   that code is consistently formatted and easy to read.</p> </li> <li> <p><code>check-merge-conflict</code>: This hook checks for merge conflicts. It is used to   ensure that code changes do not conflict with other changes in the   repository.</p> </li> <li> <p><code>check-case-conflict</code>: This hook checks for case conflicts in file names. It   is used to ensure that file names are consistent and do not cause issues on   case-sensitive file systems.</p> </li> <li> <p><code>trailing-whitespace</code>: This hook checks for trailing whitespace in files. It   is used to ensure that files do not contain unnecessary whitespace.</p> </li> <li> <p><code>end-of-file-fixer</code>: This hook adds a newline to the end of files if one is   missing. It is used to ensure that files end with a newline character.</p> </li> <li> <p><code>debug-statements</code>: This hook checks for the presence of debugging statements   (e.g., print statements) in code. It is used to ensure that code changes do   not contain unnecessary debugging code.</p> </li> <li> <p><code>check-added-large-files</code>: This hook checks for large files that have been   added to the repository. It is used to ensure that large files are not   accidentally committed to the repository.</p> </li> <li> <p><code>check-toml</code>: This hook checks for syntax errors in TOML files. It is used to   ensure that TOML files are well-formed.</p> </li> <li> <p><code>mixed-line-ending</code>: This hook checks for mixed line endings (e.g., a mix of   Windows and Unix line endings) in text files. It is used to ensure that text   files have consistent line endings.</p> </li> </ul> <p>To run all checks, you must install hooks first with poe</p> <pre><code>poe install-hooks\n</code></pre> <p>After you have once used this command, you wont have to use it in this environment. Then you can use</p> <pre><code>poe run-hooks\n</code></pre> <p>To run checks and automatic fixing. Not all issues can be automatically fixed, some of them will require your intervention.</p> <p>Successful hooks run should leave no Failed tasks:</p> <p></p> <p>Example of failed task:</p> <p></p> <p>Those hooks will be run also while you try to commit anything. If any tasks fails, no commit will be created, instead you will be expected to fix errors and add stage fixes. Then you may retry running <code>git commit</code>.</p>"},{"location":"development/02_packaging.html","title":"Packaging","text":"<p>A Python Wheel is a built package format for Python that can be easily installed and distributed, containing all the files necessary to install a module and can be installed with pip with all dependencies automatically installed too.</p> <p>To create wheel of cssfinder use <code>poe</code> task in terminal:</p> <pre><code>poe build\n</code></pre> <p></p> <p>This will create <code>dist/</code> directory with <code>cssfinder-0.7.0</code> or alike inside.</p> <p>Wheel file can be installed with</p> <pre><code>pip install ./dist/cssfinder-0.7.0\n</code></pre> <p>What you expect is</p> <pre><code>Successfully installed cssfinder-0.7.0\n</code></pre> <p>or rather something like</p> <pre><code>Successfully installed click-8.1.3 contourpy-1.0.7 cssfinder-0.7.0 cycler-0.11.0 dnspython-2.3.0 email-validator-1.3.1 fonttools-4.39.0 idna-3.4 jsonref-1.1.0 kiwisolver-1.4.4 llvmlite-0.39.1 markdown-it-py-2.2.0 matplotlib-3.7.1 mdurl-0.1.2 numba-0.56.4 numpy-1.23.5 packaging-23.0 pandas-1.5.3 pendulum-2.1.2 pillow-9.4.0 pydantic-1.10.5 pygments-2.14.0 pyparsing-3.0.9 python-dateutil-2.8.2 pytz-2022.7.1 pytzdata-2020.1 rich-13.3.2 scipy-1.10.1 six-1.16.0 typing-extensions-4.5.0\n</code></pre> <p>But <code>cssfinder-0.7.0</code> should be included in this list.</p>"},{"location":"development/03_profiling.html","title":"Profiling","text":"<p>To run simple profiling, You can use following command:</p> <pre><code>python -mcProfile -o \"#examples_profile_5qubits_prof.prof\" \"assets/profiling/5qubits_prof/cssfproject.py\"\n</code></pre> <p>Then You can view output using snakeviz:</p> <pre><code>snakeviz \"#examples_profile_5qubits_prof.prof\"\n</code></pre>"},{"location":"reference/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>cssfinder<ul> <li>algorithm<ul> <li>backend<ul> <li>base</li> <li>loader</li> </ul> </li> <li>gilbert</li> <li>mode_util</li> </ul> </li> <li>api</li> <li>base_model</li> <li>cli</li> <li>constants</li> <li>crossplatform</li> <li>cssfproject</li> <li>enums</li> <li>interactive</li> <li>io<ul> <li>gilbert_io</li> <li>matrix</li> </ul> </li> <li>jinja2_tools</li> <li>log</li> <li>reports<ul> <li>archive</li> <li>html</li> <li>json</li> <li>manager</li> <li>math</li> <li>pdf</li> <li>plotting</li> <li>renderer</li> <li>txt</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/cssfinder/__init__.html","title":"init","text":""},{"location":"reference/cssfinder/__init__.html#cssfinder","title":"cssfinder","text":"<p>CSSFinder (Closest Separable State Finder) is a package containing implementation of Gilbert algorithm for finding an upper bound on the Hilbert-Schmidt distance between a given state and the set of separable states.</p>"},{"location":"reference/cssfinder/api.html","title":"api","text":""},{"location":"reference/cssfinder/api.html#cssfinder.api","title":"api","text":"<p>Module contains high level API of cssfinder.</p>"},{"location":"reference/cssfinder/api.html#cssfinder.api.TaskOptions","title":"TaskOptions  <code>dataclass</code>","text":"<p>Container for extra task options.</p> Source code in <code>cssfinder/api.py</code> <pre><code>@dataclass\nclass TaskOptions:\n    \"\"\"Container for extra task options.\"\"\"\n\n    is_debug: bool\n    is_rich: bool = True\n</code></pre>"},{"location":"reference/cssfinder/api.html#cssfinder.api.AmbiguousTaskKeyError","title":"AmbiguousTaskKeyError","text":"<p>             Bases: <code>KeyError</code></p> <p>Raised during report creation when name pattern selects more than one task.</p> Source code in <code>cssfinder/api.py</code> <pre><code>class AmbiguousTaskKeyError(KeyError):\n    \"\"\"Raised during report creation when name pattern selects more than one task.\"\"\"\n</code></pre>"},{"location":"reference/cssfinder/api.html#cssfinder.api.run_project_from","title":"run_project_from","text":"<pre><code>run_project_from(\n    project_file_path: Path | str,\n    tasks: list[str] | None = None,\n    *,\n    is_debug: bool = False,\n    is_rich: bool = True,\n    force_sequential: bool = False,\n    max_parallel: int = -1\n) -&gt; None\n</code></pre> <p>Load project and run all tasks.</p> Source code in <code>cssfinder/api.py</code> <pre><code>def run_project_from(\n    project_file_path: Path | str,\n    tasks: list[str] | None = None,\n    *,\n    is_debug: bool = False,\n    is_rich: bool = True,\n    force_sequential: bool = False,\n    max_parallel: int = -1,\n) -&gt; None:\n    \"\"\"Load project and run all tasks.\"\"\"\n    project = CSSFProject.load_project(project_file_path)\n    logging.info(\n        \"Loaded project %r by %r &lt;%r&gt;.\",\n        project.meta.name,\n        project.meta.author,\n        project.meta.email,\n    )\n    run_project(\n        project,\n        tasks,\n        is_debug=is_debug,\n        is_rich=is_rich,\n        force_sequential=force_sequential,\n        max_parallel=max_parallel,\n    )\n</code></pre>"},{"location":"reference/cssfinder/api.html#cssfinder.api.run_project","title":"run_project","text":"<pre><code>run_project(\n    project: CSSFProject,\n    tasks: list[str] | None = None,\n    *,\n    is_debug: bool = False,\n    is_rich: bool = True,\n    force_sequential: bool = False,\n    max_parallel: int = -1\n) -&gt; list[Task]\n</code></pre> <p>Run all tasks defined in project.</p> Source code in <code>cssfinder/api.py</code> <pre><code>def run_project(\n    project: CSSFProject,\n    tasks: list[str] | None = None,\n    *,\n    is_debug: bool = False,\n    is_rich: bool = True,\n    force_sequential: bool = False,\n    max_parallel: int = -1,\n) -&gt; list[Task]:\n    \"\"\"Run all tasks defined in project.\"\"\"\n    logging.debug(\"Running project %r\", project.meta.name)\n\n    message = \"\\n    |  \".join(project.json(indent=2).split(\"\\n\"))\n    logging.info(\"%s\", \"\\n    |  \" + message)\n\n    task_list = project.select_tasks(tasks)\n\n    if force_sequential:\n        for out in map(\n            run_task,\n            task_list,\n            repeat(TaskOptions(is_debug=is_debug)),\n        ):\n            if isinstance(out, BaseException):\n                raise out\n\n    else:\n        with ProcessPoolExecutor(\n            max_parallel if max_parallel &gt; 0 else None,\n        ) as executor:\n            out = executor.map(\n                run_task,\n                task_list,\n                repeat(TaskOptions(is_debug=is_debug, is_rich=is_rich)),\n            )\n        for o in out:\n            if isinstance(o, BaseException):\n                raise o\n\n    return task_list\n</code></pre>"},{"location":"reference/cssfinder/api.html#cssfinder.api.run_task","title":"run_task","text":"<pre><code>run_task(task: Task, options: TaskOptions) -&gt; None\n</code></pre> <p>Run task until completed.</p> Source code in <code>cssfinder/api.py</code> <pre><code>def run_task(task: Task, options: TaskOptions) -&gt; None:\n    \"\"\"Run task until completed.\"\"\"\n    try:\n        return _run_task(task, options)\n    except Exception as e:\n        logging.critical(\n            \"Task %r failed due to exception:\\n%s\",\n            task.task_name,\n            str.join(\"\", traceback.format_exception(type(e), e, e.__traceback__)),\n        )\n        raise\n</code></pre>"},{"location":"reference/cssfinder/api.html#cssfinder.api.run_gilbert","title":"run_gilbert","text":"<pre><code>run_gilbert(\n    config: GilbertCfg,\n    task_output_directory: Path,\n    *,\n    is_debug: bool = False,\n    is_rich: bool = True\n) -&gt; None\n</code></pre> <p>Run Gilbert algorithm part of task.</p> Source code in <code>cssfinder/api.py</code> <pre><code>def run_gilbert(\n    config: GilbertCfg,\n    task_output_directory: Path,\n    *,\n    is_debug: bool = False,\n    is_rich: bool = True,\n) -&gt; None:\n    \"\"\"Run Gilbert algorithm part of task.\"\"\"\n    asset_io = GilbertIO()\n\n    task_output_directory.mkdir(0o777, parents=True, exist_ok=True)\n    logging.debug(\"Created directory: %r\", task_output_directory.as_posix())\n\n    algorithm = create_gilbert(config, asset_io, is_debug=is_debug)\n\n    logging.info(\"Task %r started.\", config.task_name)\n\n    if is_rich:\n        rich.print(Panel.fit(f\"[blue]Task {config.task_name} started.\"))\n    else:\n        print(\"-----------------------\")\n        print(f\"| Task {config.task_name} started |\")\n        print(\"-----------------------\")\n\n    for epoch_index in algorithm.run(\n        max_epochs=config.runtime.max_epochs,\n        iterations_per_epoch=config.runtime.iters_per_epoch,\n        max_corrections=config.runtime.max_corrections,\n    ):\n        if corrections_count := algorithm.get_corrections_count():\n            corrections = algorithm.get_corrections()\n            state = algorithm.get_state()\n\n            logging.info(\n                \"Executing epoch %r / %r (%.1f%%) - corrections: %r best: %r\",\n                epoch_index + 1,\n                config.runtime.max_epochs,\n                ((epoch_index + 1) / config.runtime.max_epochs) * 100,\n                corrections_count,\n                corrections[-1][2],\n            )\n            asset_io.dump_state(state, config.output_state_file)\n            asset_io.dump_corrections(corrections, config.output_corrections_file)\n\n        else:\n            logging.info(\n                \"Executing epoch %r / %r (%.1f%%) - no corrections.\",\n                epoch_index + 1,\n                config.runtime.max_epochs,\n                ((epoch_index + 1) / config.runtime.max_epochs) * 100,\n            )\n\n    logging.warning(\"Task %r finished.\", config.task_name)\n\n    if is_rich:\n        rich.print(Panel.fit(f\"[blue]Task {config.task_name} finished.\"))\n    else:\n        print(\"-----------------------\")\n        print(f\"| Task {config.task_name} finished |\")\n        print(\"-----------------------\")\n</code></pre>"},{"location":"reference/cssfinder/api.html#cssfinder.api.create_gilbert","title":"create_gilbert","text":"<pre><code>create_gilbert(\n    config: GilbertCfg,\n    asset_io: GilbertIO,\n    *,\n    is_debug: bool\n) -&gt; Gilbert\n</code></pre> <p>Create Gilbert object from configuration with help of specified IO.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>GilbertCfg</code> <p>Algorithm configuration.</p> required <code>asset_io</code> <code>GilbertIO</code> <p>IO manager to use for loading assets.</p> required <code>is_debug</code> <code>bool</code> <p>Debug mode flag.</p> required <p>Returns:</p> Type Description <code>Gilbert</code> <p>Initialized</p> Source code in <code>cssfinder/api.py</code> <pre><code>def create_gilbert(\n    config: GilbertCfg,\n    asset_io: GilbertIO,\n    *,\n    is_debug: bool,\n) -&gt; Gilbert:\n    \"\"\"Create Gilbert object from configuration with help of specified IO.\n\n    Parameters\n    ----------\n    config : GilbertCfg\n        Algorithm configuration.\n    asset_io : GilbertIO\n        IO manager to use for loading assets.\n    is_debug : bool\n        Debug mode flag.\n\n    Returns\n    -------\n    Gilbert\n        Initialized\n\n    \"\"\"\n    state_config = config.get_state()\n\n    initial_state = asset_io.load_state(state_config.expanded_file)\n\n    if state_config.is_predefined_dimensions():\n        depth = state_config.get_depth()\n        quantity = state_config.get_quantity()\n        logging.info(\"Using fixed dimensions depth=%r quantity=%r\", depth, quantity)\n\n    else:\n        dimensions = ModeUtil.new(config.mode).get_dimensions(initial_state)\n        depth = dimensions.depth\n        quantity = dimensions.quantity\n        logging.info(\"Deduced dimensions depth=%r quantity=%r\", depth, quantity)\n\n    symmetries = asset_io.load_symmetries(config.get_resources().symmetries)\n    if symmetries:\n        logging.info(\"Loaded symmetries:\")\n        for i, row in enumerate(symmetries):\n            logging.info(\"Row %r: %r\", i, [repr(sym.shape) for sym in row])\n    else:\n        logging.info(\"No symmetries provided.\")\n\n    projection = asset_io.load_projection(config.get_resources().projection)\n    if projection is not None:\n        logging.info(\"Loaded projection: %r\", projection.shape)\n    else:\n        logging.info(\"No projection provided.\")\n\n    algorithm = Gilbert(\n        initial=initial_state,\n        depth=depth,\n        quantity=quantity,\n        mode=config.mode,\n        backend=config.get_backend().name,\n        precision=config.get_backend().precision,\n        visibility=config.runtime.visibility,\n        is_debug=is_debug,\n    )\n    algorithm.set_symmetries(symmetries)\n    if projection is not None:\n        algorithm.set_projection(projection)\n\n    return algorithm\n</code></pre>"},{"location":"reference/cssfinder/api.html#cssfinder.api.create_report_from","title":"create_report_from","text":"<pre><code>create_report_from(\n    project_file_path: Path | str,\n    task: str,\n    reports: list[ReportType],\n) -&gt; Iterable[Report]\n</code></pre> <p>Load project (<code>cssfproject.json</code>) and create report for task selected by pattern.</p> <p>Parameters:</p> Name Type Description Default <code>project_file_path</code> <code>Path | str</code> <p>Path to cssfproject.json file or directory containing one.</p> required <code>task</code> <code>str</code> <p>Name or glob expression matching task name, expected to result in selection of single task.</p> required <code>reports</code> <code>list[ReportType]</code> <p>description</p> required <p>Returns:</p> Type Description <code>Iterable[Report]</code> <p>description</p> <p>Yields:</p> Type Description <code>Iterator[Iterable[Report]]</code> <p>description</p> Source code in <code>cssfinder/api.py</code> <pre><code>def create_report_from(\n    project_file_path: Path | str,\n    task: str,\n    reports: list[ReportType],\n) -&gt; Iterable[Report]:\n    \"\"\"Load project (`cssfproject.json`) and create report for task selected by pattern.\n\n    Parameters\n    ----------\n    project_file_path : Path | str\n        Path to cssfproject.json file or directory containing one.\n    task : str\n        Name or glob expression matching task name, expected to result in selection of\n        single task.\n    reports : list[ReportType]\n        _description_\n\n    Returns\n    -------\n    Iterable[Report]\n        _description_\n\n    Yields\n    ------\n    Iterator[Iterable[Report]]\n        _description_\n\n    \"\"\"\n    project = CSSFProject.load_project(project_file_path)\n    logging.info(\n        \"Loaded project %r by %r &lt;%r&gt;.\",\n        project.meta.name,\n        project.meta.author,\n        project.meta.email,\n    )\n    yield from create_report(project, task, reports)\n</code></pre>"},{"location":"reference/cssfinder/api.html#cssfinder.api.create_report","title":"create_report","text":"<pre><code>create_report(\n    project: CSSFProject,\n    task: str,\n    reports: list[ReportType],\n) -&gt; Iterable[Report]\n</code></pre> <p>Create report for task selected by pattern from project object.</p> Source code in <code>cssfinder/api.py</code> <pre><code>def create_report(\n    project: CSSFProject,\n    task: str,\n    reports: list[ReportType],\n) -&gt; Iterable[Report]:\n    \"\"\"Create report for task selected by pattern from project object.\"\"\"\n    tasks = project.select_tasks([task])\n\n    for task_object in tasks:\n        logging.info(\"Creating summary for task %s\", task_object.task_name)\n\n        manager = ReportManager(project, task_object)\n        prepared_manager = manager.prepare()\n\n        for report_type in reports:\n            logging.info(\n                \"Report for task %s of type %s\",\n                task_object.task_name,\n                report_type.name,\n            )\n            yield prepared_manager.request_report(report_type)\n</code></pre>"},{"location":"reference/cssfinder/base_model.html","title":"base_model","text":""},{"location":"reference/cssfinder/base_model.html#cssfinder.base_model","title":"base_model","text":"<p>Module contains classes deriving from BaseModel used as base classes in cssfinder code.</p>"},{"location":"reference/cssfinder/base_model.html#cssfinder.base_model.CommonBaseModel","title":"CommonBaseModel","text":"<p>             Bases: <code>BaseModel</code></p> <p>Universal base class for most of model classes which contains commonly used model configuration.</p> Source code in <code>cssfinder/base_model.py</code> <pre><code>class CommonBaseModel(BaseModel):\n    \"\"\"Universal base class for most of model classes which contains commonly used model\n    configuration.\n    \"\"\"\n\n    class Config:\n        \"\"\"CommonBaseModel behavior configuration.\"\"\"\n\n        validate_assignment = True\n        extra = Extra.ignore\n        underscore_attrs_are_private = True\n        arbitrary_types_allowed = True\n</code></pre>"},{"location":"reference/cssfinder/base_model.html#cssfinder.base_model.CommonBaseModel.Config","title":"Config","text":"<p>CommonBaseModel behavior configuration.</p> Source code in <code>cssfinder/base_model.py</code> <pre><code>class Config:\n    \"\"\"CommonBaseModel behavior configuration.\"\"\"\n\n    validate_assignment = True\n    extra = Extra.ignore\n    underscore_attrs_are_private = True\n    arbitrary_types_allowed = True\n</code></pre>"},{"location":"reference/cssfinder/cli.html","title":"cli","text":""},{"location":"reference/cssfinder/cli.html#cssfinder.cli","title":"cli","text":"<p>Module contains implementation of CSSFinder command line interface.</p>"},{"location":"reference/cssfinder/cli.html#cssfinder.cli.Ctx","title":"Ctx  <code>dataclass</code>","text":"<p>Command line context wrapper class.</p> Source code in <code>cssfinder/cli.py</code> <pre><code>@dataclass\nclass Ctx:\n    \"\"\"Command line context wrapper class.\"\"\"\n\n    is_debug: bool = False\n    is_rich: bool = True\n    project_path: Path | None = None\n</code></pre>"},{"location":"reference/cssfinder/cli.html#cssfinder.cli.main","title":"main","text":"<pre><code>main(\n    ctx: click.Context,\n    verbose: int,\n    seed: Optional[int],\n    numpy_thread_count: int,\n    *,\n    debug: bool,\n    is_rich: bool,\n    perf_log: bool\n) -&gt; None\n</code></pre> <p>CSSFinder is a script for finding closest separable states.</p> Source code in <code>cssfinder/cli.py</code> <pre><code>@click.group(invoke_without_command=True, no_args_is_help=True)\n@click.pass_context\n@click.version_option(cssfinder.__version__, \"-V\", \"--version\", prog_name=\"cssfinder\")\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    default=0,\n    count=True,\n    help=\"Control verbosity of logging, by default+ critical only, use \"\n    \"-v, -vv, -vvv to gradually increase it.\",\n)\n@click.option(\n    \"--numpy-thread-count\",\n    type=int,\n    default=1,\n    required=False,\n    help=\"NumPy thread count override. Use '-1' to disable override and use defaults.\",\n)\n@click.option(\n    \"--seed\",\n    type=int,\n    default=None,\n    required=False,\n    help=\"NumPy random generator seed override.\",\n)\n@click.option(\"--debug\", is_flag=True, default=False)\n@click.option(\"--rich\", \"--no-rich\", \"is_rich\", is_flag=True, default=True)\n@click.option(\"--perf-log\", is_flag=True, default=False)\ndef main(\n    ctx: click.Context,\n    verbose: int,\n    seed: Optional[int],\n    numpy_thread_count: int,\n    *,\n    debug: bool,\n    is_rich: bool,\n    perf_log: bool,\n) -&gt; None:\n    \"\"\"CSSFinder is a script for finding closest separable states.\"\"\"\n    import os\n    from pprint import pformat\n\n    import pendulum\n    import rich\n    from threadpoolctl import threadpool_info\n\n    if numpy_thread_count != -1:\n        numpy_thread_count_str = str(numpy_thread_count)\n\n        os.environ[\"OMP_NUM_THREADS\"] = numpy_thread_count_str\n        os.environ[\"OPENBLAS_NUM_THREADS\"] = numpy_thread_count_str\n        os.environ[\"MKL_NUM_THREADS\"] = numpy_thread_count_str\n        os.environ[\"VECLIB_MAXIMUM_THREADS\"] = numpy_thread_count_str\n        os.environ[\"NUMEXPR_NUM_THREADS\"] = numpy_thread_count_str\n\n    import numpy as np\n\n    from cssfinder.log import configure_logger, enable_performance_logging\n\n    configure_logger(verbosity=verbose, logger_name=\"cssfinder\", use_rich=is_rich)\n    ctx.obj = Ctx(is_debug=debug, is_rich=is_rich)\n\n    if seed is not None:\n        logging.debug(\"NumPy random number generator seed set to %d\", seed)\n        np.random.seed(seed)  # noqa: NPY002\n\n    logging.debug(\"\\n%s\", pformat(threadpool_info(), indent=4))\n\n    logging.getLogger(\"numba\").setLevel(logging.ERROR)\n    logging.info(\"CSSFinder started at %s\", pendulum.now().isoformat(sep=\" \"))\n\n    if perf_log:\n        enable_performance_logging()\n\n    if verbose &gt;= VERBOSITY_INFO:\n        rich.print(\n            f\"\"\"{'[blue]' if is_rich else ''}\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\n \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\n \u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\n \u2588\u2588\u2551     \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\n \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\n  \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d     \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\n\"\"\",\n        )\n</code></pre>"},{"location":"reference/cssfinder/cli.html#cssfinder.cli.tree","title":"tree","text":"<pre><code>tree(ctx: click.Context) -&gt; None\n</code></pre> <p>Show the command tree of your CLI.</p> Source code in <code>cssfinder/cli.py</code> <pre><code>@main.command(name=\"show-command-tree\")\n@click.pass_context\ndef tree(ctx: click.Context) -&gt; None:\n    \"\"\"Show the command tree of your CLI.\"\"\"\n    root_cmd = _build_command_tree(ctx.find_root().command)\n    _print_tree(root_cmd)\n</code></pre>"},{"location":"reference/cssfinder/cli.html#cssfinder.cli.validate_mutually_exclusive","title":"validate_mutually_exclusive","text":"<pre><code>validate_mutually_exclusive(\n    this: str, other: str\n) -&gt; Callable[\n    [click.Context, dict[str, str], str], Optional[str]\n]\n</code></pre> <p>Return callback checking for mutually exclusive options.</p> Source code in <code>cssfinder/cli.py</code> <pre><code>def validate_mutually_exclusive(\n    this: str,\n    other: str,\n) -&gt; Callable[[click.Context, dict[str, str], str], Optional[str]]:\n    \"\"\"Return callback checking for mutually exclusive options.\"\"\"\n\n    def _(\n        ctx: click.Context,\n        param: dict[str, str],  # noqa: ARG001\n        value: Optional[str],\n    ) -&gt; Optional[str]:\n        if value is not None and ctx.params.get(other) is not None:\n            msg = f\"{this!r} and {other!r} options are mutually exclusive.\"\n            raise click.BadParameter(msg)\n\n        return value\n\n    return _\n</code></pre>"},{"location":"reference/cssfinder/constants.html","title":"constants","text":""},{"location":"reference/cssfinder/constants.html#cssfinder.constants","title":"constants","text":"<p>Module contains helper global constants.</p>"},{"location":"reference/cssfinder/constants.html#cssfinder.constants.PRIMES","title":"PRIMES  <code>module-attribute</code>","text":"<pre><code>PRIMES = array(\n    [\n        2,\n        3,\n        5,\n        7,\n        11,\n        13,\n        17,\n        19,\n        23,\n        29,\n        31,\n        37,\n        41,\n        43,\n        47,\n        53,\n        59,\n        61,\n        67,\n        71,\n        73,\n        79,\n        83,\n        89,\n        97,\n        101,\n        103,\n        107,\n        109,\n        113,\n        127,\n        131,\n        137,\n        139,\n        149,\n        151,\n        157,\n        163,\n        167,\n        173,\n        179,\n        181,\n        191,\n        193,\n        197,\n        199,\n        211,\n        223,\n        227,\n        229,\n        233,\n        239,\n        241,\n        251,\n        257,\n        263,\n        269,\n        271,\n        277,\n        281,\n        283,\n        293,\n        307,\n        311,\n        313,\n        317,\n        331,\n        337,\n        347,\n        349,\n        353,\n        359,\n        367,\n        373,\n        379,\n        383,\n        389,\n        397,\n        401,\n        409,\n        419,\n        421,\n        431,\n        433,\n        439,\n        443,\n        449,\n        457,\n        461,\n        463,\n        467,\n        479,\n        487,\n        491,\n        499,\n        503,\n        509,\n        521,\n        523,\n        541,\n        547,\n        557,\n        563,\n        569,\n        571,\n        577,\n        587,\n        593,\n        599,\n        601,\n        607,\n        613,\n        617,\n        619,\n        631,\n        641,\n        643,\n        647,\n        653,\n        659,\n        661,\n        673,\n        677,\n        683,\n        691,\n        701,\n        709,\n        719,\n        727,\n        733,\n        739,\n        743,\n        751,\n        757,\n        761,\n        769,\n        773,\n        787,\n        797,\n        809,\n        811,\n        821,\n        823,\n        827,\n        829,\n        839,\n        853,\n        857,\n        859,\n        863,\n        877,\n        881,\n        883,\n        887,\n        907,\n        911,\n        919,\n        929,\n        937,\n        941,\n        947,\n        953,\n        967,\n        971,\n        977,\n        983,\n        991,\n        997,\n        1009,\n        1013,\n        1019,\n        1021,\n        1031,\n        1033,\n        1039,\n        1049,\n        1051,\n        1061,\n        1063,\n        1069,\n        1087,\n        1091,\n        1093,\n        1097,\n        1103,\n        1109,\n        1117,\n        1123,\n        1129,\n        1151,\n        1153,\n        1163,\n        1171,\n        1181,\n        1187,\n        1193,\n        1201,\n        1213,\n        1217,\n        1223,\n        1229,\n        1231,\n        1237,\n        1249,\n        1259,\n        1277,\n        1279,\n        1283,\n        1289,\n        1291,\n        1297,\n        1301,\n        1303,\n        1307,\n        1319,\n        1321,\n        1327,\n        1361,\n        1367,\n        1373,\n        1381,\n        1399,\n        1409,\n        1423,\n        1427,\n        1429,\n        1433,\n        1439,\n        1447,\n        1451,\n        1453,\n        1459,\n        1471,\n        1481,\n        1483,\n        1487,\n        1489,\n        1493,\n        1499,\n        1511,\n        1523,\n        1531,\n        1543,\n        1549,\n        1553,\n        1559,\n        1567,\n        1571,\n        1579,\n        1583,\n        1597,\n        1601,\n        1607,\n        1609,\n        1613,\n        1619,\n        1621,\n        1627,\n        1637,\n        1657,\n        1663,\n        1667,\n        1669,\n        1693,\n        1697,\n        1699,\n        1709,\n        1721,\n        1723,\n        1733,\n        1741,\n        1747,\n        1753,\n        1759,\n        1777,\n        1783,\n        1787,\n        1789,\n        1801,\n        1811,\n        1823,\n        1831,\n        1847,\n        1861,\n        1867,\n        1871,\n        1873,\n        1877,\n        1879,\n        1889,\n        1901,\n        1907,\n        1913,\n        1931,\n        1933,\n        1949,\n        1951,\n        1973,\n        1979,\n        1987,\n        1993,\n        1997,\n        1999,\n    ],\n    dtype=int64,\n)\n</code></pre> <p>All prime numbers from 2 to 1999, used by algorithms in this package.</p>"},{"location":"reference/cssfinder/crossplatform.html","title":"crossplatform","text":""},{"location":"reference/cssfinder/crossplatform.html#cssfinder.crossplatform","title":"crossplatform","text":"<p>Contain platform specific implementations of common actions like opening programs.</p>"},{"location":"reference/cssfinder/crossplatform.html#cssfinder.crossplatform.System","title":"System","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of system names created to avoid typos.</p> Source code in <code>cssfinder/crossplatform.py</code> <pre><code>class System(Enum):\n    \"\"\"Enumeration of system names created to avoid typos.\"\"\"\n\n    Win32 = \"Windows\"\n    MacOS = \"Darwin\"\n    Linux = \"Linux\"\n    Other = \"Other\"\n\n    @classmethod\n    def _missing_(cls, value: Any) -&gt; System:  # noqa: ARG003\n        return cls.Other\n</code></pre>"},{"location":"reference/cssfinder/crossplatform.html#cssfinder.crossplatform.Priority","title":"Priority","text":"<p>             Bases: <code>Enum</code></p> <p>Process priority constants.</p> Source code in <code>cssfinder/crossplatform.py</code> <pre><code>class Priority(Enum):  # type: ignore[no-redef]\n    \"\"\"Process priority constants.\"\"\"\n\n    IDLE = 19\n    BELOW_NORMAL = 10\n    NORMAL = 0\n    ABOVE_NORMAL = -7\n    HIGH = -15\n    REALTIME = -20\n</code></pre>"},{"location":"reference/cssfinder/crossplatform.html#cssfinder.crossplatform.IoPriority","title":"IoPriority","text":"<p>             Bases: <code>Enum</code></p> <p>Process I/O niceness.</p> <p>Not available on MacOS.</p> Source code in <code>cssfinder/crossplatform.py</code> <pre><code>class IoPriority(Enum):  # type: ignore[no-redef]\n    \"\"\"Process I/O niceness.\n\n    Not available on MacOS.\n\n    \"\"\"\n\n    HIGH = 0\n    NORMAL = 1\n    LOW = 2\n    NONE = 3\n</code></pre>"},{"location":"reference/cssfinder/crossplatform.html#cssfinder.crossplatform.open_file_explorer","title":"open_file_explorer","text":"<pre><code>open_file_explorer(path: Path) -&gt; None\n</code></pre> <p>Open file explorer application specific to platform.</p> Source code in <code>cssfinder/crossplatform.py</code> <pre><code>def open_file_explorer(path: Path) -&gt; None:\n    \"\"\"Open file explorer application specific to platform.\"\"\"\n    subprocess.Popen([\"xdg-open\", path])\n</code></pre>"},{"location":"reference/cssfinder/crossplatform.html#cssfinder.crossplatform.open_terminal","title":"open_terminal","text":"<pre><code>open_terminal(path: Path) -&gt; None\n</code></pre> <p>Open terminal application specific to platform.</p> Source code in <code>cssfinder/crossplatform.py</code> <pre><code>def open_terminal(path: Path) -&gt; None:\n    \"\"\"Open terminal application specific to platform.\"\"\"\n    terminal = os.environ.get(\"TERMINAL\", \"x-terminal-emulator\")\n    subprocess.Popen([terminal, \"--working-directory\", str(path)])\n</code></pre>"},{"location":"reference/cssfinder/crossplatform.html#cssfinder.crossplatform.set_priority","title":"set_priority","text":"<pre><code>set_priority(\n    pid: int, priority: Priority, io_priority: IoPriority\n) -&gt; None\n</code></pre> <p>Set process priority. Implemented for win32, linux and macOS, noop elsewhere.</p> <p>Can raise psutil.AccessDenied. io_priority is noop on macOS.</p> Source code in <code>cssfinder/crossplatform.py</code> <pre><code>def set_priority(pid: int, priority: Priority, io_priority: IoPriority) -&gt; None:\n    \"\"\"Set process priority. Implemented for win32, linux and macOS, noop elsewhere.\n\n    Can raise psutil.AccessDenied. io_priority is noop on macOS.\n\n    \"\"\"\n    process = psutil.Process(pid)\n    process.nice(priority.value)\n\n    if IS_MAC:\n        return\n\n    if IS_LINUX:\n        if io_priority == IoPriority.HIGH:\n            process.ionice(io_priority.value, value=0)\n            return\n\n        if io_priority == IoPriority.NORMAL:\n            process.ionice(io_priority.value, value=0)\n\n    if IS_WIN32:\n        process.ionice(io_priority.value)\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html","title":"cssfproject","text":""},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject","title":"cssfproject","text":"<p>CSSFinder uses its own project format allowing for file based customization of parameters used by gilbert algorithm.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.CSSFProject","title":"CSSFProject","text":"<p>             Bases: <code>CommonBaseModel</code></p> <p>CSSFProject file specification.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>class CSSFProject(CommonBaseModel):\n    \"\"\"CSSFProject file specification.\"\"\"\n\n    meta: Meta\n    \"\"\"Project meta information like name and author.\"\"\"\n\n    tasks: Dict[str, Task]\n    \"\"\"List of tasks within project which can be executed.\"\"\"\n\n    _project_path: Path\n    \"\"\"Path to cssfproject.json file.\"\"\"\n\n    def __init__(\n        self,\n        meta: Meta,\n        tasks: list[Task] | dict[str, Task],\n        project_path: str | Path,\n        *_: Any,\n        **_k: Any,\n    ) -&gt; None:\n        \"\"\"Initialize instance.\n\n        extra args and kwargs are ignored.\n\n        \"\"\"\n        super().__init__(meta=meta, tasks=tasks)\n\n        if not isinstance(project_path, Path):\n            project_path = Path(project_path)\n\n        self._project_path = project_path.expanduser().resolve()\n\n        if not self._project_path.exists():\n            raise FileNotFoundError(self._project_path)\n\n        self.bind()\n\n    @validator(\"tasks\", pre=True, always=True)\n    @classmethod\n    def _validate_tasks(\n        cls,\n        value: Iterable[dict[str, Any] | Task] | dict[str, dict[str, Any] | Task | Any],\n    ) -&gt; dict[str, dict[str, Any] | Task]:\n        if isinstance(value, dict):\n            for k, v in value.items():\n                if not isinstance(v, (dict, Task)):\n                    error_message = f\"Incorrect format of Tasks field {k!r}.\"\n                    raise IncorrectFormatOfTaskFieldError(error_message)\n\n            return {str(k): dict(v) for k, v in value.items()}\n\n        for i, v in enumerate(value):\n            if not isinstance(v, (dict, Task)):\n                error_message = f\"Incorrect format of Tasks field {i!r}.\"\n                raise IncorrectFormatOfTaskFieldError(error_message)\n\n        return {str(i): t for i, t in enumerate(value)}\n\n    def bind(self) -&gt; None:\n        \"\"\"Bind fields to this CSSFProject object.\"\"\"\n        self.meta.bind(self)\n\n        for task_name, task in self.tasks.items():\n            task.bind(self, task_name)\n\n    @property\n    def project_file(self) -&gt; Path:\n        \"\"\"Path to `cssfproject.json` file.\"\"\"\n        return project_file_path(self._project_path)\n\n    @property\n    def project_directory(self) -&gt; Path:\n        \"\"\"Path to directory containing `cssfproject.json` file.\"\"\"\n        return self.project_file.parent\n\n    @property\n    def project_output_directory(self) -&gt; Path:\n        \"\"\"Path to output directory for this project.\"\"\"\n        directory = self.project_directory / \"output\"\n        directory.mkdir(0o777, parents=True, exist_ok=True)\n        return directory\n\n    @classmethod\n    def load_project(cls, file_or_directory: str | Path) -&gt; Self:\n        \"\"\"Load CSSFinder project in at least 1.0.0 version.\n\n        Parameters\n        ----------\n        file_or_directory : str | Path\n            Either project file (cssfproject.json) or directory containing project file.\n\n        Returns\n        -------\n        CSSFProject\n            Project information container.\n\n        Raises\n        ------\n        InvalidCSSFProjectContent\n            Raised when project file content is not a dictionary.\n        MalformedProjectFileError\n            When content of project file is not valid json.\n\n        \"\"\"\n        # Unify path type to Path\n        file_or_directory = Path(file_or_directory).expanduser().resolve()\n\n        # When points to directory, dir must contain cssfproject.json file\n        project_path = project_file_path(file_or_directory)\n\n        if project_path.suffix == \".json\":\n            return cls._load_json_project(project_path)\n\n        if project_path.suffix == \".py\":\n            return cls._load_py_cssfproject(project_path)\n\n        msg = f\"Unknown project format {project_path.suffix} of project {project_path}\"\n        raise FileNotFoundError(msg)\n\n    @staticmethod\n    def is_project_path(file_or_directory: Path) -&gt; bool:\n        \"\"\"Check if path points to CSSFinder project file or project directory.\"\"\"\n        try:\n            project_file_path(file_or_directory)\n        except FileNotFoundError:\n            return False\n        else:\n            return True\n\n    @classmethod\n    def _load_json_project(cls, project_path: Path) -&gt; Self:\n        logging.debug(\"Resolved project path to %r\", project_path.as_posix())\n        try:\n            content = project_path.read_text(encoding=\"utf-8\")\n        except FileNotFoundError as exc:\n            error_message = f\"Make sure you path is correct: {project_path}\"\n            raise ProjectFileNotFoundError(error_message) from exc\n\n        try:\n            decoded_content = jsonref.loads(content)\n        except json.decoder.JSONDecodeError as exc:\n            raise MalformedProjectFileError(exc.msg, exc.doc, exc.pos) from exc\n\n        if not isinstance(decoded_content, dict):\n            logging.critical(\"Content of cssfproject.json file is not a dictionary.\")\n            raise InvalidCSSFProjectContentError(decoded_content)\n\n        return cls(**decoded_content, project_path=project_path)\n\n    @classmethod\n    def _load_py_cssfproject(cls, project_path: Path) -&gt; Self:\n        spec = importlib.util.spec_from_file_location(\n            project_path.name[:-3],\n            project_path.as_posix(),\n        )\n        if spec is None or spec.loader is None:\n            msg = f\"Failed to load project file {project_path}\"\n            raise ImportError(msg)\n\n        project_module = importlib.util.module_from_spec(spec)\n        spec.loader.exec_module(project_module)\n\n        project_object = getattr(project_module, \"__project__\", None)\n\n        if project_object is None:\n            msg = (\n                \"Missing '__project__' field containing CSSFProject object.\\n\"\n                f\"From {project_path}.\"\n            )\n            raise ImportError(msg)\n\n        if not isinstance(project_object, cls):\n            msg = (\n                f\"Expected CSSFProject object in '__project__' field in {project_path}.\"\n            )\n            raise TypeError(\n                msg,\n            )\n\n        if not isinstance(project_object, cls):\n            msg = (\n                \"Incorrect object in '__project__' field, should contain \"\n                f\"CSSFProject object.\\nFrom {project_path}.\"\n            )\n\n        return project_object\n\n    def select_tasks(self, patterns: list[str] | None = None) -&gt; list[Task]:\n        \"\"\"Select all tasks matching list of patterns.\"\"\"\n        if patterns is None:\n            return list(self.tasks.values())\n\n        keys = set()\n\n        for pattern in patterns:\n            keys.update(fnmatch.filter(self.tasks.keys(), pattern))\n\n        return [self.tasks[k] for k in keys]\n\n    def to_python_project_template(self) -&gt; str:\n        \"\"\"Convert contents of this project into Python project file.\"\"\"\n        return (\n            get_cssfinder_jinja2_environment()\n            .get_template(\n                \"python_base_project.pyjinja2\",\n            )\n            .render(project=self)\n        )\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.CSSFProject.meta","title":"meta  <code>instance-attribute</code>","text":"<pre><code>meta: Meta\n</code></pre> <p>Project meta information like name and author.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.CSSFProject.tasks","title":"tasks  <code>instance-attribute</code>","text":"<pre><code>tasks: Dict[str, Task]\n</code></pre> <p>List of tasks within project which can be executed.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.CSSFProject.project_file","title":"project_file  <code>property</code>","text":"<pre><code>project_file: Path\n</code></pre> <p>Path to <code>cssfproject.json</code> file.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.CSSFProject.project_directory","title":"project_directory  <code>property</code>","text":"<pre><code>project_directory: Path\n</code></pre> <p>Path to directory containing <code>cssfproject.json</code> file.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.CSSFProject.project_output_directory","title":"project_output_directory  <code>property</code>","text":"<pre><code>project_output_directory: Path\n</code></pre> <p>Path to output directory for this project.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.CSSFProject.__init__","title":"__init__","text":"<pre><code>__init__(\n    meta: Meta,\n    tasks: list[Task] | dict[str, Task],\n    project_path: str | Path,\n    *_: Any,\n    **_k: Any\n) -&gt; None\n</code></pre> <p>Initialize instance.</p> <p>extra args and kwargs are ignored.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>def __init__(\n    self,\n    meta: Meta,\n    tasks: list[Task] | dict[str, Task],\n    project_path: str | Path,\n    *_: Any,\n    **_k: Any,\n) -&gt; None:\n    \"\"\"Initialize instance.\n\n    extra args and kwargs are ignored.\n\n    \"\"\"\n    super().__init__(meta=meta, tasks=tasks)\n\n    if not isinstance(project_path, Path):\n        project_path = Path(project_path)\n\n    self._project_path = project_path.expanduser().resolve()\n\n    if not self._project_path.exists():\n        raise FileNotFoundError(self._project_path)\n\n    self.bind()\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.CSSFProject.bind","title":"bind","text":"<pre><code>bind() -&gt; None\n</code></pre> <p>Bind fields to this CSSFProject object.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>def bind(self) -&gt; None:\n    \"\"\"Bind fields to this CSSFProject object.\"\"\"\n    self.meta.bind(self)\n\n    for task_name, task in self.tasks.items():\n        task.bind(self, task_name)\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.CSSFProject.load_project","title":"load_project  <code>classmethod</code>","text":"<pre><code>load_project(file_or_directory: str | Path) -&gt; Self\n</code></pre> <p>Load CSSFinder project in at least 1.0.0 version.</p> <p>Parameters:</p> Name Type Description Default <code>file_or_directory</code> <code>str | Path</code> <p>Either project file (cssfproject.json) or directory containing project file.</p> required <p>Returns:</p> Type Description <code>CSSFProject</code> <p>Project information container.</p> <p>Raises:</p> Type Description <code>InvalidCSSFProjectContent</code> <p>Raised when project file content is not a dictionary.</p> <code>MalformedProjectFileError</code> <p>When content of project file is not valid json.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>@classmethod\ndef load_project(cls, file_or_directory: str | Path) -&gt; Self:\n    \"\"\"Load CSSFinder project in at least 1.0.0 version.\n\n    Parameters\n    ----------\n    file_or_directory : str | Path\n        Either project file (cssfproject.json) or directory containing project file.\n\n    Returns\n    -------\n    CSSFProject\n        Project information container.\n\n    Raises\n    ------\n    InvalidCSSFProjectContent\n        Raised when project file content is not a dictionary.\n    MalformedProjectFileError\n        When content of project file is not valid json.\n\n    \"\"\"\n    # Unify path type to Path\n    file_or_directory = Path(file_or_directory).expanduser().resolve()\n\n    # When points to directory, dir must contain cssfproject.json file\n    project_path = project_file_path(file_or_directory)\n\n    if project_path.suffix == \".json\":\n        return cls._load_json_project(project_path)\n\n    if project_path.suffix == \".py\":\n        return cls._load_py_cssfproject(project_path)\n\n    msg = f\"Unknown project format {project_path.suffix} of project {project_path}\"\n    raise FileNotFoundError(msg)\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.CSSFProject.is_project_path","title":"is_project_path  <code>staticmethod</code>","text":"<pre><code>is_project_path(file_or_directory: Path) -&gt; bool\n</code></pre> <p>Check if path points to CSSFinder project file or project directory.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>@staticmethod\ndef is_project_path(file_or_directory: Path) -&gt; bool:\n    \"\"\"Check if path points to CSSFinder project file or project directory.\"\"\"\n    try:\n        project_file_path(file_or_directory)\n    except FileNotFoundError:\n        return False\n    else:\n        return True\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.CSSFProject.select_tasks","title":"select_tasks","text":"<pre><code>select_tasks(\n    patterns: list[str] | None = None,\n) -&gt; list[Task]\n</code></pre> <p>Select all tasks matching list of patterns.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>def select_tasks(self, patterns: list[str] | None = None) -&gt; list[Task]:\n    \"\"\"Select all tasks matching list of patterns.\"\"\"\n    if patterns is None:\n        return list(self.tasks.values())\n\n    keys = set()\n\n    for pattern in patterns:\n        keys.update(fnmatch.filter(self.tasks.keys(), pattern))\n\n    return [self.tasks[k] for k in keys]\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.CSSFProject.to_python_project_template","title":"to_python_project_template","text":"<pre><code>to_python_project_template() -&gt; str\n</code></pre> <p>Convert contents of this project into Python project file.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>def to_python_project_template(self) -&gt; str:\n    \"\"\"Convert contents of this project into Python project file.\"\"\"\n    return (\n        get_cssfinder_jinja2_environment()\n        .get_template(\n            \"python_base_project.pyjinja2\",\n        )\n        .render(project=self)\n    )\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.InvalidCSSFProjectContentError","title":"InvalidCSSFProjectContentError","text":"<p>             Bases: <code>ValueError</code></p> <p>Raised by load_from() when file content is not a dictionary.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>class InvalidCSSFProjectContentError(ValueError):\n    \"\"\"Raised by load_from() when file content is not a dictionary.\"\"\"\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.IncorrectFormatOfTaskFieldError","title":"IncorrectFormatOfTaskFieldError","text":"<p>             Bases: <code>ValueError</code></p> <p>Raised when \"tasks\" field contains incorrectly specified tasks.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>class IncorrectFormatOfTaskFieldError(ValueError):\n    \"\"\"Raised when \"tasks\" field contains incorrectly specified tasks.\"\"\"\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.MalformedProjectFileError","title":"MalformedProjectFileError","text":"<p>             Bases: <code>JSONDecodeError</code></p> <p>Rased when project file content can't be correctly decoded.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>class MalformedProjectFileError(json.decoder.JSONDecodeError):\n    \"\"\"Rased when project file content can't be correctly decoded.\"\"\"\n\n    def __str__(self) -&gt; str:\n        \"\"\"Convert exception to readable error explanation.\"\"\"\n        p = \" \" * 4\n        line_index = self.lineno\n\n        start_index = line_index - 10\n        if start_index &lt; 0:\n            start_index = 0\n\n        lines = self.doc.split(\"\\n\")[start_index:line_index]\n        lines_joined = f\"{p}\\n\" + \"\\n\".join(\n            f\"{start_index + i + 1:&gt;4}|{p}{line}\" for i, line in enumerate(lines)\n        )\n        ellipsis_line = f\"{start_index:&gt;4}|{p}...\" if start_index != 0 else \"\"\n\n        context_header = f\"\\n\\n{ellipsis_line}{lines_joined}\"\n        pointer_line = f\"{' ' * 4}{self.colno * ' '}~~~~^^^^^\"\n\n        msg = f\"{self.msg}: line {self.lineno} column {self.colno} (char {self.pos})\"\n        return f\"{context_header}\\n{pointer_line}\\n{p}{msg}.\\n\"\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.MalformedProjectFileError.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Convert exception to readable error explanation.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Convert exception to readable error explanation.\"\"\"\n    p = \" \" * 4\n    line_index = self.lineno\n\n    start_index = line_index - 10\n    if start_index &lt; 0:\n        start_index = 0\n\n    lines = self.doc.split(\"\\n\")[start_index:line_index]\n    lines_joined = f\"{p}\\n\" + \"\\n\".join(\n        f\"{start_index + i + 1:&gt;4}|{p}{line}\" for i, line in enumerate(lines)\n    )\n    ellipsis_line = f\"{start_index:&gt;4}|{p}...\" if start_index != 0 else \"\"\n\n    context_header = f\"\\n\\n{ellipsis_line}{lines_joined}\"\n    pointer_line = f\"{' ' * 4}{self.colno * ' '}~~~~^^^^^\"\n\n    msg = f\"{self.msg}: line {self.lineno} column {self.colno} (char {self.pos})\"\n    return f\"{context_header}\\n{pointer_line}\\n{p}{msg}.\\n\"\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.ProjectFileNotFoundError","title":"ProjectFileNotFoundError","text":"<p>             Bases: <code>FileNotFoundError</code></p> <p>Raised when project file can't be found in expected place.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>class ProjectFileNotFoundError(FileNotFoundError):\n    \"\"\"Raised when project file can't be found in expected place.\"\"\"\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.NotBoundToProjectError","title":"NotBoundToProjectError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when unbound object is used in context requiring it to be bound to CSSFProject instance.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>class NotBoundToProjectError(Exception):\n    \"\"\"Raised when unbound object is used in context requiring it to be bound to\n    CSSFProject instance.\n    \"\"\"\n\n    def __init__(self, ob: Any, context_msg: str) -&gt; None:\n        super().__init__(\n            f\"Attempted to use unbound object {ob} in context requiring it to be \"\n            f\"bound. ({context_msg})\",\n        )\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.Meta","title":"Meta","text":"<p>             Bases: <code>CommonBaseModel</code>, <code>_ProjectFieldMixin</code></p> <p>Project meta information.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>class Meta(CommonBaseModel, _ProjectFieldMixin):\n    \"\"\"Project meta information.\"\"\"\n\n    author: str\n    \"\"\"Author full name.\"\"\"\n\n    email: EmailStr\n    \"\"\"Author email address.\"\"\"\n\n    name: str\n    \"\"\"Name of the project.\"\"\"\n\n    description: str\n    \"\"\"Description of the project.\"\"\"\n\n    version: SemVerStr\n    \"\"\"Version of the project.\"\"\"\n\n    _project: Optional[CSSFProject] = None\n    \"\"\"Reference to project object.\"\"\"\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.Meta.author","title":"author  <code>instance-attribute</code>","text":"<pre><code>author: str\n</code></pre> <p>Author full name.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.Meta.email","title":"email  <code>instance-attribute</code>","text":"<pre><code>email: EmailStr\n</code></pre> <p>Author email address.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.Meta.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Name of the project.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.Meta.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre> <p>Description of the project.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.Meta.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: SemVerStr\n</code></pre> <p>Version of the project.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.SemVerStr","title":"SemVerStr","text":"<p>             Bases: <code>ConstrainedStr</code></p> <p>Semantic versioning string regex, see https://semver.org/.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>class SemVerStr(ConstrainedStr):\n    \"\"\"Semantic versioning string regex, see https://semver.org/.\"\"\"\n\n    regex = (\n        r\"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-]\"\n        r\"[0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+(\"\n        r\"[0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$\"\n    )\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.NotBoundToTaskError","title":"NotBoundToTaskError","text":"<p>             Bases: <code>NotBoundToProjectError</code></p> <p>Raised when unbound object is used in context requiring it to be bound to Task instance.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>class NotBoundToTaskError(NotBoundToProjectError):\n    \"\"\"Raised when unbound object is used in context requiring it to be bound to Task\n    instance.\n    \"\"\"\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.Task","title":"Task","text":"<p>             Bases: <code>CommonBaseModel</code>, <code>_TaskMixin</code></p> <p>Container representing CSSFinder task with some algorithm.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>class Task(CommonBaseModel, _TaskMixin):\n    \"\"\"Container representing CSSFinder task with some algorithm.\"\"\"\n\n    gilbert: Optional[GilbertCfg] = Field(default=None)\n    \"\"\"Configuration of gilbert algorithm.\"\"\"\n\n    _project: Optional[CSSFProject] = None\n    \"\"\"Reference to project object.\"\"\"\n\n    _task_name: Optional[str] = None\n    \"\"\"Name of task assigned to it in project.\"\"\"\n\n    def bind(self, project: CSSFProject, task_name: Optional[str] = None) -&gt; None:\n        \"\"\"Bind task to specific CSSFProject instance.\"\"\"\n        super().bind(project, task_name)\n        if self.gilbert is not None:\n            self.gilbert.bind(project, task_name, self)\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.Task.gilbert","title":"gilbert  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>gilbert: Optional[GilbertCfg] = Field(default=None)\n</code></pre> <p>Configuration of gilbert algorithm.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.Task.bind","title":"bind","text":"<pre><code>bind(\n    project: CSSFProject, task_name: Optional[str] = None\n) -&gt; None\n</code></pre> <p>Bind task to specific CSSFProject instance.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>def bind(self, project: CSSFProject, task_name: Optional[str] = None) -&gt; None:\n    \"\"\"Bind task to specific CSSFProject instance.\"\"\"\n    super().bind(project, task_name)\n    if self.gilbert is not None:\n        self.gilbert.bind(project, task_name, self)\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.GilbertCfg","title":"GilbertCfg","text":"<p>             Bases: <code>CommonBaseModel</code>, <code>_TaskFieldMixin</code></p> <p>Gilbert algorithm configuration container class.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>class GilbertCfg(CommonBaseModel, _TaskFieldMixin):\n    \"\"\"Gilbert algorithm configuration container class.\"\"\"\n\n    mode: AlgoMode\n    \"\"\"Algorithm mode to use.\"\"\"\n\n    backend: Optional[BackendCfg] = Field(default=None)\n    \"\"\"Configuration of backend which will be used for execution.\n\n    When backend configuration is not specified, numpy with double precision is used.\n\n    \"\"\"\n\n    state: Union[State, str]\n    \"\"\"Path to file containing initial state matrix.\"\"\"\n\n    runtime: RuntimeCfg\n    \"\"\"Configuration of runtime limits and parameters influencing algorithm run time.\"\"\"\n\n    resources: Optional[Resources] = Field(default=None)\n    \"\"\"Additional resources which may be used by algorithm.\"\"\"\n\n    _project: Optional[CSSFProject] = None\n    \"\"\"Reference to project object.\"\"\"\n\n    _task_name: Optional[str] = None\n    \"\"\"Name of task assigned to it in project.\"\"\"\n\n    _task: Optional[Task] = None\n    \"\"\"Reference to task object containing this object.\"\"\"\n\n    @validator(\"state\", always=True)\n    @classmethod\n    def _validate_state(cls, value: str | State) -&gt; State:\n        if not isinstance(value, State):\n            return State(file=value)\n\n        return value\n\n    def get_backend(self) -&gt; BackendCfg:\n        \"\"\"Return resources object.\"\"\"\n        if self.backend is None:\n            self.backend = BackendCfg(name=\"numpy\", precision=Precision.DOUBLE)\n        return self.backend\n\n    def get_resources(self) -&gt; Resources:\n        \"\"\"Return resources object.\"\"\"\n        if self.resources is None:\n            self.resources = Resources()\n        return self.resources\n\n    def bind(\n        self,\n        project: CSSFProject,\n        task_name: Optional[str] = None,\n        task: Optional[Task] = None,\n    ) -&gt; None:\n        \"\"\"Evaluate dynamic path expressions.\"\"\"\n        super().bind(project, task_name, task)\n        if not isinstance(self.state, State):\n            msg = \"State field must be of State type.\"\n            raise TypeError(msg)\n\n        self.state.bind(project, task_name, task)\n        self.get_resources().bind(project, task_name, task)\n\n    def get_state(self) -&gt; State:\n        \"\"\"Return initial state information.\"\"\"\n        if not isinstance(self.state, State):\n            msg = \"State field must be of State type.\"\n            raise TypeError(msg)\n        return self.state\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.GilbertCfg.mode","title":"mode  <code>instance-attribute</code>","text":"<pre><code>mode: AlgoMode\n</code></pre> <p>Algorithm mode to use.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.GilbertCfg.backend","title":"backend  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>backend: Optional[BackendCfg] = Field(default=None)\n</code></pre> <p>Configuration of backend which will be used for execution.</p> <p>When backend configuration is not specified, numpy with double precision is used.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.GilbertCfg.state","title":"state  <code>instance-attribute</code>","text":"<pre><code>state: Union[State, str]\n</code></pre> <p>Path to file containing initial state matrix.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.GilbertCfg.runtime","title":"runtime  <code>instance-attribute</code>","text":"<pre><code>runtime: RuntimeCfg\n</code></pre> <p>Configuration of runtime limits and parameters influencing algorithm run time.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.GilbertCfg.resources","title":"resources  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>resources: Optional[Resources] = Field(default=None)\n</code></pre> <p>Additional resources which may be used by algorithm.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.GilbertCfg.get_backend","title":"get_backend","text":"<pre><code>get_backend() -&gt; BackendCfg\n</code></pre> <p>Return resources object.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>def get_backend(self) -&gt; BackendCfg:\n    \"\"\"Return resources object.\"\"\"\n    if self.backend is None:\n        self.backend = BackendCfg(name=\"numpy\", precision=Precision.DOUBLE)\n    return self.backend\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.GilbertCfg.get_resources","title":"get_resources","text":"<pre><code>get_resources() -&gt; Resources\n</code></pre> <p>Return resources object.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>def get_resources(self) -&gt; Resources:\n    \"\"\"Return resources object.\"\"\"\n    if self.resources is None:\n        self.resources = Resources()\n    return self.resources\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.GilbertCfg.bind","title":"bind","text":"<pre><code>bind(\n    project: CSSFProject,\n    task_name: Optional[str] = None,\n    task: Optional[Task] = None,\n) -&gt; None\n</code></pre> <p>Evaluate dynamic path expressions.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>def bind(\n    self,\n    project: CSSFProject,\n    task_name: Optional[str] = None,\n    task: Optional[Task] = None,\n) -&gt; None:\n    \"\"\"Evaluate dynamic path expressions.\"\"\"\n    super().bind(project, task_name, task)\n    if not isinstance(self.state, State):\n        msg = \"State field must be of State type.\"\n        raise TypeError(msg)\n\n    self.state.bind(project, task_name, task)\n    self.get_resources().bind(project, task_name, task)\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.GilbertCfg.get_state","title":"get_state","text":"<pre><code>get_state() -&gt; State\n</code></pre> <p>Return initial state information.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>def get_state(self) -&gt; State:\n    \"\"\"Return initial state information.\"\"\"\n    if not isinstance(self.state, State):\n        msg = \"State field must be of State type.\"\n        raise TypeError(msg)\n    return self.state\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.AlgoMode","title":"AlgoMode","text":"<p>             Bases: <code>CaseInsensitiveEnum</code></p> <p>Mode of algorithm.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>class AlgoMode(CaseInsensitiveEnum):\n    \"\"\"Mode of algorithm.\"\"\"\n\n    # pylint: disable=invalid-name\n\n    FSnQd = \"FSnQd\"\n    \"\"\"Full separability of n-quDit state.\"\"\"\n\n    SBiPa = \"SBiPa\"\n    \"\"\"Separability of a bipartite state.\"\"\"\n\n    G3PaE3qD = \"G3PaE3qD\"\n    \"\"\"Genuine 3-partite entanglement of a 3-quDit state.\"\"\"\n\n    G4PaE3qD = \"G4PaE3qD\"\n    \"\"\"Genuine 4-partite entanglement of a 3-quDit state.\"\"\"\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.AlgoMode.FSnQd","title":"FSnQd  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FSnQd = 'FSnQd'\n</code></pre> <p>Full separability of n-quDit state.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.AlgoMode.SBiPa","title":"SBiPa  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SBiPa = 'SBiPa'\n</code></pre> <p>Separability of a bipartite state.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.AlgoMode.G3PaE3qD","title":"G3PaE3qD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>G3PaE3qD = 'G3PaE3qD'\n</code></pre> <p>Genuine 3-partite entanglement of a 3-quDit state.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.AlgoMode.G4PaE3qD","title":"G4PaE3qD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>G4PaE3qD = 'G4PaE3qD'\n</code></pre> <p>Genuine 4-partite entanglement of a 3-quDit state.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.BackendCfg","title":"BackendCfg","text":"<p>             Bases: <code>CommonBaseModel</code></p> <p>Container class grouping configuration of backend used by Gilbert algorithm.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>class BackendCfg(CommonBaseModel):\n    \"\"\"Container class grouping configuration of backend used by Gilbert algorithm.\"\"\"\n\n    name: str\n    \"\"\"Name of backend to use.\"\"\"\n\n    precision: Precision\n    \"\"\"Specify precision of calculations.\"\"\"\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.BackendCfg.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Name of backend to use.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.BackendCfg.precision","title":"precision  <code>instance-attribute</code>","text":"<pre><code>precision: Precision\n</code></pre> <p>Specify precision of calculations.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.Precision","title":"Precision","text":"<p>             Bases: <code>CaseInsensitiveEnum</code></p> <p>Precision of calculations performed.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>class Precision(CaseInsensitiveEnum):\n    \"\"\"Precision of calculations performed.\"\"\"\n\n    # pylint: disable=invalid-name\n\n    DOUBLE = \"double\"\n    \"\"\"64 bit floating point real part with 64 bit floating point complex value.\"\"\"\n\n    SINGLE = \"single\"\n    \"\"\"32 bit floating point real part with 32 bit floating point complex value.\"\"\"\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.Precision.DOUBLE","title":"DOUBLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DOUBLE = 'double'\n</code></pre> <p>64 bit floating point real part with 64 bit floating point complex value.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.Precision.SINGLE","title":"SINGLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SINGLE = 'single'\n</code></pre> <p>32 bit floating point real part with 32 bit floating point complex value.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.State","title":"State","text":"<p>             Bases: <code>CommonBaseModel</code>, <code>_TaskFieldMixin</code></p> <p>State configuration.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>class State(CommonBaseModel, _TaskFieldMixin):\n    \"\"\"State configuration.\"\"\"\n\n    file: str\n    \"\"\"Path to file containing state matrix.\"\"\"\n\n    depth: Optional[int] = Field(default=None)\n    \"\"\"Depth of system, ie.\n\n    number of dimensions in qu(D)it. (d)\n\n    \"\"\"\n\n    quantity: Optional[int] = Field(default=None)\n    \"\"\"Quantity of systems.\n\n    ie. number of qu(D)its in state. (n)\n\n    \"\"\"\n\n    _project: Optional[CSSFProject] = None\n    \"\"\"Reference to project object.\"\"\"\n\n    _task_name: Optional[str] = None\n    \"\"\"Name of task assigned to it in project.\"\"\"\n\n    _task: Optional[Task] = None\n    \"\"\"Reference to task object containing this object.\"\"\"\n\n    def bind(\n        self,\n        project: CSSFProject,\n        task_name: Optional[str] = None,\n        task: Optional[Task] = None,\n    ) -&gt; None:\n        \"\"\"Evaluate dynamic path expressions.\n\n        Path expands user (~) and is resolved only when correctly bound to project.\n\n        \"\"\"\n        super().bind(project, task_name, task)\n\n        if task_name is None or task is None:\n            return\n\n    def is_predefined_dimensions(self) -&gt; bool:\n        \"\"\"Return True when both dimensions are available.\"\"\"\n        return self.depth is not None and self.quantity is not None\n\n    def get_depth(self) -&gt; int:\n        \"\"\"Return system depth or raise NoDimensionsError if not specified in config.\"\"\"\n        if self.depth is None:\n            msg = \"Depth is not specified.\"\n            raise NoDimensionsError(msg)\n        return self.depth\n\n    def get_quantity(self) -&gt; int:\n        \"\"\"Return system quantity or raise NoDimensionsError if not specified in\n        config.\n        \"\"\"\n        if self.quantity is None:\n            msg = \"quantity is not specified.\"\n            raise NoDimensionsError(msg)\n        return self.quantity\n\n    @property\n    def expanded_file(self) -&gt; str:\n        \"\"\"Return expanded path to file.\"\"\"\n        if self._project is None:\n            raise NotBoundToProjectError(self, \"Access to 'expanded_file' property.\")\n        return (\n            Path(\n                self.file.format(\n                    project=self.project,\n                    task_name=self.task_name,\n                    task=self.task,\n                ),\n            )\n            .expanduser()\n            .resolve()\n            .as_posix()\n        )\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.State.file","title":"file  <code>instance-attribute</code>","text":"<pre><code>file: str\n</code></pre> <p>Path to file containing state matrix.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.State.depth","title":"depth  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>depth: Optional[int] = Field(default=None)\n</code></pre> <p>Depth of system, ie.</p> <p>number of dimensions in qu(D)it. (d)</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.State.quantity","title":"quantity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>quantity: Optional[int] = Field(default=None)\n</code></pre> <p>Quantity of systems.</p> <p>ie. number of qu(D)its in state. (n)</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.State.expanded_file","title":"expanded_file  <code>property</code>","text":"<pre><code>expanded_file: str\n</code></pre> <p>Return expanded path to file.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.State.bind","title":"bind","text":"<pre><code>bind(\n    project: CSSFProject,\n    task_name: Optional[str] = None,\n    task: Optional[Task] = None,\n) -&gt; None\n</code></pre> <p>Evaluate dynamic path expressions.</p> <p>Path expands user (~) and is resolved only when correctly bound to project.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>def bind(\n    self,\n    project: CSSFProject,\n    task_name: Optional[str] = None,\n    task: Optional[Task] = None,\n) -&gt; None:\n    \"\"\"Evaluate dynamic path expressions.\n\n    Path expands user (~) and is resolved only when correctly bound to project.\n\n    \"\"\"\n    super().bind(project, task_name, task)\n\n    if task_name is None or task is None:\n        return\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.State.is_predefined_dimensions","title":"is_predefined_dimensions","text":"<pre><code>is_predefined_dimensions() -&gt; bool\n</code></pre> <p>Return True when both dimensions are available.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>def is_predefined_dimensions(self) -&gt; bool:\n    \"\"\"Return True when both dimensions are available.\"\"\"\n    return self.depth is not None and self.quantity is not None\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.State.get_depth","title":"get_depth","text":"<pre><code>get_depth() -&gt; int\n</code></pre> <p>Return system depth or raise NoDimensionsError if not specified in config.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>def get_depth(self) -&gt; int:\n    \"\"\"Return system depth or raise NoDimensionsError if not specified in config.\"\"\"\n    if self.depth is None:\n        msg = \"Depth is not specified.\"\n        raise NoDimensionsError(msg)\n    return self.depth\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.State.get_quantity","title":"get_quantity","text":"<pre><code>get_quantity() -&gt; int\n</code></pre> <p>Return system quantity or raise NoDimensionsError if not specified in config.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>def get_quantity(self) -&gt; int:\n    \"\"\"Return system quantity or raise NoDimensionsError if not specified in\n    config.\n    \"\"\"\n    if self.quantity is None:\n        msg = \"quantity is not specified.\"\n        raise NoDimensionsError(msg)\n    return self.quantity\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.NoDimensionsError","title":"NoDimensionsError","text":"<p>             Bases: <code>ValueError</code></p> <p>Raised when system dimensions were requested but are not specified in config.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>class NoDimensionsError(ValueError):\n    \"\"\"Raised when system dimensions were requested but are not specified in config.\"\"\"\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.RuntimeCfg","title":"RuntimeCfg","text":"<p>             Bases: <code>CommonBaseModel</code></p> <p>Configuration of runtime limits and parameters influencing algorithm run time.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>class RuntimeCfg(CommonBaseModel):\n    \"\"\"Configuration of runtime limits and parameters influencing algorithm run time.\"\"\"\n\n    visibility: float = Field(ge=0.0, le=1.0)\n    \"\"\"Visibility against white noise.\n\n    Between 0 and 1.\n\n    \"\"\"\n\n    max_epochs: int = Field(ge=1, le=1_000_000_000)\n    \"\"\"Maximal number of algorithm epochs to perform.\n\n    If other interruption condition is met before the number of epochs, algorithm wont\n    execute the rest of epochs.\n\n    \"\"\"\n\n    iters_per_epoch: int = Field(ge=1, le=1_000_000_000)\n    \"\"\"Number of iterations per epochs.\n\n    Between iterations no checks are performed, which may speed up calculations. However\n    intermediate state of systems are not saved anywhere.\n\n    \"\"\"\n\n    max_corrections: int\n    \"\"\"Maximal number of corrections to collect.\n\n    Use -1 to disable this limit.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.RuntimeCfg.visibility","title":"visibility  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>visibility: float = Field(ge=0.0, le=1.0)\n</code></pre> <p>Visibility against white noise.</p> <p>Between 0 and 1.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.RuntimeCfg.max_epochs","title":"max_epochs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>max_epochs: int = Field(ge=1, le=1000000000)\n</code></pre> <p>Maximal number of algorithm epochs to perform.</p> <p>If other interruption condition is met before the number of epochs, algorithm wont execute the rest of epochs.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.RuntimeCfg.iters_per_epoch","title":"iters_per_epoch  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>iters_per_epoch: int = Field(ge=1, le=1000000000)\n</code></pre> <p>Number of iterations per epochs.</p> <p>Between iterations no checks are performed, which may speed up calculations. However intermediate state of systems are not saved anywhere.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.RuntimeCfg.max_corrections","title":"max_corrections  <code>instance-attribute</code>","text":"<pre><code>max_corrections: int\n</code></pre> <p>Maximal number of corrections to collect.</p> <p>Use -1 to disable this limit.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.Resources","title":"Resources","text":"<p>             Bases: <code>CommonBaseModel</code>, <code>_TaskFieldMixin</code></p> <p>Project resources.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>class Resources(CommonBaseModel, _TaskFieldMixin):\n    \"\"\"Project resources.\"\"\"\n\n    symmetries: Optional[List[List[str]]] = Field(default=None)\n    \"\"\"List of paths to files containing symmetry matrices.\"\"\"\n\n    projection: Optional[str] = Field(default=None)\n    \"\"\"Path to file containing projection matrix.\"\"\"\n\n    _project: Optional[CSSFProject] = None\n    \"\"\"Reference to project object.\"\"\"\n\n    _task_name: Optional[str] = None\n    \"\"\"Name of task assigned to it in project.\"\"\"\n\n    _task: Optional[Task] = None\n    \"\"\"Reference to task object containing this object.\"\"\"\n\n    def bind(\n        self,\n        project: CSSFProject,\n        task_name: Optional[str] = None,\n        task: Optional[Task] = None,\n    ) -&gt; None:\n        \"\"\"Evaluate dynamic path expressions.\n\n        Paths expands user (~) and are resolved only when correctly bound to project.\n\n        \"\"\"\n        super().bind(project, task_name, task)\n\n        if task_name is None or task is None:\n            return\n\n        if self.symmetries is not None:\n            self.symmetries = [\n                [\n                    Path(\n                        sym.format(\n                            project=project,\n                            task_name=task_name,\n                            task=task,\n                        ),\n                    )\n                    .expanduser()\n                    .resolve()\n                    .as_posix()\n                    for sym in row\n                ]\n                for row in self.symmetries\n            ]\n\n        if self.projection is not None:\n            self.projection = (\n                Path(\n                    self.projection.format(\n                        project=project,\n                        task_name=task_name,\n                        task=task,\n                    ),\n                )\n                .expanduser()\n                .resolve()\n                .as_posix()\n            )\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.Resources.symmetries","title":"symmetries  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>symmetries: Optional[List[List[str]]] = Field(default=None)\n</code></pre> <p>List of paths to files containing symmetry matrices.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.Resources.projection","title":"projection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>projection: Optional[str] = Field(default=None)\n</code></pre> <p>Path to file containing projection matrix.</p>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.Resources.bind","title":"bind","text":"<pre><code>bind(\n    project: CSSFProject,\n    task_name: Optional[str] = None,\n    task: Optional[Task] = None,\n) -&gt; None\n</code></pre> <p>Evaluate dynamic path expressions.</p> <p>Paths expands user (~) and are resolved only when correctly bound to project.</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>def bind(\n    self,\n    project: CSSFProject,\n    task_name: Optional[str] = None,\n    task: Optional[Task] = None,\n) -&gt; None:\n    \"\"\"Evaluate dynamic path expressions.\n\n    Paths expands user (~) and are resolved only when correctly bound to project.\n\n    \"\"\"\n    super().bind(project, task_name, task)\n\n    if task_name is None or task is None:\n        return\n\n    if self.symmetries is not None:\n        self.symmetries = [\n            [\n                Path(\n                    sym.format(\n                        project=project,\n                        task_name=task_name,\n                        task=task,\n                    ),\n                )\n                .expanduser()\n                .resolve()\n                .as_posix()\n                for sym in row\n            ]\n            for row in self.symmetries\n        ]\n\n    if self.projection is not None:\n        self.projection = (\n            Path(\n                self.projection.format(\n                    project=project,\n                    task_name=task_name,\n                    task=task,\n                ),\n            )\n            .expanduser()\n            .resolve()\n            .as_posix()\n        )\n</code></pre>"},{"location":"reference/cssfinder/cssfproject.html#cssfinder.cssfproject.project_file_path","title":"project_file_path","text":"<pre><code>project_file_path(directory_or_file: Path) -&gt; Path\n</code></pre> <p>Return path to project file (JSON/PY).</p> Source code in <code>cssfinder/cssfproject.py</code> <pre><code>def project_file_path(directory_or_file: Path) -&gt; Path:\n    \"\"\"Return path to project file (JSON/PY).\"\"\"\n    if directory_or_file.is_file():\n        return directory_or_file\n\n    json_file = directory_or_file / \"cssfproject.json\"\n\n    if directory_or_file.is_dir() and json_file.exists():\n        return json_file\n\n    py_file = directory_or_file / \"cssfproject.py\"\n\n    if directory_or_file.is_dir() and py_file.exists():\n        return py_file\n\n    raise FileNotFoundError(directory_or_file)\n</code></pre>"},{"location":"reference/cssfinder/enums.html","title":"enums","text":""},{"location":"reference/cssfinder/enums.html#cssfinder.enums","title":"enums","text":"<p>Module contains utility enums used within the cssfinder project.</p>"},{"location":"reference/cssfinder/enums.html#cssfinder.enums.CaseInsensitiveEnum","title":"CaseInsensitiveEnum","text":"<p>             Bases: <code>Enum</code></p> <p>Case insensitive enum base class.</p> Source code in <code>cssfinder/enums.py</code> <pre><code>class CaseInsensitiveEnum(Enum):\n    \"\"\"Case insensitive enum base class.\"\"\"\n\n    @classmethod\n    def _missing_(cls, value: object) -&gt; Self:\n        name = str(value)\n        for member in cls:\n            if member.name.casefold() == name.casefold():\n                return member\n\n        reason = f\"No enum value matches name {name!r}.\"\n        raise NoMatchingEnumValueError(reason)\n</code></pre>"},{"location":"reference/cssfinder/enums.html#cssfinder.enums.NoMatchingEnumValueError","title":"NoMatchingEnumValueError","text":"<p>             Bases: <code>AttributeError</code></p> <p>Raised when CaseInsensitiveEnum subclass can't find matching enum value.</p> Source code in <code>cssfinder/enums.py</code> <pre><code>class NoMatchingEnumValueError(AttributeError):\n    \"\"\"Raised when CaseInsensitiveEnum subclass can't find matching enum value.\"\"\"\n</code></pre>"},{"location":"reference/cssfinder/enums.html#cssfinder.enums.ExitCode","title":"ExitCode","text":"<p>Enumeration of standardized CSSFinder exit codes.</p> Source code in <code>cssfinder/enums.py</code> <pre><code>class ExitCode:\n    \"\"\"Enumeration of standardized CSSFinder exit codes.\"\"\"\n\n    BROKEN_EXAMPLE = 133\n\n    EXAMPLE_SHA_NOR_NAME_GIVEN = 134\n    EXAMPLE_WITH_NAME_NOT_FOUND = 135\n    EXAMPLE_WITH_SHA_NOT_FOUND = 136\n\n    EXAMPLE_DESTINATION_ALREADY_EXISTS = 137\n    PROJECT_NOT_FOUND = 138\n</code></pre>"},{"location":"reference/cssfinder/interactive.html","title":"interactive","text":""},{"location":"reference/cssfinder/interactive.html#cssfinder.interactive","title":"interactive","text":"<p>Collection of functions making up interactive interface of CSSFinder.</p>"},{"location":"reference/cssfinder/interactive.html#cssfinder.interactive.GilbertTaskSpec","title":"GilbertTaskSpec  <code>dataclass</code>","text":"<p>Specification of task.</p> Source code in <code>cssfinder/interactive.py</code> <pre><code>@dataclass\nclass GilbertTaskSpec:\n    \"\"\"Specification of task.\"\"\"\n\n    name: str\n    mode: str\n    backend_name: str\n    precision: str\n    state: Optional[str] = None\n    depth: Optional[str] = None\n    quantity: Optional[str] = None\n    visibility: Optional[str] = None\n    max_epochs: Optional[str] = None\n    iters_per_epoch: Optional[str] = None\n    max_corrections: Optional[str] = None\n    symmetries: Optional[str] = None\n    projection: Optional[str] = None\n    derive: Optional[str] = None\n\n    def to_task(self) -&gt; Task:\n        \"\"\"Create Task object with values from spec.\"\"\"\n        if self.state is None:\n            msg = \"Path to file containing state matrix must be specified.\"\n            raise ValueError(msg)\n\n        return Task(\n            gilbert=GilbertCfg(\n                mode=AlgoMode(self.mode),\n                backend=BackendCfg(\n                    name=self.backend_name,  # type: ignore[arg-type]\n                    precision=Precision(self.precision),\n                ),\n                state=State(\n                    file=self.state,  # type: ignore[arg-type]\n                    depth=self.depth,  # type: ignore[arg-type]\n                    quantity=self.quantity,  # type: ignore[arg-type]\n                ),\n                runtime=RuntimeCfg(\n                    visibility=self.visibility,  # type: ignore[arg-type]\n                    max_epochs=self.max_epochs,  # type: ignore[arg-type]\n                    iters_per_epoch=self.iters_per_epoch,  # type: ignore[arg-type]\n                    max_corrections=self.max_corrections,  # type: ignore[arg-type]\n                ),\n            ),\n        )\n</code></pre>"},{"location":"reference/cssfinder/interactive.html#cssfinder.interactive.GilbertTaskSpec.to_task","title":"to_task","text":"<pre><code>to_task() -&gt; Task\n</code></pre> <p>Create Task object with values from spec.</p> Source code in <code>cssfinder/interactive.py</code> <pre><code>def to_task(self) -&gt; Task:\n    \"\"\"Create Task object with values from spec.\"\"\"\n    if self.state is None:\n        msg = \"Path to file containing state matrix must be specified.\"\n        raise ValueError(msg)\n\n    return Task(\n        gilbert=GilbertCfg(\n            mode=AlgoMode(self.mode),\n            backend=BackendCfg(\n                name=self.backend_name,  # type: ignore[arg-type]\n                precision=Precision(self.precision),\n            ),\n            state=State(\n                file=self.state,  # type: ignore[arg-type]\n                depth=self.depth,  # type: ignore[arg-type]\n                quantity=self.quantity,  # type: ignore[arg-type]\n            ),\n            runtime=RuntimeCfg(\n                visibility=self.visibility,  # type: ignore[arg-type]\n                max_epochs=self.max_epochs,  # type: ignore[arg-type]\n                iters_per_epoch=self.iters_per_epoch,  # type: ignore[arg-type]\n                max_corrections=self.max_corrections,  # type: ignore[arg-type]\n            ),\n        ),\n    )\n</code></pre>"},{"location":"reference/cssfinder/interactive.html#cssfinder.interactive.InputField","title":"InputField","text":"<p>             Bases: <code>InputField</code></p> <p>Custom Input field which avoids styling value.</p> Source code in <code>cssfinder/interactive.py</code> <pre><code>class InputField(ptg.InputField):\n    \"\"\"Custom Input field which avoids styling value.\"\"\"\n\n    def _style_and_break_lines(self) -&gt; list[str]:\n        \"\"\"Styles and breaks self._lines.\"\"\"\n        document = (self.styles.prompt(self.prompt) + self.value).splitlines()\n\n        lines: list[str] = []\n        width = self.width\n        extend = lines.extend\n\n        for line in document:\n            extend(ptg.break_line(line.replace(\"\\n\", \"\\\\n\"), width, fill=\" \"))\n            extend(\"\")\n\n        return lines\n</code></pre>"},{"location":"reference/cssfinder/interactive.html#cssfinder.interactive.create_new_project","title":"create_new_project","text":"<pre><code>create_new_project(\n    default_author: Optional[str] = None,\n    default_email: Optional[str] = None,\n    default_name: Optional[str] = None,\n    default_description: Optional[str] = None,\n    default_version_string: Optional[str] = None,\n    *,\n    no_interactive: bool,\n    override_existing: bool\n) -&gt; CSSFProject\n</code></pre> <p>Create new project directory and cssfinder.json file.</p> Source code in <code>cssfinder/interactive.py</code> <pre><code>def create_new_project(\n    default_author: Optional[str] = None,\n    default_email: Optional[str] = None,\n    default_name: Optional[str] = None,\n    default_description: Optional[str] = None,\n    default_version_string: Optional[str] = None,\n    *,\n    no_interactive: bool,\n    override_existing: bool,\n) -&gt; CSSFProject:\n    \"\"\"Create new project directory and cssfinder.json file.\"\"\"\n    all_set = (\n        default_author is not None\n        and default_email is not None\n        and default_name is not None\n        and default_description is not None\n        and default_version_string is not None\n    )\n\n    author = default_author or _load_default_name_from_git()\n    email = default_email or _load_default_email_from_git()\n    name = default_name or \"new_project\"\n    description = default_description or \" \"\n    version_string = default_version_string or \"1.0.0\"\n\n    if all_set or no_interactive:\n        meta = Meta(\n            author=author,\n            email=EmailStr(email),\n            name=name,\n            description=description,\n            version=SemVerStr(version_string),\n        )\n    else:\n        meta = get_project_fields_with_pytermgui(\n            author,\n            email,\n            name,\n            description,\n            version_string,\n        )\n\n    project_file_path = Path.cwd() / meta.name / \"cssfproject.json\"\n    if (not override_existing) and project_file_path.exists():\n        if (\n            input(\"Project already exists, override? (y/n) \").casefold()\n            == \"Y\".casefold()\n        ):\n            project_file_path.unlink()\n        else:\n            print(\"Aborted.\")\n            raise SystemExit(1)\n\n    project_file_path.parent.mkdir(0o777, parents=True, exist_ok=True)\n    project_file_path.touch(0o777, exist_ok=True)\n\n    return CSSFProject(\n        meta=meta,\n        tasks=[],\n        project_path=project_file_path.as_posix(),\n    )\n</code></pre>"},{"location":"reference/cssfinder/interactive.html#cssfinder.interactive.get_project_fields_with_pytermgui","title":"get_project_fields_with_pytermgui","text":"<pre><code>get_project_fields_with_pytermgui(\n    default_author_name: str,\n    default_author_email: str,\n    default_project_name: str,\n    default_project_description: str,\n    default_project_version: str,\n) -&gt; Meta\n</code></pre> <p>Request user for meta values for project using TUI.</p> Source code in <code>cssfinder/interactive.py</code> <pre><code>def get_project_fields_with_pytermgui(\n    default_author_name: str,\n    default_author_email: str,\n    default_project_name: str,\n    default_project_description: str,\n    default_project_version: str,\n) -&gt; Meta:\n    \"\"\"Request user for meta values for project using TUI.\"\"\"\n    message = \"\"\n\n    while True:\n        (\n            default_author_name,\n            default_author_email,\n            default_project_name,\n            default_project_description,\n            default_project_version,\n        ) = _get_project_fields_with_pytermgui(\n            default_author_name,\n            default_author_email,\n            default_project_name,\n            default_project_description,\n            default_project_version,\n            message,\n        )\n\n        try:\n            return Meta(\n                author=default_author_name,\n                email=EmailStr(default_author_email),\n                name=default_project_name,\n                description=default_project_description,\n                version=SemVerStr(default_project_version),\n            )\n        except ValidationError as e:\n            message = f\"[210 bold]{e}\"\n</code></pre>"},{"location":"reference/cssfinder/interactive.html#cssfinder.interactive.add_task_gilbert","title":"add_task_gilbert","text":"<pre><code>add_task_gilbert(\n    project: CSSFProject,\n    spec: GilbertTaskSpec,\n    *,\n    no_interactive: bool,\n    override_existing: bool\n) -&gt; None\n</code></pre> <p>Add task to project and save it in place.</p> Source code in <code>cssfinder/interactive.py</code> <pre><code>def add_task_gilbert(\n    project: CSSFProject,\n    spec: GilbertTaskSpec,\n    *,\n    no_interactive: bool,\n    override_existing: bool,\n) -&gt; None:\n    \"\"\"Add task to project and save it in place.\"\"\"\n    while True:\n        try:\n            task = spec.to_task()\n            break\n\n        except (ValueError, TypeError, ValidationError, KeyError):\n            if no_interactive:\n                raise\n            spec = get_gilbert_task_fields_with_pytermgui(spec)\n\n    if (\n        override_existing is False\n        and spec.name in project.tasks\n        and (\n            input(\"Task already exists, override? (y/n) \").casefold() != \"Y\".casefold()\n        )\n    ):\n        print(\"Aborted.\")\n        raise SystemExit(1)\n\n    project.tasks[spec.name] = task\n    project.project_file.write_text(project.json(indent=4, ensure_ascii=False))\n</code></pre>"},{"location":"reference/cssfinder/interactive.html#cssfinder.interactive.get_gilbert_task_fields_with_pytermgui","title":"get_gilbert_task_fields_with_pytermgui","text":"<pre><code>get_gilbert_task_fields_with_pytermgui(\n    spec: GilbertTaskSpec, message: Optional[str] = None\n) -&gt; GilbertTaskSpec\n</code></pre> <p>Create temporary TUI prompt for entering task configuration.</p> Source code in <code>cssfinder/interactive.py</code> <pre><code>def get_gilbert_task_fields_with_pytermgui(\n    spec: GilbertTaskSpec,\n    message: Optional[str] = None,\n) -&gt; GilbertTaskSpec:\n    \"\"\"Create temporary TUI prompt for entering task configuration.\"\"\"\n    is_interrupted: bool = True\n    df_state = \"{project.project_directory}/state.mtx\"\n\n    with ptg.WindowManager() as manager:\n\n        def _cb(_widget: ptg.Button) -&gt; None:\n            nonlocal is_interrupted\n            is_interrupted = False\n            manager.stop()\n\n        manager.layout = ptg.Layout()\n        manager.layout.add_slot(\"body\", width=60)\n\n        # fmt: off\n        # ruff: noqa: E501\n        manager.add(\n            ptg.Window(\n                ptg.Container(\n                    \"[117 bold]New Task\",\n                    *(() if not message else (message,)),\n                    \"\",\n                    ptg.Container(\n                (field_name := InputField(spec.name, prompt=\"Task Name*: \")),\n                    ),\n                    \"\",\n                ptg.Label(\"[!gradient(33)]Backend\", parent_align=0),\n                    ptg.Container(\n                (field_backend_name := InputField(spec.backend_name, prompt=\"Backend Name: \")),\n                (field_precision := InputField(spec.precision, prompt=\"Precision: \")),\n                    ),\n                ptg.Label(\"[!gradient(63)]Initial System State\", parent_align=0),\n                    ptg.Container(\n                (field_state := InputField(spec.state or df_state or \"?\", prompt=\"State File Path*: \")),\n                (field_depth := InputField(spec.depth or \"None\", prompt=\"System Depth: \")),\n                (field_quantity := InputField(spec.quantity or \"None\", prompt=\"System Quantity: \")),\n                    ),\n                ptg.Label(\"[!gradient(63)]Execution Rules\", parent_align=0),\n                    ptg.Container(\n                (field_mode := InputField(spec.mode, prompt=\"Task Mode*: \")),\n                (field_visibility := InputField(spec.visibility or \"\", prompt=\"Visibility: \")),\n                (field_max_epochs := InputField(spec.max_epochs or \"\", prompt=\"Max Epochs: \")),\n                (field_iters_per_epoch := InputField(spec.iters_per_epoch or \"\", prompt=\"Iters Per Epoch: \")),\n                (field_max_corrections := InputField(spec.max_corrections or \"\", prompt=\"Max Corrections: \")),\n                    ),\n                ptg.Label(\"[!gradient(63)]Modifiers\", parent_align=0),\n                    ptg.Container(\n                (field_symmetries := InputField(spec.symmetries or \"None\", prompt=\"Symmetries: \")),\n                (field_projection := InputField(spec.projection or \"None\", prompt=\"Projection: \")),\n                    ),\n                    \"\",\n                    \"* - Field is required.\",\n                    ptg.Container(\n                        ptg.Button(\"Submit\", onclick=_cb),\n                        box=ptg.boxes.EMPTY_VERTICAL,\n                    ),\n                    box=ptg.boxes.DOUBLE,\n                ),\n                vertical_align=ptg.VerticalAlignment.TOP,\n                overflow=ptg.Overflow.SCROLL,\n                box=ptg.boxes.EMPTY,\n            )\n            .center(),\n            assign=\"body\",\n        )\n        # ruff: noqa: E501\n        # fmt: on\n\n    if is_interrupted:\n        raise KeyboardInterrupt\n\n    spec.name = field_name.value\n    spec.mode = field_mode.value\n    spec.backend_name = field_backend_name.value\n    spec.precision = field_precision.value\n\n    def to_none_if_literal(some: str) -&gt; Optional[str]:\n        if some.strip().casefold() in (\n            \"none\".casefold(),\n            \"null\".casefold(),\n        ):\n            return None\n        return some\n\n    spec.state = field_state.value\n    spec.depth = to_none_if_literal(field_depth.value)\n    spec.quantity = to_none_if_literal(field_quantity.value)\n\n    spec.visibility = field_visibility.value\n    spec.max_epochs = field_max_epochs.value\n    spec.iters_per_epoch = field_iters_per_epoch.value\n    spec.max_corrections = field_max_corrections.value\n\n    spec.symmetries = field_symmetries.value\n    spec.projection = field_projection.value\n\n    return spec\n</code></pre>"},{"location":"reference/cssfinder/jinja2_tools.html","title":"jinja2_tools","text":""},{"location":"reference/cssfinder/jinja2_tools.html#cssfinder.jinja2_tools","title":"jinja2_tools","text":"<p>Tools related to Jinja2 template engine.</p>"},{"location":"reference/cssfinder/jinja2_tools.html#cssfinder.jinja2_tools.get_cssfinder_jinja2_environment","title":"get_cssfinder_jinja2_environment","text":"<pre><code>get_cssfinder_jinja2_environment() -&gt; jinja2.Environment\n</code></pre> <p>Get Jinja2 environment with default settings.</p> Source code in <code>cssfinder/jinja2_tools.py</code> <pre><code>def get_cssfinder_jinja2_environment() -&gt; jinja2.Environment:\n    \"\"\"Get Jinja2 environment with default settings.\"\"\"\n    return jinja2.Environment(\n        loader=jinja2.PackageLoader(\"cssfinder\"),\n        autoescape=jinja2.select_autoescape(),\n    )\n</code></pre>"},{"location":"reference/cssfinder/log.html","title":"log","text":""},{"location":"reference/cssfinder/log.html#cssfinder.log","title":"log","text":"<p>Module configures the logger to log messages. It has a logger object that sends messages to different logging handlers (file and stream), a few classes for formatters.</p> Constants: <p>LOGGER: logging.Logger     The logger object for sending messages to logging handlers. VERBOSITY_MAP: dict     A dictionary mapping the verbosity level to the corresponding logging level. LOG_ENCODING: str     The encoding type of the log file.</p> Functions: <p>def configure_logger(     *,     verbosity: int,     logger_name: str,     use_rich: bool,     log_dir: Path | None = None,     auto_rollover_sec: int = 24 * 60 * 60,     max_log_files: int = 10, ) -&gt; None:     Configures the logger and creates logging handlers for file and stream. It takes the     following parameters:     *   verbosity (int): The verbosity level of the logging messages. Must be an integer         from 0 to 3. Default is 0.     *   logger_name (str): The name of the logger. Default is an empty string.     *   use_rich (bool): A flag to indicate whether to use the rich library to create a         colorful log. Default is False.     *   log_dir (Path | None): The path to the directory where log files will be         created. Default is the current working directory.     *   auto_rollover_sec (int): The time interval in seconds before rolling over the         log file. Default is 86400 seconds (24 hours).     *   max_log_files (int): The maximum number of log files to keep. Default is 10.</p> Classes: <p>MarkupStripFormatter(logging.Formatter)     A class to remove all formatting from the logging messages and return the plain     text.</p> <p>Functions:</p> Name Description <code>* format</code> <code>NoHighlightRichHandler</code> <p>A subclass of RichHandler to remove all rich formatting from the logging messages.</p>"},{"location":"reference/cssfinder/log.html#cssfinder.log.MarkupStripFormatter","title":"MarkupStripFormatter","text":"<p>             Bases: <code>Formatter</code></p> <p>A logging formatter that strips <code>rich</code> markup tags from log messages before they are emitted.</p> <p>Attributes:</p> Name Type Description <code>None</code> <p>Methods:</p> Name Description <code>format</code> <p>Return a formatted and stripped version of the log message.</p> Source code in <code>cssfinder/log.py</code> <pre><code>class MarkupStripFormatter(logging.Formatter):\n    \"\"\"A logging formatter that strips `rich` markup tags from log messages before they\n    are emitted.\n\n    Attributes\n    ----------\n    None\n\n    Methods\n    -------\n    format(record: logging.LogRecord) -&gt; str:\n        Return a formatted and stripped version of the log message.\n\n    \"\"\"\n\n    def format(self, record: LogRecord) -&gt; str:\n        \"\"\"Return the formatted string of a log record after stripping all formatting\n        tags.\n\n        _extended_summary_\n\n        Parameters\n        ----------\n        record : LogRecord\n            The log record to be formatted.\n\n        Returns\n        -------\n        str\n            The formatted string with all formatting tags removed.\n\n        \"\"\"\n        string = super().format(record)\n        # render strings with rich\n        seg_list = Text.from_markup(string).render(Console())\n        # but use only text part to get rid of all formatting\n        return \"\".join(seg.text for seg in seg_list)\n</code></pre>"},{"location":"reference/cssfinder/log.html#cssfinder.log.MarkupStripFormatter.format","title":"format","text":"<pre><code>format(record: LogRecord) -&gt; str\n</code></pre> <p>Return the formatted string of a log record after stripping all formatting tags.</p> <p>extended_summary</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>LogRecord</code> <p>The log record to be formatted.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The formatted string with all formatting tags removed.</p> Source code in <code>cssfinder/log.py</code> <pre><code>def format(self, record: LogRecord) -&gt; str:\n    \"\"\"Return the formatted string of a log record after stripping all formatting\n    tags.\n\n    _extended_summary_\n\n    Parameters\n    ----------\n    record : LogRecord\n        The log record to be formatted.\n\n    Returns\n    -------\n    str\n        The formatted string with all formatting tags removed.\n\n    \"\"\"\n    string = super().format(record)\n    # render strings with rich\n    seg_list = Text.from_markup(string).render(Console())\n    # but use only text part to get rid of all formatting\n    return \"\".join(seg.text for seg in seg_list)\n</code></pre>"},{"location":"reference/cssfinder/log.html#cssfinder.log.NoHighlightRichHandler","title":"NoHighlightRichHandler","text":"<p>             Bases: <code>RichHandler</code></p> <p>RichHandler subclass which permanently disables message highlighting (coloring of integers, strings, etc.).</p> Source code in <code>cssfinder/log.py</code> <pre><code>class NoHighlightRichHandler(RichHandler):\n    \"\"\"RichHandler subclass which permanently disables message highlighting (coloring of\n    integers, strings, etc.).\n    \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n        super().__init__(*args, **kwargs)\n        self.highlighter = None  # type: ignore[assignment]\n</code></pre>"},{"location":"reference/cssfinder/log.html#cssfinder.log.configure_logger","title":"configure_logger","text":"<pre><code>configure_logger(\n    *,\n    verbosity: int,\n    logger_name: str,\n    use_rich: bool,\n    log_dir: Path | None = None,\n    auto_rollover_sec: int = 24 * 60 * 60,\n    max_log_files: int = 10\n) -&gt; None\n</code></pre> <p>Configure a logger with a file handler and a console handler.</p> <p>Parameters:</p> Name Type Description Default <code>verbosity</code> <code>int</code> <p>The verbosity level for the console handler. The value should be between 0 and 3, with 0 being the least verbose and 3 being the most verbose.</p> required <code>logger_name</code> <code>str</code> <p>The name of the logger.</p> required <code>use_rich</code> <code>bool</code> <p>A flag indicating whether to use the rich console handler. If True, use the rich console handler; otherwise, use the standard console handler.</p> required <code>log_dir</code> <code>str or Path or None</code> <p>The path to the directory where log files should be stored. If None, store the log files in the current working directory. The default is None.</p> <code>None</code> <code>auto_rollover_sec</code> <code>int</code> <p>The number of seconds after which to rollover the log file. The default is 24 * 60 * 60.</p> <code>24 * 60 * 60</code> <code>max_log_files</code> <code>int</code> <p>The maximum number of log files to keep. The default is 10.</p> <code>10</code> <p>Returns:</p> Type Description <code>None</code> Source code in <code>cssfinder/log.py</code> <pre><code>def configure_logger(\n    *,\n    verbosity: int,\n    logger_name: str,\n    use_rich: bool,\n    log_dir: Path | None = None,\n    auto_rollover_sec: int = 24 * 60 * 60,\n    max_log_files: int = 10,\n) -&gt; None:\n    \"\"\"Configure a logger with a file handler and a console handler.\n\n    Parameters\n    ----------\n    verbosity : int\n        The verbosity level for the console handler. The value should be between 0 and\n        3, with 0 being the least verbose and 3 being the most verbose.\n    logger_name : str\n        The name of the logger.\n    use_rich : bool\n        A flag indicating whether to use the rich console handler. If True, use the rich\n        console handler; otherwise, use the standard console handler.\n    log_dir : str or Path or None, optional\n        The path to the directory where log files should be stored. If None, store the\n        log files in the current working directory. The default is None.\n    auto_rollover_sec : int, optional\n        The number of seconds after which to rollover the log file.\n        The default is 24 * 60 * 60.\n    max_log_files : int, optional\n        The maximum number of log files to keep. The default is 10.\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    # Clamp verbosity between 0 and 3.\n    verbosity = min(3, max(0, verbosity))\n\n    logger = logging.getLogger()\n    # global logger must have verbosity level set to DEBUG as we want out log files\n    # to contain all log messages, and using any higher level would discard debug\n    # messages before passing them to file handler.\n    global_verbosity = logging.DEBUG\n    logger.setLevel(global_verbosity)\n    logger.handlers.clear()\n\n    # Log file handler - fixed log level to DEBUG\n    file_handler = _create_file_handler(\n        logger_name,\n        log_dir or Path.cwd() / \"log\",\n        auto_rollover_sec,\n        max_log_files,\n    )\n    logger.addHandler(file_handler)\n\n    # Console logging handler - variable log level\n    stream_handler = _create_stream_handler(verbosity, use_rich=use_rich)\n    logger.addHandler(stream_handler)\n\n    matplotlib_logger = getLogger(\"matplotlib\")\n    matplotlib_logger.setLevel(logging.WARNING)\n\n    pandas_logger = getLogger(\"pandas\")\n    pandas_logger.setLevel(logging.WARNING)\n</code></pre>"},{"location":"reference/cssfinder/log.html#cssfinder.log.enable_performance_logging","title":"enable_performance_logging","text":"<pre><code>enable_performance_logging() -&gt; None\n</code></pre> <p>Enable run time measurement and logging for run_project() function.</p> Source code in <code>cssfinder/log.py</code> <pre><code>def enable_performance_logging() -&gt; None:\n    \"\"\"Enable run time measurement and logging for run_project() function.\"\"\"\n    import time\n\n    from cssfinder.api import run_project\n\n    def run_project_wrapper(\n        project: CSSFProject,\n        tasks: list[str] | None = None,\n        *,\n        is_debug: bool = False,\n        is_rich: bool = True,\n        force_sequential: bool = False,\n        max_parallel: int = -1,\n    ) -&gt; list[Task]:\n        start_time = time.perf_counter()\n        task_list = run_project(\n            project,\n            tasks,\n            is_debug=is_debug,\n            is_rich=is_rich,\n            force_sequential=force_sequential,\n            max_parallel=max_parallel,\n        )\n        end_time = time.perf_counter()\n        execution_time = end_time - start_time\n\n        perf_file = Path.cwd() / f\"perf_{project.meta.name}.json\"\n\n        with FileLock(perf_file.with_suffix(\".lock\").as_posix()):\n            if perf_file.exists():\n                raw_content = perf_file.read_text(encoding=\"utf-8\")\n                try:\n                    perf_index = json.loads(raw_content)\n                except json.JSONDecodeError:\n                    perf_index = {}\n            else:\n                perf_index = {}\n\n            key = str.join(\"|\", tasks) if tasks is not None else \"None\"\n            perf_results_list = perf_index.get(key, [])\n            perf_results_list.append(execution_time)\n            perf_index[key] = perf_results_list\n\n            serialized_perf_index = json.dumps(perf_index, indent=4)\n            perf_file.write_text(serialized_perf_index, encoding=\"utf-8\")\n\n        print(f\"Execution time: {execution_time:.6f} seconds\")\n        return task_list\n\n    patch(\"cssfinder.api.run_project\", new=run_project_wrapper).__enter__()\n</code></pre>"},{"location":"reference/cssfinder/algorithm/__init__.html","title":"init","text":""},{"location":"reference/cssfinder/algorithm/__init__.html#cssfinder.algorithm","title":"algorithm","text":"<p>Contains implementations of Gilbert algorithm.</p>"},{"location":"reference/cssfinder/algorithm/gilbert.html","title":"gilbert","text":""},{"location":"reference/cssfinder/algorithm/gilbert.html#cssfinder.algorithm.gilbert","title":"gilbert","text":"<p>Module contains public interface of Gilbert algorithm.</p>"},{"location":"reference/cssfinder/algorithm/gilbert.html#cssfinder.algorithm.gilbert.Gilbert","title":"Gilbert","text":"<p>Class interface of gilbert algorithm.</p> Source code in <code>cssfinder/algorithm/gilbert.py</code> <pre><code>class Gilbert:\n    \"\"\"Class interface of gilbert algorithm.\"\"\"\n\n    def __init__(  # noqa: PLR0913\n        self,\n        *,\n        initial: npt.NDArray[np.complex128],\n        depth: int,\n        quantity: int,\n        mode: AlgoMode,\n        backend: str,\n        precision: Precision,\n        visibility: float,\n        is_debug: bool = False,\n    ) -&gt; None:\n        self.initial = initial\n        self.depth = int(depth)\n        self.quantity = int(quantity)\n\n        self.mode = mode\n        self.precision = precision\n        self.visibility = visibility\n\n        self.is_debug = is_debug\n\n        backend_type = Loader().new().get_backend(backend, self.precision)\n        self.backend = backend_type(\n            self.initial,\n            self.depth,\n            self.quantity,\n            self.mode,\n            self.visibility,\n            is_debug=self.is_debug,\n        )\n\n    def set_symmetries(\n        self,\n        symmetries: list[list[npt.NDArray[np.complex128]]],\n    ) -&gt; None:\n        \"\"\"Set symmetries to use during calculations.\n\n        This operation may involve type conversion and copying of symmetries, therefore\n        if may be slow and should should be done only once.\n\n        Parameters\n        ----------\n        symmetries : list[list[npt.NDArray[np.complex128]]]\n            Array of symmetries.\n\n        \"\"\"\n        self.backend.set_symmetries(symmetries)\n\n    def set_projection(self, projection: npt.NDArray[np.complex128]) -&gt; None:\n        \"\"\"Set projection to use during calculations.\n\n        This operation may involve type conversion and copying of symmetries, therefore\n        if may be slow and should should be done only once.\n\n        Parameters\n        ----------\n        projection : npt.NDArray[np.complex128]\n            Projection matrix.\n\n        \"\"\"\n        self.backend.set_projection(projection)\n\n    def run(\n        self,\n        max_epochs: int,\n        iterations_per_epoch: int,\n        max_corrections: int,\n    ) -&gt; Iterable[int]:\n        \"\"\"Run a specified number of epochs with a given number of iterations per epoch\n        or until a certain amount of corrections is found.\n\n        Parameters\n        ----------\n        max_epochs : int\n            The number of epochs to run.\n        iterations_per_epoch : int\n            The number of iterations to run per epoch. Within epoch, no stop conditions\n            are checked, therefore number of corrections can exceed expected threshold.\n        max_corrections : int\n            The maximum number of corrections allowed.\n\n        Yields\n        ------\n        int\n            An iterator over the epoch indices, up to the point where the maximum\n            number of expected corrections is reached.\n\n        Notes\n        -----\n        This method runs a certain number of epochs with a given number of iterations\n        per epoch on a backend. It will yield the epoch index at each epoch iteration\n        while running, and will stop if and when the number of corrections found by the\n        backend exceeds the specified `max_corrections` or after performing number of\n        epochs specified with `max_epochs`.\n\n        \"\"\"\n        start = perf_counter()\n        total_iterations = max_epochs * iterations_per_epoch\n        epoch_index = 0\n\n        for epoch_index in range(max_epochs):\n            # Run N iterations of algorithm without checking stop conditions.\n            self.backend.run_epoch(iterations_per_epoch, epoch_index)\n\n            iterations_executed = (epoch_index + 1) * iterations_per_epoch\n            logging.debug(\n                \"Executed %r iterations, total %r / %r (%.2f%%)\",\n                iterations_per_epoch,\n                iterations_executed,\n                total_iterations,\n                (iterations_executed / total_iterations) * 100,\n            )\n            # Check if we already reached expected number of corrections\n            if self.backend.get_corrections_count() &gt;= max_corrections:\n                logging.info(\n                    \"Reached expected maximal number of corrections %r\",\n                    max_corrections,\n                )\n                break\n\n            yield epoch_index\n\n        end = perf_counter()\n        logging.info(\"Elapsed time: %r.\", end - start)\n\n        # Possibly trigger user defined code before ending execution.\n        yield epoch_index\n        return\n\n    def get_state(self) -&gt; npt.NDArray[np.complex128]:\n        \"\"\"Return current system state with all optimizations applied.\"\"\"\n        return self.backend.get_state()\n\n    def get_corrections(self) -&gt; list[tuple[int, int, float]]:\n        \"\"\"Return list of all corrections found during optimization.\"\"\"\n        return self.backend.get_corrections()\n\n    def get_corrections_count(self) -&gt; int:\n        \"\"\"Return number of all corrections found during optimization.\"\"\"\n        return self.backend.get_corrections_count()\n</code></pre>"},{"location":"reference/cssfinder/algorithm/gilbert.html#cssfinder.algorithm.gilbert.Gilbert.set_symmetries","title":"set_symmetries","text":"<pre><code>set_symmetries(\n    symmetries: list[list[npt.NDArray[np.complex128]]],\n) -&gt; None\n</code></pre> <p>Set symmetries to use during calculations.</p> <p>This operation may involve type conversion and copying of symmetries, therefore if may be slow and should should be done only once.</p> <p>Parameters:</p> Name Type Description Default <code>symmetries</code> <code>list[list[NDArray[complex128]]]</code> <p>Array of symmetries.</p> required Source code in <code>cssfinder/algorithm/gilbert.py</code> <pre><code>def set_symmetries(\n    self,\n    symmetries: list[list[npt.NDArray[np.complex128]]],\n) -&gt; None:\n    \"\"\"Set symmetries to use during calculations.\n\n    This operation may involve type conversion and copying of symmetries, therefore\n    if may be slow and should should be done only once.\n\n    Parameters\n    ----------\n    symmetries : list[list[npt.NDArray[np.complex128]]]\n        Array of symmetries.\n\n    \"\"\"\n    self.backend.set_symmetries(symmetries)\n</code></pre>"},{"location":"reference/cssfinder/algorithm/gilbert.html#cssfinder.algorithm.gilbert.Gilbert.set_projection","title":"set_projection","text":"<pre><code>set_projection(\n    projection: npt.NDArray[np.complex128],\n) -&gt; None\n</code></pre> <p>Set projection to use during calculations.</p> <p>This operation may involve type conversion and copying of symmetries, therefore if may be slow and should should be done only once.</p> <p>Parameters:</p> Name Type Description Default <code>projection</code> <code>NDArray[complex128]</code> <p>Projection matrix.</p> required Source code in <code>cssfinder/algorithm/gilbert.py</code> <pre><code>def set_projection(self, projection: npt.NDArray[np.complex128]) -&gt; None:\n    \"\"\"Set projection to use during calculations.\n\n    This operation may involve type conversion and copying of symmetries, therefore\n    if may be slow and should should be done only once.\n\n    Parameters\n    ----------\n    projection : npt.NDArray[np.complex128]\n        Projection matrix.\n\n    \"\"\"\n    self.backend.set_projection(projection)\n</code></pre>"},{"location":"reference/cssfinder/algorithm/gilbert.html#cssfinder.algorithm.gilbert.Gilbert.run","title":"run","text":"<pre><code>run(\n    max_epochs: int,\n    iterations_per_epoch: int,\n    max_corrections: int,\n) -&gt; Iterable[int]\n</code></pre> <p>Run a specified number of epochs with a given number of iterations per epoch or until a certain amount of corrections is found.</p> <p>Parameters:</p> Name Type Description Default <code>max_epochs</code> <code>int</code> <p>The number of epochs to run.</p> required <code>iterations_per_epoch</code> <code>int</code> <p>The number of iterations to run per epoch. Within epoch, no stop conditions are checked, therefore number of corrections can exceed expected threshold.</p> required <code>max_corrections</code> <code>int</code> <p>The maximum number of corrections allowed.</p> required <p>Yields:</p> Type Description <code>int</code> <p>An iterator over the epoch indices, up to the point where the maximum number of expected corrections is reached.</p> Notes <p>This method runs a certain number of epochs with a given number of iterations per epoch on a backend. It will yield the epoch index at each epoch iteration while running, and will stop if and when the number of corrections found by the backend exceeds the specified <code>max_corrections</code> or after performing number of epochs specified with <code>max_epochs</code>.</p> Source code in <code>cssfinder/algorithm/gilbert.py</code> <pre><code>def run(\n    self,\n    max_epochs: int,\n    iterations_per_epoch: int,\n    max_corrections: int,\n) -&gt; Iterable[int]:\n    \"\"\"Run a specified number of epochs with a given number of iterations per epoch\n    or until a certain amount of corrections is found.\n\n    Parameters\n    ----------\n    max_epochs : int\n        The number of epochs to run.\n    iterations_per_epoch : int\n        The number of iterations to run per epoch. Within epoch, no stop conditions\n        are checked, therefore number of corrections can exceed expected threshold.\n    max_corrections : int\n        The maximum number of corrections allowed.\n\n    Yields\n    ------\n    int\n        An iterator over the epoch indices, up to the point where the maximum\n        number of expected corrections is reached.\n\n    Notes\n    -----\n    This method runs a certain number of epochs with a given number of iterations\n    per epoch on a backend. It will yield the epoch index at each epoch iteration\n    while running, and will stop if and when the number of corrections found by the\n    backend exceeds the specified `max_corrections` or after performing number of\n    epochs specified with `max_epochs`.\n\n    \"\"\"\n    start = perf_counter()\n    total_iterations = max_epochs * iterations_per_epoch\n    epoch_index = 0\n\n    for epoch_index in range(max_epochs):\n        # Run N iterations of algorithm without checking stop conditions.\n        self.backend.run_epoch(iterations_per_epoch, epoch_index)\n\n        iterations_executed = (epoch_index + 1) * iterations_per_epoch\n        logging.debug(\n            \"Executed %r iterations, total %r / %r (%.2f%%)\",\n            iterations_per_epoch,\n            iterations_executed,\n            total_iterations,\n            (iterations_executed / total_iterations) * 100,\n        )\n        # Check if we already reached expected number of corrections\n        if self.backend.get_corrections_count() &gt;= max_corrections:\n            logging.info(\n                \"Reached expected maximal number of corrections %r\",\n                max_corrections,\n            )\n            break\n\n        yield epoch_index\n\n    end = perf_counter()\n    logging.info(\"Elapsed time: %r.\", end - start)\n\n    # Possibly trigger user defined code before ending execution.\n    yield epoch_index\n    return\n</code></pre>"},{"location":"reference/cssfinder/algorithm/gilbert.html#cssfinder.algorithm.gilbert.Gilbert.get_state","title":"get_state","text":"<pre><code>get_state() -&gt; npt.NDArray[np.complex128]\n</code></pre> <p>Return current system state with all optimizations applied.</p> Source code in <code>cssfinder/algorithm/gilbert.py</code> <pre><code>def get_state(self) -&gt; npt.NDArray[np.complex128]:\n    \"\"\"Return current system state with all optimizations applied.\"\"\"\n    return self.backend.get_state()\n</code></pre>"},{"location":"reference/cssfinder/algorithm/gilbert.html#cssfinder.algorithm.gilbert.Gilbert.get_corrections","title":"get_corrections","text":"<pre><code>get_corrections() -&gt; list[tuple[int, int, float]]\n</code></pre> <p>Return list of all corrections found during optimization.</p> Source code in <code>cssfinder/algorithm/gilbert.py</code> <pre><code>def get_corrections(self) -&gt; list[tuple[int, int, float]]:\n    \"\"\"Return list of all corrections found during optimization.\"\"\"\n    return self.backend.get_corrections()\n</code></pre>"},{"location":"reference/cssfinder/algorithm/gilbert.html#cssfinder.algorithm.gilbert.Gilbert.get_corrections_count","title":"get_corrections_count","text":"<pre><code>get_corrections_count() -&gt; int\n</code></pre> <p>Return number of all corrections found during optimization.</p> Source code in <code>cssfinder/algorithm/gilbert.py</code> <pre><code>def get_corrections_count(self) -&gt; int:\n    \"\"\"Return number of all corrections found during optimization.\"\"\"\n    return self.backend.get_corrections_count()\n</code></pre>"},{"location":"reference/cssfinder/algorithm/gilbert.html#cssfinder.algorithm.gilbert.AlgorithmError","title":"AlgorithmError","text":"<p>             Bases: <code>Exception</code></p> <p>Base for exceptions raised by gilbert algorithm.</p> Source code in <code>cssfinder/algorithm/gilbert.py</code> <pre><code>class AlgorithmError(Exception):\n    \"\"\"Base for exceptions raised by gilbert algorithm.\"\"\"\n</code></pre>"},{"location":"reference/cssfinder/algorithm/gilbert.html#cssfinder.algorithm.gilbert.AlgorithmNotSaturatedError","title":"AlgorithmNotSaturatedError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when action was performed on which required algorithm to finish execution on instance which was not run.</p> Source code in <code>cssfinder/algorithm/gilbert.py</code> <pre><code>class AlgorithmNotSaturatedError(Exception):\n    \"\"\"Raised when action was performed on which required algorithm to finish execution\n    on instance which was not run.\n    \"\"\"\n</code></pre>"},{"location":"reference/cssfinder/algorithm/gilbert.html#cssfinder.algorithm.gilbert.HookError","title":"HookError","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for hook error wrappers.</p> Source code in <code>cssfinder/algorithm/gilbert.py</code> <pre><code>class HookError(Exception):\n    \"\"\"Base class for hook error wrappers.\"\"\"\n</code></pre>"},{"location":"reference/cssfinder/algorithm/gilbert.html#cssfinder.algorithm.gilbert.SaveStateHookError","title":"SaveStateHookError","text":"<p>             Bases: <code>HookError</code></p> <p>Wrapper for exceptions raised by save_state_hook.</p> Source code in <code>cssfinder/algorithm/gilbert.py</code> <pre><code>class SaveStateHookError(HookError):\n    \"\"\"Wrapper for exceptions raised by save_state_hook.\"\"\"\n</code></pre>"},{"location":"reference/cssfinder/algorithm/gilbert.html#cssfinder.algorithm.gilbert.SaveCorrectionsHookError","title":"SaveCorrectionsHookError","text":"<p>             Bases: <code>HookError</code></p> <p>Wrapper for exceptions raised by save_state_hook.</p> Source code in <code>cssfinder/algorithm/gilbert.py</code> <pre><code>class SaveCorrectionsHookError(HookError):\n    \"\"\"Wrapper for exceptions raised by save_state_hook.\"\"\"\n</code></pre>"},{"location":"reference/cssfinder/algorithm/mode_util.html","title":"mode_util","text":""},{"location":"reference/cssfinder/algorithm/mode_util.html#cssfinder.algorithm.mode_util","title":"mode_util","text":"<p>Gilbert modes related tools.</p>"},{"location":"reference/cssfinder/algorithm/mode_util.html#cssfinder.algorithm.mode_util.Dimensions","title":"Dimensions  <code>dataclass</code>","text":"<p>Container for system dimensions.</p> Source code in <code>cssfinder/algorithm/mode_util.py</code> <pre><code>@dataclass\nclass Dimensions:\n    \"\"\"Container for system dimensions.\"\"\"\n\n    depth: int\n    \"\"\"Depth of system, ie.\n\n    number of dimensions in qu(D)it. (d)\n\n    \"\"\"\n\n    quantity: int\n    \"\"\"Quantity of systems.\n\n    ie. number of qu(D)its in state. (n)\n\n    \"\"\"\n</code></pre>"},{"location":"reference/cssfinder/algorithm/mode_util.html#cssfinder.algorithm.mode_util.Dimensions.depth","title":"depth  <code>instance-attribute</code>","text":"<pre><code>depth: int\n</code></pre> <p>Depth of system, ie.</p> <p>number of dimensions in qu(D)it. (d)</p>"},{"location":"reference/cssfinder/algorithm/mode_util.html#cssfinder.algorithm.mode_util.Dimensions.quantity","title":"quantity  <code>instance-attribute</code>","text":"<pre><code>quantity: int\n</code></pre> <p>Quantity of systems.</p> <p>ie. number of qu(D)its in state. (n)</p>"},{"location":"reference/cssfinder/algorithm/mode_util.html#cssfinder.algorithm.mode_util.ModeUtil","title":"ModeUtil","text":"<p>             Bases: <code>ABC</code></p> <p>Base class for implementing mode specific utilities eg.</p> <p>shape deduction.</p> Source code in <code>cssfinder/algorithm/mode_util.py</code> <pre><code>class ModeUtil(ABC):\n    \"\"\"Base class for implementing mode specific utilities eg.\n\n    shape deduction.\n\n    \"\"\"\n\n    @staticmethod\n    def new(mode: AlgoMode) -&gt; ModeUtil:\n        \"\"\"Create new ModeUtil subclass instance.\n\n        Parameters\n        ----------\n        mode : AlgoMode\n            Util set selector.\n\n        Returns\n        -------\n        ModeUtil\n            Instance of subclass of ModeUtil.\n\n        Raises\n        ------\n        NotImplementedError\n            For unsupported AlgoModes and incorrect input.\n\n        \"\"\"\n        if mode == AlgoMode.FSnQd:\n            return FSnQdUtil()\n\n        if mode == AlgoMode.SBiPa:\n            return SBiPaUtil()\n\n        if mode == AlgoMode.G3PaE3qD:\n            return G3PaE3qDUtil()\n\n        msg = f\"Unsupported mode {mode.name}\"\n        raise NotImplementedError(msg)\n\n    def get_dimensions(self, state: npt.NDArray[np.complex128]) -&gt; Dimensions:\n        \"\"\"Detect both system depth and system quantity.\n\n        Parameters\n        ----------\n        state : int\n            State matrix to detect dimensions for.\n\n        Returns\n        -------\n        Dimensions\n            System dimensions within dedicated container.\n\n        Raises\n        ------\n        ValueError\n            When depth and quantity can't be determined.\n\n        \"\"\"\n        dim = self.detect_depth_and_quantity(len(state))\n\n        logging.debug(\n            \"Deduced quantity %r and depth %r when given total size %r\",\n            dim.depth,\n            dim.quantity,\n            len(state),\n        )\n        return dim\n\n    @abstractmethod\n    def detect_depth_and_quantity(self, total: int) -&gt; Dimensions:\n        \"\"\"Detect both system depth and system quantity.\n\n        Parameters\n        ----------\n        total : int\n            Dimension along one of axes. Matrix is expected to be square.\n\n        Returns\n        -------\n        Dimensions\n            System dimensions within dedicated container.\n\n        Raises\n        ------\n        ValueError\n            When depth and quantity can't be determined.\n\n        \"\"\"\n</code></pre>"},{"location":"reference/cssfinder/algorithm/mode_util.html#cssfinder.algorithm.mode_util.ModeUtil.new","title":"new  <code>staticmethod</code>","text":"<pre><code>new(mode: AlgoMode) -&gt; ModeUtil\n</code></pre> <p>Create new ModeUtil subclass instance.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>AlgoMode</code> <p>Util set selector.</p> required <p>Returns:</p> Type Description <code>ModeUtil</code> <p>Instance of subclass of ModeUtil.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>For unsupported AlgoModes and incorrect input.</p> Source code in <code>cssfinder/algorithm/mode_util.py</code> <pre><code>@staticmethod\ndef new(mode: AlgoMode) -&gt; ModeUtil:\n    \"\"\"Create new ModeUtil subclass instance.\n\n    Parameters\n    ----------\n    mode : AlgoMode\n        Util set selector.\n\n    Returns\n    -------\n    ModeUtil\n        Instance of subclass of ModeUtil.\n\n    Raises\n    ------\n    NotImplementedError\n        For unsupported AlgoModes and incorrect input.\n\n    \"\"\"\n    if mode == AlgoMode.FSnQd:\n        return FSnQdUtil()\n\n    if mode == AlgoMode.SBiPa:\n        return SBiPaUtil()\n\n    if mode == AlgoMode.G3PaE3qD:\n        return G3PaE3qDUtil()\n\n    msg = f\"Unsupported mode {mode.name}\"\n    raise NotImplementedError(msg)\n</code></pre>"},{"location":"reference/cssfinder/algorithm/mode_util.html#cssfinder.algorithm.mode_util.ModeUtil.get_dimensions","title":"get_dimensions","text":"<pre><code>get_dimensions(\n    state: npt.NDArray[np.complex128],\n) -&gt; Dimensions\n</code></pre> <p>Detect both system depth and system quantity.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>int</code> <p>State matrix to detect dimensions for.</p> required <p>Returns:</p> Type Description <code>Dimensions</code> <p>System dimensions within dedicated container.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>When depth and quantity can't be determined.</p> Source code in <code>cssfinder/algorithm/mode_util.py</code> <pre><code>def get_dimensions(self, state: npt.NDArray[np.complex128]) -&gt; Dimensions:\n    \"\"\"Detect both system depth and system quantity.\n\n    Parameters\n    ----------\n    state : int\n        State matrix to detect dimensions for.\n\n    Returns\n    -------\n    Dimensions\n        System dimensions within dedicated container.\n\n    Raises\n    ------\n    ValueError\n        When depth and quantity can't be determined.\n\n    \"\"\"\n    dim = self.detect_depth_and_quantity(len(state))\n\n    logging.debug(\n        \"Deduced quantity %r and depth %r when given total size %r\",\n        dim.depth,\n        dim.quantity,\n        len(state),\n    )\n    return dim\n</code></pre>"},{"location":"reference/cssfinder/algorithm/mode_util.html#cssfinder.algorithm.mode_util.ModeUtil.detect_depth_and_quantity","title":"detect_depth_and_quantity  <code>abstractmethod</code>","text":"<pre><code>detect_depth_and_quantity(total: int) -&gt; Dimensions\n</code></pre> <p>Detect both system depth and system quantity.</p> <p>Parameters:</p> Name Type Description Default <code>total</code> <code>int</code> <p>Dimension along one of axes. Matrix is expected to be square.</p> required <p>Returns:</p> Type Description <code>Dimensions</code> <p>System dimensions within dedicated container.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>When depth and quantity can't be determined.</p> Source code in <code>cssfinder/algorithm/mode_util.py</code> <pre><code>@abstractmethod\ndef detect_depth_and_quantity(self, total: int) -&gt; Dimensions:\n    \"\"\"Detect both system depth and system quantity.\n\n    Parameters\n    ----------\n    total : int\n        Dimension along one of axes. Matrix is expected to be square.\n\n    Returns\n    -------\n    Dimensions\n        System dimensions within dedicated container.\n\n    Raises\n    ------\n    ValueError\n        When depth and quantity can't be determined.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/cssfinder/algorithm/mode_util.html#cssfinder.algorithm.mode_util.FSnQdUtil","title":"FSnQdUtil","text":"<p>             Bases: <code>ModeUtil</code></p> <p>FSnQd specific implementation of utilities eg.</p> <p>shape deduction.</p> Source code in <code>cssfinder/algorithm/mode_util.py</code> <pre><code>class FSnQdUtil(ModeUtil):\n    \"\"\"FSnQd specific implementation of utilities eg.\n\n    shape deduction.\n\n    \"\"\"\n\n    def detect_depth_and_quantity(self, total: int) -&gt; Dimensions:\n        \"\"\"Detect both system depth and system quantity.\n\n        Parameters\n        ----------\n        total : int\n            Dimension along one of axes. Matrix is expected to be square.\n\n        Returns\n        -------\n        Dimensions\n            System dimensions within dedicated container.\n\n        Raises\n        ------\n        ValueError\n            When depth and quantity can't be determined.\n\n        \"\"\"\n        for depth in PRIMES:\n            quantity = int(math.log(total, depth))\n\n            if quantity == int(quantity):\n                return Dimensions(depth, quantity)\n\n        reason = \"prime number range exceeded\"\n        raise UndefinedSystemSizeError(reason)\n</code></pre>"},{"location":"reference/cssfinder/algorithm/mode_util.html#cssfinder.algorithm.mode_util.FSnQdUtil.detect_depth_and_quantity","title":"detect_depth_and_quantity","text":"<pre><code>detect_depth_and_quantity(total: int) -&gt; Dimensions\n</code></pre> <p>Detect both system depth and system quantity.</p> <p>Parameters:</p> Name Type Description Default <code>total</code> <code>int</code> <p>Dimension along one of axes. Matrix is expected to be square.</p> required <p>Returns:</p> Type Description <code>Dimensions</code> <p>System dimensions within dedicated container.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>When depth and quantity can't be determined.</p> Source code in <code>cssfinder/algorithm/mode_util.py</code> <pre><code>def detect_depth_and_quantity(self, total: int) -&gt; Dimensions:\n    \"\"\"Detect both system depth and system quantity.\n\n    Parameters\n    ----------\n    total : int\n        Dimension along one of axes. Matrix is expected to be square.\n\n    Returns\n    -------\n    Dimensions\n        System dimensions within dedicated container.\n\n    Raises\n    ------\n    ValueError\n        When depth and quantity can't be determined.\n\n    \"\"\"\n    for depth in PRIMES:\n        quantity = int(math.log(total, depth))\n\n        if quantity == int(quantity):\n            return Dimensions(depth, quantity)\n\n    reason = \"prime number range exceeded\"\n    raise UndefinedSystemSizeError(reason)\n</code></pre>"},{"location":"reference/cssfinder/algorithm/mode_util.html#cssfinder.algorithm.mode_util.SBiPaUtil","title":"SBiPaUtil","text":"<p>             Bases: <code>ModeUtil</code></p> <p>SBiPa specific implementation of utilities eg.</p> <p>shape deduction.</p> Source code in <code>cssfinder/algorithm/mode_util.py</code> <pre><code>class SBiPaUtil(ModeUtil):\n    \"\"\"SBiPa specific implementation of utilities eg.\n\n    shape deduction.\n\n    \"\"\"\n\n    def detect_depth_and_quantity(self, total: int) -&gt; Dimensions:\n        \"\"\"Detect both system depth and system quantity.\n\n        Parameters\n        ----------\n        total : int\n            Dimension along one of axes. Matrix is expected to be square.\n\n        Returns\n        -------\n        Dimensions\n            System dimensions within dedicated container.\n\n        Raises\n        ------\n        ValueError\n            When depth and quantity can't be determined.\n\n        \"\"\"\n        total_sqrt = math.sqrt(total)\n        floored_total_sqrt = int(total_sqrt)\n\n        if total_sqrt == floored_total_sqrt:\n            return Dimensions(floored_total_sqrt, floored_total_sqrt)\n\n        for depth in PRIMES:\n            if total % depth == 0:\n                quantity = int(total / depth)\n                return Dimensions(depth, quantity)\n\n        reason = \"prime number range exceeded\"\n        raise UndefinedSystemSizeError(reason)\n</code></pre>"},{"location":"reference/cssfinder/algorithm/mode_util.html#cssfinder.algorithm.mode_util.SBiPaUtil.detect_depth_and_quantity","title":"detect_depth_and_quantity","text":"<pre><code>detect_depth_and_quantity(total: int) -&gt; Dimensions\n</code></pre> <p>Detect both system depth and system quantity.</p> <p>Parameters:</p> Name Type Description Default <code>total</code> <code>int</code> <p>Dimension along one of axes. Matrix is expected to be square.</p> required <p>Returns:</p> Type Description <code>Dimensions</code> <p>System dimensions within dedicated container.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>When depth and quantity can't be determined.</p> Source code in <code>cssfinder/algorithm/mode_util.py</code> <pre><code>def detect_depth_and_quantity(self, total: int) -&gt; Dimensions:\n    \"\"\"Detect both system depth and system quantity.\n\n    Parameters\n    ----------\n    total : int\n        Dimension along one of axes. Matrix is expected to be square.\n\n    Returns\n    -------\n    Dimensions\n        System dimensions within dedicated container.\n\n    Raises\n    ------\n    ValueError\n        When depth and quantity can't be determined.\n\n    \"\"\"\n    total_sqrt = math.sqrt(total)\n    floored_total_sqrt = int(total_sqrt)\n\n    if total_sqrt == floored_total_sqrt:\n        return Dimensions(floored_total_sqrt, floored_total_sqrt)\n\n    for depth in PRIMES:\n        if total % depth == 0:\n            quantity = int(total / depth)\n            return Dimensions(depth, quantity)\n\n    reason = \"prime number range exceeded\"\n    raise UndefinedSystemSizeError(reason)\n</code></pre>"},{"location":"reference/cssfinder/algorithm/mode_util.html#cssfinder.algorithm.mode_util.UndefinedSystemSizeError","title":"UndefinedSystemSizeError","text":"<p>             Bases: <code>ValueError</code></p> <p>Raised when it is not possible to determine system dimensions.</p> Source code in <code>cssfinder/algorithm/mode_util.py</code> <pre><code>class UndefinedSystemSizeError(ValueError):\n    \"\"\"Raised when it is not possible to determine system dimensions.\"\"\"\n\n    def __init__(self, reason: str) -&gt; None:\n        super().__init__(f\"Couldn't determine size of system: {reason}.\")\n</code></pre>"},{"location":"reference/cssfinder/algorithm/mode_util.html#cssfinder.algorithm.mode_util.G3PaE3qDUtil","title":"G3PaE3qDUtil","text":"<p>             Bases: <code>ModeUtil</code></p> <p>G3PaE3q specific implementation of utilities eg.</p> <p>shape deduction.</p> Source code in <code>cssfinder/algorithm/mode_util.py</code> <pre><code>class G3PaE3qDUtil(ModeUtil):\n    \"\"\"G3PaE3q specific implementation of utilities eg.\n\n    shape deduction.\n\n    \"\"\"\n\n    def detect_depth_and_quantity(self, total: int) -&gt; Dimensions:\n        \"\"\"Detect both system depth and system quantity.\n\n        Parameters\n        ----------\n        total : int\n            Dimension along one of axes. Matrix is expected to be square.\n\n        Returns\n        -------\n        Dimensions\n            System dimensions within dedicated container.\n\n        Raises\n        ------\n        ValueError\n            When depth and quantity can't be determined.\n\n        \"\"\"\n        if round(total ** (1.0 / 3), 3) == round(total ** (1.0 / 3), 0):\n            return Dimensions(depth=int(total ** (1.0 / 3)), quantity=3)\n\n        reason = \"prime number range exceeded\"\n        raise UndefinedSystemSizeError(reason)\n</code></pre>"},{"location":"reference/cssfinder/algorithm/mode_util.html#cssfinder.algorithm.mode_util.G3PaE3qDUtil.detect_depth_and_quantity","title":"detect_depth_and_quantity","text":"<pre><code>detect_depth_and_quantity(total: int) -&gt; Dimensions\n</code></pre> <p>Detect both system depth and system quantity.</p> <p>Parameters:</p> Name Type Description Default <code>total</code> <code>int</code> <p>Dimension along one of axes. Matrix is expected to be square.</p> required <p>Returns:</p> Type Description <code>Dimensions</code> <p>System dimensions within dedicated container.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>When depth and quantity can't be determined.</p> Source code in <code>cssfinder/algorithm/mode_util.py</code> <pre><code>def detect_depth_and_quantity(self, total: int) -&gt; Dimensions:\n    \"\"\"Detect both system depth and system quantity.\n\n    Parameters\n    ----------\n    total : int\n        Dimension along one of axes. Matrix is expected to be square.\n\n    Returns\n    -------\n    Dimensions\n        System dimensions within dedicated container.\n\n    Raises\n    ------\n    ValueError\n        When depth and quantity can't be determined.\n\n    \"\"\"\n    if round(total ** (1.0 / 3), 3) == round(total ** (1.0 / 3), 0):\n        return Dimensions(depth=int(total ** (1.0 / 3)), quantity=3)\n\n    reason = \"prime number range exceeded\"\n    raise UndefinedSystemSizeError(reason)\n</code></pre>"},{"location":"reference/cssfinder/algorithm/backend/__init__.html","title":"init","text":""},{"location":"reference/cssfinder/algorithm/backend/__init__.html#cssfinder.algorithm.backend","title":"backend","text":"<p>Backend is an implementation of Gilbert algorithm implemented with specific tools and supporting various precisions of operation.</p>"},{"location":"reference/cssfinder/algorithm/backend/base.html","title":"base","text":""},{"location":"reference/cssfinder/algorithm/backend/base.html#cssfinder.algorithm.backend.base","title":"base","text":"<p>Module contains base class for creating Gilbert algorithm backends (concrete implementations) and exceptions which are expected to be raised from backends.</p>"},{"location":"reference/cssfinder/algorithm/backend/base.html#cssfinder.algorithm.backend.base.BackendBase","title":"BackendBase","text":"<p>Gilbert algorithm backend (implementation).</p> Source code in <code>cssfinder/algorithm/backend/base.py</code> <pre><code>class BackendBase:\n    \"\"\"Gilbert algorithm backend (implementation).\"\"\"\n\n    author: ClassVar[str] = \"\"\n    description: ClassVar[str] = \"\"\n\n    def __init__(\n        self,\n        initial: npt.NDArray[np.complex128],\n        depth: int,\n        quantity: int,\n        mode: AlgoMode,\n        visibility: float,\n        *,\n        is_debug: bool = False,\n    ) -&gt; None:\n        self.depth = depth\n        self.quantity = quantity\n        self.initial = initial\n        self.visibility = visibility\n        self.mode = mode\n        self.is_debug = is_debug\n\n    def set_symmetries(\n        self,\n        symmetries: list[list[npt.NDArray[np.complex128]]],\n    ) -&gt; None:\n        \"\"\"Set symmetries to use during calculations.\n\n        This operation may involve type conversion and copying of symmetries, therefore\n        if may be slow and should should be done only once.\n\n        Parameters\n        ----------\n        symmetries : list[list[npt.NDArray[np.complex128]]]\n            Array of symmetries.\n\n        \"\"\"\n        raise NotImplementedError(self.set_symmetries.__qualname__)\n\n    def set_projection(self, projection: npt.NDArray[np.complex128]) -&gt; None:\n        \"\"\"Set projection to use during calculations.\n\n        This operation may involve type conversion and copying of symmetries, therefore\n        if may be slow and should should be done only once.\n\n        Parameters\n        ----------\n        projection : npt.NDArray[np.complex128]\n            Projection matrix.\n\n        \"\"\"\n        raise NotImplementedError(self.set_projection.__qualname__)\n\n    def get_state(self) -&gt; npt.NDArray[np.complex128]:\n        \"\"\"Return current system state with all optimizations applied.\"\"\"\n        raise NotImplementedError(self.get_state.__qualname__)\n\n    def get_corrections(self) -&gt; list[tuple[int, int, float]]:\n        \"\"\"Return list of all corrections found during optimization.\"\"\"\n        raise NotImplementedError(self.get_corrections.__qualname__)\n\n    def get_corrections_count(self) -&gt; int:\n        \"\"\"Return number of all corrections found during optimization.\"\"\"\n        raise NotImplementedError(self.get_corrections_count.__qualname__)\n\n    def run_epoch(self, iterations: int, epoch_index: int) -&gt; None:\n        \"\"\"Run sequence of iterations without stopping to check any stop conditions.\"\"\"\n        raise NotImplementedError(self.run_epoch.__qualname__)\n</code></pre>"},{"location":"reference/cssfinder/algorithm/backend/base.html#cssfinder.algorithm.backend.base.BackendBase.set_symmetries","title":"set_symmetries","text":"<pre><code>set_symmetries(\n    symmetries: list[list[npt.NDArray[np.complex128]]],\n) -&gt; None\n</code></pre> <p>Set symmetries to use during calculations.</p> <p>This operation may involve type conversion and copying of symmetries, therefore if may be slow and should should be done only once.</p> <p>Parameters:</p> Name Type Description Default <code>symmetries</code> <code>list[list[NDArray[complex128]]]</code> <p>Array of symmetries.</p> required Source code in <code>cssfinder/algorithm/backend/base.py</code> <pre><code>def set_symmetries(\n    self,\n    symmetries: list[list[npt.NDArray[np.complex128]]],\n) -&gt; None:\n    \"\"\"Set symmetries to use during calculations.\n\n    This operation may involve type conversion and copying of symmetries, therefore\n    if may be slow and should should be done only once.\n\n    Parameters\n    ----------\n    symmetries : list[list[npt.NDArray[np.complex128]]]\n        Array of symmetries.\n\n    \"\"\"\n    raise NotImplementedError(self.set_symmetries.__qualname__)\n</code></pre>"},{"location":"reference/cssfinder/algorithm/backend/base.html#cssfinder.algorithm.backend.base.BackendBase.set_projection","title":"set_projection","text":"<pre><code>set_projection(\n    projection: npt.NDArray[np.complex128],\n) -&gt; None\n</code></pre> <p>Set projection to use during calculations.</p> <p>This operation may involve type conversion and copying of symmetries, therefore if may be slow and should should be done only once.</p> <p>Parameters:</p> Name Type Description Default <code>projection</code> <code>NDArray[complex128]</code> <p>Projection matrix.</p> required Source code in <code>cssfinder/algorithm/backend/base.py</code> <pre><code>def set_projection(self, projection: npt.NDArray[np.complex128]) -&gt; None:\n    \"\"\"Set projection to use during calculations.\n\n    This operation may involve type conversion and copying of symmetries, therefore\n    if may be slow and should should be done only once.\n\n    Parameters\n    ----------\n    projection : npt.NDArray[np.complex128]\n        Projection matrix.\n\n    \"\"\"\n    raise NotImplementedError(self.set_projection.__qualname__)\n</code></pre>"},{"location":"reference/cssfinder/algorithm/backend/base.html#cssfinder.algorithm.backend.base.BackendBase.get_state","title":"get_state","text":"<pre><code>get_state() -&gt; npt.NDArray[np.complex128]\n</code></pre> <p>Return current system state with all optimizations applied.</p> Source code in <code>cssfinder/algorithm/backend/base.py</code> <pre><code>def get_state(self) -&gt; npt.NDArray[np.complex128]:\n    \"\"\"Return current system state with all optimizations applied.\"\"\"\n    raise NotImplementedError(self.get_state.__qualname__)\n</code></pre>"},{"location":"reference/cssfinder/algorithm/backend/base.html#cssfinder.algorithm.backend.base.BackendBase.get_corrections","title":"get_corrections","text":"<pre><code>get_corrections() -&gt; list[tuple[int, int, float]]\n</code></pre> <p>Return list of all corrections found during optimization.</p> Source code in <code>cssfinder/algorithm/backend/base.py</code> <pre><code>def get_corrections(self) -&gt; list[tuple[int, int, float]]:\n    \"\"\"Return list of all corrections found during optimization.\"\"\"\n    raise NotImplementedError(self.get_corrections.__qualname__)\n</code></pre>"},{"location":"reference/cssfinder/algorithm/backend/base.html#cssfinder.algorithm.backend.base.BackendBase.get_corrections_count","title":"get_corrections_count","text":"<pre><code>get_corrections_count() -&gt; int\n</code></pre> <p>Return number of all corrections found during optimization.</p> Source code in <code>cssfinder/algorithm/backend/base.py</code> <pre><code>def get_corrections_count(self) -&gt; int:\n    \"\"\"Return number of all corrections found during optimization.\"\"\"\n    raise NotImplementedError(self.get_corrections_count.__qualname__)\n</code></pre>"},{"location":"reference/cssfinder/algorithm/backend/base.html#cssfinder.algorithm.backend.base.BackendBase.run_epoch","title":"run_epoch","text":"<pre><code>run_epoch(iterations: int, epoch_index: int) -&gt; None\n</code></pre> <p>Run sequence of iterations without stopping to check any stop conditions.</p> Source code in <code>cssfinder/algorithm/backend/base.py</code> <pre><code>def run_epoch(self, iterations: int, epoch_index: int) -&gt; None:\n    \"\"\"Run sequence of iterations without stopping to check any stop conditions.\"\"\"\n    raise NotImplementedError(self.run_epoch.__qualname__)\n</code></pre>"},{"location":"reference/cssfinder/algorithm/backend/loader.html","title":"loader","text":""},{"location":"reference/cssfinder/algorithm/backend/loader.html#cssfinder.algorithm.backend.loader","title":"loader","text":"<p>Implementation of Gilbert algorithm backend loader.</p>"},{"location":"reference/cssfinder/algorithm/backend/loader.html#cssfinder.algorithm.backend.loader.Loader","title":"Loader","text":"<p>Backend loader class.</p> Source code in <code>cssfinder/algorithm/backend/loader.py</code> <pre><code>class Loader:\n    \"\"\"Backend loader class.\"\"\"\n\n    BACKEND_NAME_REGEX: ClassVar[re.Pattern] = re.compile(\n        r\"cssfinder(_|-)backend(_|-)[a-z0-9_\\-]+\",\n        re.IGNORECASE,\n    )\n\n    def __init__(self) -&gt; None:\n        self.reload()\n\n    def reload(self) -&gt; None:\n        \"\"\"Load all backends available in python environment.\n\n        This is automatically called by constructor to load all backends. You can use it\n        to refresh list of loaded backends.\n\n        \"\"\"\n        self.backends: dict[tuple[str, Precision], Type[BackendBase]] = {}\n\n        for dist in importlib.import_module(\"pkg_resources\").working_set:\n            if self.BACKEND_NAME_REGEX.match(dist.project_name) is None:\n                continue\n\n            module_name = dist.project_name.replace(\"-\", \"_\")\n\n            module = importlib.import_module(module_name)\n            module_meta = metadata.metadata(module_name)\n\n            export_backend = getattr(module, \"export_backend\", None)\n\n            if export_backend is None:\n                continue\n\n            backends = export_backend()\n\n            if not isinstance(backends, dict):\n                logging.critical(\n                    \"Backend %r unsupported export format %r, expected &lt;class 'dict'&gt;.\",\n                    module_name,\n                    type(backends),\n                )\n                continue\n\n            self._extend_backend_index(module_name, module_meta, backends)\n\n    def _extend_backend_index(\n        self,\n        module_name: str,\n        module_meta: metadata.PackageMetadata,  # type: ignore[name-defined]\n        backends: Any,\n    ) -&gt; None:\n        for key, value in backends.items():\n            if not isinstance(key, tuple) or len(key) != LEN_KEY_TUPLE:\n                logging.critical(\n                    \"Backend %r -&gt; %r unsupported key format, expected key to be \"\n                    \"tuple[str, Precision], got %r.\",\n                    module_name,\n                    value,\n                    key,\n                )\n                continue\n\n            name, precision = key\n\n            if not isinstance(name, str):\n                logging.critical(\n                    \"Backend %r -&gt; %r unsupported key format, expected key to be \"\n                    \"tuple[str, Precision], got %r.\",\n                    module_name,\n                    value,\n                    key,\n                )\n                continue\n\n            if not isinstance(precision, Precision):\n                logging.critical(\n                    \"Backend %r -&gt; %r unsupported key format, expected key to be \"\n                    \"tuple[str, Precision], got %r.\",\n                    module_name,\n                    value,\n                    key,\n                )\n                continue\n\n            if len(getattr(value, \"author\", \"\")) == 0:\n                value.author = module_meta[\"Author\"]\n\n            self.backends[(name.casefold(), precision)] = value\n\n    @classmethod\n    @lru_cache(maxsize=1)\n    def new(cls) -&gt; Self:\n        \"\"\"Get instance of Loader.\"\"\"\n        return cls()\n\n    def get_backend(self, name: str, precision: Precision) -&gt; Type[BackendBase]:\n        \"\"\"Query set of available backends with provided properties and return backend\n        class if there is one meeting expectations.\n        \"\"\"\n        try:\n            return self.backends[(name.casefold(), precision)]\n        except KeyError as exc:\n            msg = (\n                f\"There is no backend with name={name!r} and precision=\"\n                f\"{precision.name!r} currently installed.\"\n            )\n            raise BackendNotAvailableError(msg) from exc\n\n    def get_rich_table(self) -&gt; Table:\n        \"\"\"Create rich Table object containing information about available backends.\"\"\"\n        table = Table(title=\"Available backends\", show_lines=True)\n        table.add_column(\"Name\", justify=\"right\", no_wrap=True, style=\"deep_sky_blue1\")\n        table.add_column(\"Precision\", justify=\"center\", no_wrap=True)\n        table.add_column(\"Author\", justify=\"center\", no_wrap=False)\n        table.add_column(\"Source\", justify=\"left\", no_wrap=False)\n        table.add_column(\"Description\", justify=\"left\", no_wrap=False)\n\n        for key, value in self.backends.items():\n            try:\n                (name, precision), cls = key, value\n                table.add_row(\n                    name,\n                    precision.name,\n                    getattr(cls, \"author\", \"\"),\n                    f\"{cls.__module__}.{cls.__qualname__}\",\n                    getattr(cls, \"description\", \"\"),\n                )\n            except (TypeError, ValueError):  # noqa: PERF203\n                logging.warning(\"Failed to display information about backed %r\", value)\n\n        return table\n</code></pre>"},{"location":"reference/cssfinder/algorithm/backend/loader.html#cssfinder.algorithm.backend.loader.Loader.reload","title":"reload","text":"<pre><code>reload() -&gt; None\n</code></pre> <p>Load all backends available in python environment.</p> <p>This is automatically called by constructor to load all backends. You can use it to refresh list of loaded backends.</p> Source code in <code>cssfinder/algorithm/backend/loader.py</code> <pre><code>def reload(self) -&gt; None:\n    \"\"\"Load all backends available in python environment.\n\n    This is automatically called by constructor to load all backends. You can use it\n    to refresh list of loaded backends.\n\n    \"\"\"\n    self.backends: dict[tuple[str, Precision], Type[BackendBase]] = {}\n\n    for dist in importlib.import_module(\"pkg_resources\").working_set:\n        if self.BACKEND_NAME_REGEX.match(dist.project_name) is None:\n            continue\n\n        module_name = dist.project_name.replace(\"-\", \"_\")\n\n        module = importlib.import_module(module_name)\n        module_meta = metadata.metadata(module_name)\n\n        export_backend = getattr(module, \"export_backend\", None)\n\n        if export_backend is None:\n            continue\n\n        backends = export_backend()\n\n        if not isinstance(backends, dict):\n            logging.critical(\n                \"Backend %r unsupported export format %r, expected &lt;class 'dict'&gt;.\",\n                module_name,\n                type(backends),\n            )\n            continue\n\n        self._extend_backend_index(module_name, module_meta, backends)\n</code></pre>"},{"location":"reference/cssfinder/algorithm/backend/loader.html#cssfinder.algorithm.backend.loader.Loader.new","title":"new  <code>cached</code> <code>classmethod</code>","text":"<pre><code>new() -&gt; Self\n</code></pre> <p>Get instance of Loader.</p> Source code in <code>cssfinder/algorithm/backend/loader.py</code> <pre><code>@classmethod\n@lru_cache(maxsize=1)\ndef new(cls) -&gt; Self:\n    \"\"\"Get instance of Loader.\"\"\"\n    return cls()\n</code></pre>"},{"location":"reference/cssfinder/algorithm/backend/loader.html#cssfinder.algorithm.backend.loader.Loader.get_backend","title":"get_backend","text":"<pre><code>get_backend(\n    name: str, precision: Precision\n) -&gt; Type[BackendBase]\n</code></pre> <p>Query set of available backends with provided properties and return backend class if there is one meeting expectations.</p> Source code in <code>cssfinder/algorithm/backend/loader.py</code> <pre><code>def get_backend(self, name: str, precision: Precision) -&gt; Type[BackendBase]:\n    \"\"\"Query set of available backends with provided properties and return backend\n    class if there is one meeting expectations.\n    \"\"\"\n    try:\n        return self.backends[(name.casefold(), precision)]\n    except KeyError as exc:\n        msg = (\n            f\"There is no backend with name={name!r} and precision=\"\n            f\"{precision.name!r} currently installed.\"\n        )\n        raise BackendNotAvailableError(msg) from exc\n</code></pre>"},{"location":"reference/cssfinder/algorithm/backend/loader.html#cssfinder.algorithm.backend.loader.Loader.get_rich_table","title":"get_rich_table","text":"<pre><code>get_rich_table() -&gt; Table\n</code></pre> <p>Create rich Table object containing information about available backends.</p> Source code in <code>cssfinder/algorithm/backend/loader.py</code> <pre><code>def get_rich_table(self) -&gt; Table:\n    \"\"\"Create rich Table object containing information about available backends.\"\"\"\n    table = Table(title=\"Available backends\", show_lines=True)\n    table.add_column(\"Name\", justify=\"right\", no_wrap=True, style=\"deep_sky_blue1\")\n    table.add_column(\"Precision\", justify=\"center\", no_wrap=True)\n    table.add_column(\"Author\", justify=\"center\", no_wrap=False)\n    table.add_column(\"Source\", justify=\"left\", no_wrap=False)\n    table.add_column(\"Description\", justify=\"left\", no_wrap=False)\n\n    for key, value in self.backends.items():\n        try:\n            (name, precision), cls = key, value\n            table.add_row(\n                name,\n                precision.name,\n                getattr(cls, \"author\", \"\"),\n                f\"{cls.__module__}.{cls.__qualname__}\",\n                getattr(cls, \"description\", \"\"),\n            )\n        except (TypeError, ValueError):  # noqa: PERF203\n            logging.warning(\"Failed to display information about backed %r\", value)\n\n    return table\n</code></pre>"},{"location":"reference/cssfinder/algorithm/backend/loader.html#cssfinder.algorithm.backend.loader.BackendNotAvailableError","title":"BackendNotAvailableError","text":"<p>             Bases: <code>KeyError</code></p> <p>Raised when backend with specified features can not be found.</p> Source code in <code>cssfinder/algorithm/backend/loader.py</code> <pre><code>class BackendNotAvailableError(KeyError):\n    \"\"\"Raised when backend with specified features can not be found.\"\"\"\n</code></pre>"},{"location":"reference/cssfinder/io/__init__.html","title":"init","text":""},{"location":"reference/cssfinder/io/__init__.html#cssfinder.io","title":"io","text":"<p>Groups input output utilities for loading assets.</p>"},{"location":"reference/cssfinder/io/gilbert_io.html","title":"gilbert_io","text":""},{"location":"reference/cssfinder/io/gilbert_io.html#cssfinder.io.gilbert_io","title":"gilbert_io","text":"<p>Module contains implementation of asset loader class.</p>"},{"location":"reference/cssfinder/io/gilbert_io.html#cssfinder.io.gilbert_io.GilbertIO","title":"GilbertIO","text":"<p>Loader of Gilbert algorithm assets.</p> Source code in <code>cssfinder/io/gilbert_io.py</code> <pre><code>class GilbertIO:\n    \"\"\"Loader of Gilbert algorithm assets.\"\"\"\n\n    def __init__(\n        self,\n        matrix_format: MatrixFormat = MatrixFormat.MATRIX_MARKET,\n    ) -&gt; None:\n        self.loader = MatrixIO.new(matrix_format)\n\n    def load_state(self, source: str | Path) -&gt; npt.NDArray[np.complex128]:\n        \"\"\"Load state matrix from file.\n\n        Parameters\n        ----------\n        source : str | Path\n            Path to matrix file.\n\n        Returns\n        -------\n        npt.NDArray[np.complex128]\n            Loaded matrix. Always returns np.complex128.\n\n        \"\"\"\n        mtx = self.loader.load(source).astype(np.complex128)\n        logging.info(\n            \"Loaded matrix from %r of shape %r\",\n            Path(source).as_posix(),\n            mtx.shape,\n        )\n\n        # We are expecting loaded ndarray to be a square matrix, all other numbers of\n        # dimensions cause crash.\n        self._check_matrix_shape(mtx)\n\n        return mtx\n\n    def _check_matrix_shape(self, mtx: npt.NDArray[np.complex128]) -&gt; None:\n        \"\"\"Check if ndarray conforms shape rules.\"\"\"\n        if len(mtx.shape) == NUMBER_OF_DIMENSIONS_IN_MATRIX:\n            pass\n\n        elif len(mtx.shape) &gt; NUMBER_OF_DIMENSIONS_IN_MATRIX:\n            logging.critical(\n                \"Expected square matrix but got tensor with shape %r\",\n                mtx.shape,\n            )\n            raise NotExpectedTensorError(mtx)\n\n        elif len(mtx.shape) == 1:\n            logging.critical(\n                \"Expected square matrix but got vector with shape %r\",\n                mtx.shape,\n            )\n            raise NotExpectedVectorError(mtx)\n\n        elif len(mtx.shape) == 0:\n            logging.critical(\"Expected square matrix but got scalar (%r)\", mtx)\n            raise NotExpectedScalarError(mtx)\n\n        else:\n            raise AssertionError(mtx.shape)\n\n        # Only square matrices are accepted.\n        x_size, y_size = mtx.shape\n        if x_size != y_size:\n            logging.critical(\"Expected square matrix, but received shape %r\", mtx.shape)\n            raise IncorrectMatrixShapeError(mtx)\n\n    def load_symmetries(\n        self,\n        symmetries: Optional[list[list[str]]],\n    ) -&gt; list[list[npt.NDArray[np.complex128]]]:\n        \"\"\"Load matrices describing symmetries of system state.\"\"\"\n        if symmetries is None:\n            return []\n        return [\n            [self.loader.load(sym).astype(np.complex128) for sym in row]\n            for row in symmetries\n        ]\n\n    def load_projection(\n        self,\n        projection: Optional[str],\n    ) -&gt; npt.NDArray[np.complex128] | None:\n        \"\"\"Load matrix describing projection of system state.\"\"\"\n        if projection is None:\n            return None\n\n        return self.loader.load(projection).astype(np.complex128)\n\n    def dump_state(self, state: npt.NDArray[np.complex128], dest: str | Path) -&gt; None:\n        \"\"\"Save state to file.\"\"\"\n        return self.loader.dump(state, dest)\n\n    def dump_corrections(self, corrections: Any, dest: str | Path) -&gt; None:\n        \"\"\"Save state to file.\"\"\"\n        file_path = Path(dest).with_suffix(\".json\")\n        with file_path.open(\"w\", encoding=\"utf-8\") as file:\n            return json.dump(corrections, file)\n\n    def load_corrections(self, source: Path) -&gt; pd.DataFrame:\n        \"\"\"Load corrections from a JSON file and return them as a pandas DataFrame.\n\n        Parameters\n        ----------\n        source : Path\n            Path to the JSON file containing corrections data.\n\n        Returns\n        -------\n        pd.DataFrame\n            A DataFrame containing the corrections data, with columns renamed to\n            \"iteration\", \"index\", and \"value\".\n\n        \"\"\"\n        data_frame: pd.DataFrame = cast(pd.DataFrame, pd.read_json(source))\n\n        return data_frame.rename(\n            columns={0: \"iteration\", 1: \"index\", 2: \"value\"},\n        )\n</code></pre>"},{"location":"reference/cssfinder/io/gilbert_io.html#cssfinder.io.gilbert_io.GilbertIO.load_state","title":"load_state","text":"<pre><code>load_state(\n    source: str | Path,\n) -&gt; npt.NDArray[np.complex128]\n</code></pre> <p>Load state matrix from file.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str | Path</code> <p>Path to matrix file.</p> required <p>Returns:</p> Type Description <code>NDArray[complex128]</code> <p>Loaded matrix. Always returns np.complex128.</p> Source code in <code>cssfinder/io/gilbert_io.py</code> <pre><code>def load_state(self, source: str | Path) -&gt; npt.NDArray[np.complex128]:\n    \"\"\"Load state matrix from file.\n\n    Parameters\n    ----------\n    source : str | Path\n        Path to matrix file.\n\n    Returns\n    -------\n    npt.NDArray[np.complex128]\n        Loaded matrix. Always returns np.complex128.\n\n    \"\"\"\n    mtx = self.loader.load(source).astype(np.complex128)\n    logging.info(\n        \"Loaded matrix from %r of shape %r\",\n        Path(source).as_posix(),\n        mtx.shape,\n    )\n\n    # We are expecting loaded ndarray to be a square matrix, all other numbers of\n    # dimensions cause crash.\n    self._check_matrix_shape(mtx)\n\n    return mtx\n</code></pre>"},{"location":"reference/cssfinder/io/gilbert_io.html#cssfinder.io.gilbert_io.GilbertIO.load_symmetries","title":"load_symmetries","text":"<pre><code>load_symmetries(\n    symmetries: Optional[list[list[str]]],\n) -&gt; list[list[npt.NDArray[np.complex128]]]\n</code></pre> <p>Load matrices describing symmetries of system state.</p> Source code in <code>cssfinder/io/gilbert_io.py</code> <pre><code>def load_symmetries(\n    self,\n    symmetries: Optional[list[list[str]]],\n) -&gt; list[list[npt.NDArray[np.complex128]]]:\n    \"\"\"Load matrices describing symmetries of system state.\"\"\"\n    if symmetries is None:\n        return []\n    return [\n        [self.loader.load(sym).astype(np.complex128) for sym in row]\n        for row in symmetries\n    ]\n</code></pre>"},{"location":"reference/cssfinder/io/gilbert_io.html#cssfinder.io.gilbert_io.GilbertIO.load_projection","title":"load_projection","text":"<pre><code>load_projection(\n    projection: Optional[str],\n) -&gt; npt.NDArray[np.complex128] | None\n</code></pre> <p>Load matrix describing projection of system state.</p> Source code in <code>cssfinder/io/gilbert_io.py</code> <pre><code>def load_projection(\n    self,\n    projection: Optional[str],\n) -&gt; npt.NDArray[np.complex128] | None:\n    \"\"\"Load matrix describing projection of system state.\"\"\"\n    if projection is None:\n        return None\n\n    return self.loader.load(projection).astype(np.complex128)\n</code></pre>"},{"location":"reference/cssfinder/io/gilbert_io.html#cssfinder.io.gilbert_io.GilbertIO.dump_state","title":"dump_state","text":"<pre><code>dump_state(\n    state: npt.NDArray[np.complex128], dest: str | Path\n) -&gt; None\n</code></pre> <p>Save state to file.</p> Source code in <code>cssfinder/io/gilbert_io.py</code> <pre><code>def dump_state(self, state: npt.NDArray[np.complex128], dest: str | Path) -&gt; None:\n    \"\"\"Save state to file.\"\"\"\n    return self.loader.dump(state, dest)\n</code></pre>"},{"location":"reference/cssfinder/io/gilbert_io.html#cssfinder.io.gilbert_io.GilbertIO.dump_corrections","title":"dump_corrections","text":"<pre><code>dump_corrections(\n    corrections: Any, dest: str | Path\n) -&gt; None\n</code></pre> <p>Save state to file.</p> Source code in <code>cssfinder/io/gilbert_io.py</code> <pre><code>def dump_corrections(self, corrections: Any, dest: str | Path) -&gt; None:\n    \"\"\"Save state to file.\"\"\"\n    file_path = Path(dest).with_suffix(\".json\")\n    with file_path.open(\"w\", encoding=\"utf-8\") as file:\n        return json.dump(corrections, file)\n</code></pre>"},{"location":"reference/cssfinder/io/gilbert_io.html#cssfinder.io.gilbert_io.GilbertIO.load_corrections","title":"load_corrections","text":"<pre><code>load_corrections(source: Path) -&gt; pd.DataFrame\n</code></pre> <p>Load corrections from a JSON file and return them as a pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>Path</code> <p>Path to the JSON file containing corrections data.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A DataFrame containing the corrections data, with columns renamed to \"iteration\", \"index\", and \"value\".</p> Source code in <code>cssfinder/io/gilbert_io.py</code> <pre><code>def load_corrections(self, source: Path) -&gt; pd.DataFrame:\n    \"\"\"Load corrections from a JSON file and return them as a pandas DataFrame.\n\n    Parameters\n    ----------\n    source : Path\n        Path to the JSON file containing corrections data.\n\n    Returns\n    -------\n    pd.DataFrame\n        A DataFrame containing the corrections data, with columns renamed to\n        \"iteration\", \"index\", and \"value\".\n\n    \"\"\"\n    data_frame: pd.DataFrame = cast(pd.DataFrame, pd.read_json(source))\n\n    return data_frame.rename(\n        columns={0: \"iteration\", 1: \"index\", 2: \"value\"},\n    )\n</code></pre>"},{"location":"reference/cssfinder/io/gilbert_io.html#cssfinder.io.gilbert_io.IncorrectMatrixShapeError","title":"IncorrectMatrixShapeError","text":"<p>             Bases: <code>ValueError</code></p> <p>Raised when matrix has incorrect shape.</p> Source code in <code>cssfinder/io/gilbert_io.py</code> <pre><code>class IncorrectMatrixShapeError(ValueError):\n    \"\"\"Raised when matrix has incorrect shape.\"\"\"\n\n    def __init__(self, mtx: npt.NDArray[np.complex128]) -&gt; None:\n        \"\"\"Store matrix object in `mtx` attribute.\"\"\"\n        super().__init__()\n        self.mtx = mtx\n</code></pre>"},{"location":"reference/cssfinder/io/gilbert_io.html#cssfinder.io.gilbert_io.IncorrectMatrixShapeError.__init__","title":"__init__","text":"<pre><code>__init__(mtx: npt.NDArray[np.complex128]) -&gt; None\n</code></pre> <p>Store matrix object in <code>mtx</code> attribute.</p> Source code in <code>cssfinder/io/gilbert_io.py</code> <pre><code>def __init__(self, mtx: npt.NDArray[np.complex128]) -&gt; None:\n    \"\"\"Store matrix object in `mtx` attribute.\"\"\"\n    super().__init__()\n    self.mtx = mtx\n</code></pre>"},{"location":"reference/cssfinder/io/gilbert_io.html#cssfinder.io.gilbert_io.NotExpectedTensorError","title":"NotExpectedTensorError","text":"<p>             Bases: <code>IncorrectMatrixShapeError</code></p> <p>Raised when got 3+ dimensional tensor instead of matrix.</p> Source code in <code>cssfinder/io/gilbert_io.py</code> <pre><code>class NotExpectedTensorError(IncorrectMatrixShapeError):\n    \"\"\"Raised when got 3+ dimensional tensor instead of matrix.\"\"\"\n</code></pre>"},{"location":"reference/cssfinder/io/gilbert_io.html#cssfinder.io.gilbert_io.NotExpectedVectorError","title":"NotExpectedVectorError","text":"<p>             Bases: <code>IncorrectMatrixShapeError</code></p> <p>Raised when got vector instead of matrix.</p> Source code in <code>cssfinder/io/gilbert_io.py</code> <pre><code>class NotExpectedVectorError(IncorrectMatrixShapeError):\n    \"\"\"Raised when got vector instead of matrix.\"\"\"\n</code></pre>"},{"location":"reference/cssfinder/io/gilbert_io.html#cssfinder.io.gilbert_io.NotExpectedScalarError","title":"NotExpectedScalarError","text":"<p>             Bases: <code>IncorrectMatrixShapeError</code></p> <p>Raised when got scalar instead of matrix.</p> Source code in <code>cssfinder/io/gilbert_io.py</code> <pre><code>class NotExpectedScalarError(IncorrectMatrixShapeError):\n    \"\"\"Raised when got scalar instead of matrix.\"\"\"\n</code></pre>"},{"location":"reference/cssfinder/io/matrix.html","title":"matrix","text":""},{"location":"reference/cssfinder/io/matrix.html#cssfinder.io.matrix","title":"matrix","text":"<p>Program input/output utilities.</p>"},{"location":"reference/cssfinder/io/matrix.html#cssfinder.io.matrix.MatrixFormat","title":"MatrixFormat","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of possible supported matrix formats.</p> Source code in <code>cssfinder/io/matrix.py</code> <pre><code>class MatrixFormat(Enum):\n    \"\"\"Enumeration of possible supported matrix formats.\"\"\"\n\n    MATRIX_MARKET = \".mtx\"\n</code></pre>"},{"location":"reference/cssfinder/io/matrix.html#cssfinder.io.matrix.MatrixIO","title":"MatrixIO","text":"<p>             Bases: <code>ABC</code></p> <p>Abstract base class declaring interface of matrix input-output manager.</p> Source code in <code>cssfinder/io/matrix.py</code> <pre><code>class MatrixIO(ABC):\n    \"\"\"Abstract base class declaring interface of matrix input-output manager.\"\"\"\n\n    matrix_format: ClassVar[MatrixFormat]\n\n    @classmethod\n    def new(cls, matrix_format: MatrixFormat) -&gt; MatrixIO:\n        \"\"\"Create new instance of matrix loader for file format. When format is None,\n        file format is deduced from file extension.\n\n        Parameters\n        ----------\n        matrix_format : MatrixFormat\n            Path to file containing matrix data.\n\n        Returns\n        -------\n        MatrixIO\n            Matrix loader.\n\n        \"\"\"\n        io = FORMAT_TO_LOADER[matrix_format]()\n        logging.debug(\"Selected matrix IO %r for format %r\", io, matrix_format.name)\n        return io\n\n    def load(\n        self,\n        src: str | Path | IO[bytes],\n    ) -&gt; npt.NDArray[np.int64 | np.float64 | np.complex128]:\n        \"\"\"Load matrix from file as numpy array.\"\"\"\n        if isinstance(src, (str, Path)):\n            with Path(src).open(\"rb\") as file:\n                return self._load(file)\n\n        return self._load(file)\n\n    @abstractmethod\n    def _load(\n        self,\n        src: IO[bytes],\n    ) -&gt; npt.NDArray[np.int64 | np.float64 | np.complex128]:\n        ...\n\n    def dump(\n        self,\n        data: npt.NDArray[np.int64 | np.float64 | np.complex128],\n        dest: str | Path | IO[bytes],\n    ) -&gt; None:\n        \"\"\"Dump matrix to file from numpy array.\"\"\"\n        if isinstance(dest, (str, Path)):\n            file_path = Path(dest).with_suffix(self.matrix_format.value)\n            file_path.touch(0o777, exist_ok=True)\n            with file_path.open(\"wb\") as file:\n                return self._dump(data, file)\n\n        return self._dump(data, file)\n\n    @abstractmethod\n    def _dump(\n        self,\n        data: npt.NDArray[np.int64 | np.float64 | np.complex128],\n        dest: IO[bytes],\n    ) -&gt; None:\n        ...\n</code></pre>"},{"location":"reference/cssfinder/io/matrix.html#cssfinder.io.matrix.MatrixIO.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(matrix_format: MatrixFormat) -&gt; MatrixIO\n</code></pre> <p>Create new instance of matrix loader for file format. When format is None, file format is deduced from file extension.</p> <p>Parameters:</p> Name Type Description Default <code>matrix_format</code> <code>MatrixFormat</code> <p>Path to file containing matrix data.</p> required <p>Returns:</p> Type Description <code>MatrixIO</code> <p>Matrix loader.</p> Source code in <code>cssfinder/io/matrix.py</code> <pre><code>@classmethod\ndef new(cls, matrix_format: MatrixFormat) -&gt; MatrixIO:\n    \"\"\"Create new instance of matrix loader for file format. When format is None,\n    file format is deduced from file extension.\n\n    Parameters\n    ----------\n    matrix_format : MatrixFormat\n        Path to file containing matrix data.\n\n    Returns\n    -------\n    MatrixIO\n        Matrix loader.\n\n    \"\"\"\n    io = FORMAT_TO_LOADER[matrix_format]()\n    logging.debug(\"Selected matrix IO %r for format %r\", io, matrix_format.name)\n    return io\n</code></pre>"},{"location":"reference/cssfinder/io/matrix.html#cssfinder.io.matrix.MatrixIO.load","title":"load","text":"<pre><code>load(\n    src: str | Path | IO[bytes],\n) -&gt; npt.NDArray[np.int64 | np.float64 | np.complex128]\n</code></pre> <p>Load matrix from file as numpy array.</p> Source code in <code>cssfinder/io/matrix.py</code> <pre><code>def load(\n    self,\n    src: str | Path | IO[bytes],\n) -&gt; npt.NDArray[np.int64 | np.float64 | np.complex128]:\n    \"\"\"Load matrix from file as numpy array.\"\"\"\n    if isinstance(src, (str, Path)):\n        with Path(src).open(\"rb\") as file:\n            return self._load(file)\n\n    return self._load(file)\n</code></pre>"},{"location":"reference/cssfinder/io/matrix.html#cssfinder.io.matrix.MatrixIO.dump","title":"dump","text":"<pre><code>dump(\n    data: npt.NDArray[\n        np.int64 | np.float64 | np.complex128\n    ],\n    dest: str | Path | IO[bytes],\n) -&gt; None\n</code></pre> <p>Dump matrix to file from numpy array.</p> Source code in <code>cssfinder/io/matrix.py</code> <pre><code>def dump(\n    self,\n    data: npt.NDArray[np.int64 | np.float64 | np.complex128],\n    dest: str | Path | IO[bytes],\n) -&gt; None:\n    \"\"\"Dump matrix to file from numpy array.\"\"\"\n    if isinstance(dest, (str, Path)):\n        file_path = Path(dest).with_suffix(self.matrix_format.value)\n        file_path.touch(0o777, exist_ok=True)\n        with file_path.open(\"wb\") as file:\n            return self._dump(data, file)\n\n    return self._dump(data, file)\n</code></pre>"},{"location":"reference/cssfinder/io/matrix.html#cssfinder.io.matrix.MatrixMarketIO","title":"MatrixMarketIO","text":"<p>             Bases: <code>MatrixIO</code></p> <p>MatrixIO implementation for loading MatrixMarket exchange format files.</p> Source code in <code>cssfinder/io/matrix.py</code> <pre><code>class MatrixMarketIO(MatrixIO):\n    \"\"\"MatrixIO implementation for loading MatrixMarket exchange format files.\"\"\"\n\n    matrix_format: ClassVar[MatrixFormat] = MatrixFormat.MATRIX_MARKET\n\n    def _load(\n        self,\n        dest: IO[bytes],\n    ) -&gt; npt.NDArray[np.int64 | np.float64 | np.complex128]:\n        mtx = scipy.io.mmread(dest)\n        if mtx is None:\n            raise TypeError\n        return np.array(mtx)\n\n    def _dump(\n        self,\n        data: npt.NDArray[np.int64 | np.float64 | np.complex128],\n        dest: IO[bytes],\n    ) -&gt; None:\n        scipy.io.mmwrite(\n            dest,\n            data,\n            comment=f\"Created with CSSFinder {cssfinder.__version__}.\",\n        )\n</code></pre>"},{"location":"reference/cssfinder/reports/__init__.html","title":"init","text":""},{"location":"reference/cssfinder/reports/__init__.html#cssfinder.reports","title":"reports","text":"<p>Report generation tools.</p>"},{"location":"reference/cssfinder/reports/archive.html","title":"archive","text":""},{"location":"reference/cssfinder/reports/archive.html#cssfinder.reports.archive","title":"archive","text":"<p>Report generator outputting archive with all report files.</p> <p>In comparison to TXT reports it also includes plots.</p>"},{"location":"reference/cssfinder/reports/html.html","title":"html","text":""},{"location":"reference/cssfinder/reports/html.html#cssfinder.reports.html","title":"html","text":"<p>HTML document based report renderer.</p>"},{"location":"reference/cssfinder/reports/html.html#cssfinder.reports.html.HTMLRenderer","title":"HTMLRenderer","text":"<p>             Bases: <code>Renderer</code></p> <p>Renderer implementation outputting HTML files content.</p> Source code in <code>cssfinder/reports/html.py</code> <pre><code>class HTMLRenderer(Renderer):\n    \"\"\"Renderer implementation outputting HTML files content.\"\"\"\n\n    def __init__(self, props: SlopeProperties, plots: list[Plot], task: Task) -&gt; None:\n        super().__init__(props, plots, task)\n        self.env = get_cssfinder_jinja2_environment()\n\n    def render(self) -&gt; Report:\n        \"\"\"Generate report content.\"\"\"\n        template = self.env.get_template(\"report.html.jinja2\")\n        return Report(\n            template.render(ctx=self.ctx).encode(\"utf-8\"),\n            ReportType.HTML,\n            self.ctx.task.task_output_directory / \"report.html\",\n        )\n</code></pre>"},{"location":"reference/cssfinder/reports/html.html#cssfinder.reports.html.HTMLRenderer.render","title":"render","text":"<pre><code>render() -&gt; Report\n</code></pre> <p>Generate report content.</p> Source code in <code>cssfinder/reports/html.py</code> <pre><code>def render(self) -&gt; Report:\n    \"\"\"Generate report content.\"\"\"\n    template = self.env.get_template(\"report.html.jinja2\")\n    return Report(\n        template.render(ctx=self.ctx).encode(\"utf-8\"),\n        ReportType.HTML,\n        self.ctx.task.task_output_directory / \"report.html\",\n    )\n</code></pre>"},{"location":"reference/cssfinder/reports/json.html","title":"json","text":""},{"location":"reference/cssfinder/reports/json.html#cssfinder.reports.json","title":"json","text":"<p>HTML document based report renderer.</p>"},{"location":"reference/cssfinder/reports/json.html#cssfinder.reports.json.JSONRenderer","title":"JSONRenderer","text":"<p>             Bases: <code>Renderer</code></p> <p>Renderer implementation outputting HTML files content.</p> Source code in <code>cssfinder/reports/json.py</code> <pre><code>class JSONRenderer(Renderer):\n    \"\"\"Renderer implementation outputting HTML files content.\"\"\"\n\n    def render(self) -&gt; Report:\n        \"\"\"Generate report content.\"\"\"\n        return Report(\n            json.dumps(\n                {\n                    \"title\": self.ctx.title,\n                    \"meta\": self.ctx.meta,\n                    \"math\": self.ctx.math_props,\n                },\n                indent=4,\n            ).encode(\"utf-8\"),\n            ReportType.JSON,\n            self.ctx.task.task_output_directory / \"report.json\",\n        )\n</code></pre>"},{"location":"reference/cssfinder/reports/json.html#cssfinder.reports.json.JSONRenderer.render","title":"render","text":"<pre><code>render() -&gt; Report\n</code></pre> <p>Generate report content.</p> Source code in <code>cssfinder/reports/json.py</code> <pre><code>def render(self) -&gt; Report:\n    \"\"\"Generate report content.\"\"\"\n    return Report(\n        json.dumps(\n            {\n                \"title\": self.ctx.title,\n                \"meta\": self.ctx.meta,\n                \"math\": self.ctx.math_props,\n            },\n            indent=4,\n        ).encode(\"utf-8\"),\n        ReportType.JSON,\n        self.ctx.task.task_output_directory / \"report.json\",\n    )\n</code></pre>"},{"location":"reference/cssfinder/reports/manager.html","title":"manager","text":""},{"location":"reference/cssfinder/reports/manager.html#cssfinder.reports.manager","title":"manager","text":"<p>Implementation of class wrapper around report generation process.</p>"},{"location":"reference/cssfinder/reports/manager.html#cssfinder.reports.manager.ReportManager","title":"ReportManager","text":"<p>Class wrapper around report generation process.</p> Source code in <code>cssfinder/reports/manager.py</code> <pre><code>class ReportManager:\n    \"\"\"Class wrapper around report generation process.\"\"\"\n\n    def __init__(self, project: CSSFProject, task: Task) -&gt; None:\n        \"\"\"Initialize a ReportManager object with a CSSFProject and Task.\n\n        Parameters\n        ----------\n        project : CSSFProject\n            The CSSFProject object associated with the task.\n        task : Task\n            The Task object for which report will be generated.\n\n        \"\"\"\n        self.project = project\n        self.task = task\n        self.loader = GilbertIO()\n\n    def prepare(self) -&gt; PreparedReportManager:\n        \"\"\"Prepare the data for generating a report.\n\n        This method loads corrections from a Gilbert output file, generates plots, and\n        returns a PreparedReportManager object that can be used to generate a report.\n\n        Returns\n        -------\n        PreparedReportManager\n            A PreparedReportManager object that contains the data and plots needed for\n            generating a report.\n\n        \"\"\"\n        corrections = self.loader.load_corrections(self.task.output_corrections_file)\n\n        plots = OrderedDict()\n\n        plotter = Plotter(corrections)\n\n        plots[\"decay\"] = plotter.plot_corrections()\n        plots[\"inverse_decay\"] = plotter.plot_corrections_inverse()\n        plots[\"iterations\"] = plotter.plot_iteration()\n\n        return PreparedReportManager(\n            self.project,\n            plotter.slope_props,\n            plots,\n            self.task,\n            corrections,\n        )\n</code></pre>"},{"location":"reference/cssfinder/reports/manager.html#cssfinder.reports.manager.ReportManager.__init__","title":"__init__","text":"<pre><code>__init__(project: CSSFProject, task: Task) -&gt; None\n</code></pre> <p>Initialize a ReportManager object with a CSSFProject and Task.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>CSSFProject</code> <p>The CSSFProject object associated with the task.</p> required <code>task</code> <code>Task</code> <p>The Task object for which report will be generated.</p> required Source code in <code>cssfinder/reports/manager.py</code> <pre><code>def __init__(self, project: CSSFProject, task: Task) -&gt; None:\n    \"\"\"Initialize a ReportManager object with a CSSFProject and Task.\n\n    Parameters\n    ----------\n    project : CSSFProject\n        The CSSFProject object associated with the task.\n    task : Task\n        The Task object for which report will be generated.\n\n    \"\"\"\n    self.project = project\n    self.task = task\n    self.loader = GilbertIO()\n</code></pre>"},{"location":"reference/cssfinder/reports/manager.html#cssfinder.reports.manager.ReportManager.prepare","title":"prepare","text":"<pre><code>prepare() -&gt; PreparedReportManager\n</code></pre> <p>Prepare the data for generating a report.</p> <p>This method loads corrections from a Gilbert output file, generates plots, and returns a PreparedReportManager object that can be used to generate a report.</p> <p>Returns:</p> Type Description <code>PreparedReportManager</code> <p>A PreparedReportManager object that contains the data and plots needed for generating a report.</p> Source code in <code>cssfinder/reports/manager.py</code> <pre><code>def prepare(self) -&gt; PreparedReportManager:\n    \"\"\"Prepare the data for generating a report.\n\n    This method loads corrections from a Gilbert output file, generates plots, and\n    returns a PreparedReportManager object that can be used to generate a report.\n\n    Returns\n    -------\n    PreparedReportManager\n        A PreparedReportManager object that contains the data and plots needed for\n        generating a report.\n\n    \"\"\"\n    corrections = self.loader.load_corrections(self.task.output_corrections_file)\n\n    plots = OrderedDict()\n\n    plotter = Plotter(corrections)\n\n    plots[\"decay\"] = plotter.plot_corrections()\n    plots[\"inverse_decay\"] = plotter.plot_corrections_inverse()\n    plots[\"iterations\"] = plotter.plot_iteration()\n\n    return PreparedReportManager(\n        self.project,\n        plotter.slope_props,\n        plots,\n        self.task,\n        corrections,\n    )\n</code></pre>"},{"location":"reference/cssfinder/reports/manager.html#cssfinder.reports.manager.PreparedReportManager","title":"PreparedReportManager  <code>dataclass</code>","text":"<p>Report manager with calculated report values.</p> Source code in <code>cssfinder/reports/manager.py</code> <pre><code>@dataclass\nclass PreparedReportManager:\n    \"\"\"Report manager with calculated report values.\"\"\"\n\n    project: CSSFProject\n    props: SlopeProperties\n    plots: OrderedDict[str, Plot]\n    task: Task\n    corrections: pd.DataFrame\n\n    RENDERERS: ClassVar[dict[ReportType, Type[Renderer]]] = {}\n\n    @classmethod\n    def register_renderer(\n        cls,\n        renderer_cls: Type[Renderer],\n        report_type: ReportType,\n    ) -&gt; None:\n        \"\"\"Register renderer for report type.\"\"\"\n        cls.RENDERERS[report_type] = renderer_cls\n\n    def request_report(self, report_type: ReportType | Any) -&gt; Report:\n        \"\"\"Generate report.\"\"\"\n        renderer_cls = self.RENDERERS.get(report_type)\n\n        if renderer_cls is None:\n            if isinstance(report_type, ReportType):\n                msg = f\"Report type {report_type.name} is not supported yet.\"\n                raise NotImplementedError(msg)\n\n            msg = f\"Unknown report type {report_type!r}\"\n            raise KeyError(msg)\n\n        return renderer_cls(\n            self.props,\n            [p.configure() for p in self.plots.values()],\n            self.task,\n        ).render()\n</code></pre>"},{"location":"reference/cssfinder/reports/manager.html#cssfinder.reports.manager.PreparedReportManager.register_renderer","title":"register_renderer  <code>classmethod</code>","text":"<pre><code>register_renderer(\n    renderer_cls: Type[Renderer], report_type: ReportType\n) -&gt; None\n</code></pre> <p>Register renderer for report type.</p> Source code in <code>cssfinder/reports/manager.py</code> <pre><code>@classmethod\ndef register_renderer(\n    cls,\n    renderer_cls: Type[Renderer],\n    report_type: ReportType,\n) -&gt; None:\n    \"\"\"Register renderer for report type.\"\"\"\n    cls.RENDERERS[report_type] = renderer_cls\n</code></pre>"},{"location":"reference/cssfinder/reports/manager.html#cssfinder.reports.manager.PreparedReportManager.request_report","title":"request_report","text":"<pre><code>request_report(report_type: ReportType | Any) -&gt; Report\n</code></pre> <p>Generate report.</p> Source code in <code>cssfinder/reports/manager.py</code> <pre><code>def request_report(self, report_type: ReportType | Any) -&gt; Report:\n    \"\"\"Generate report.\"\"\"\n    renderer_cls = self.RENDERERS.get(report_type)\n\n    if renderer_cls is None:\n        if isinstance(report_type, ReportType):\n            msg = f\"Report type {report_type.name} is not supported yet.\"\n            raise NotImplementedError(msg)\n\n        msg = f\"Unknown report type {report_type!r}\"\n        raise KeyError(msg)\n\n    return renderer_cls(\n        self.props,\n        [p.configure() for p in self.plots.values()],\n        self.task,\n    ).render()\n</code></pre>"},{"location":"reference/cssfinder/reports/math.html","title":"math","text":""},{"location":"reference/cssfinder/reports/math.html#cssfinder.reports.math","title":"math","text":"<p>Report math utilities.</p>"},{"location":"reference/cssfinder/reports/math.html#cssfinder.reports.math.SlopeProperties","title":"SlopeProperties  <code>dataclass</code>","text":"<p>Class that encapsulates slope properties and provides methods to calculate correction values and find slope properties for a given dataset.</p> <p>Attributes:</p> Name Type Description <code>optimum</code> <code>float64</code> <p>The optimum value found during the slope property calculation.</p> <code>r_value</code> <code>float64</code> <p>The r-value calculated for the slope properties.</p> <code>aa1</code> <code>float64</code> <p>The slope of the trend line of the correction index with respect to iteration index.</p> <code>bb1</code> <code>float64</code> <p>The exponential decay coefficient calculated for the slope properties.</p> <p>Methods:</p> Name Description <code>get_correction</code> <p>Returns the correction values for a given input array <code>x</code>.</p> <code>find</code> <p>Finds the slope properties for a given dataset <code>data</code>.</p> Source code in <code>cssfinder/reports/math.py</code> <pre><code>@dataclass\nclass SlopeProperties:\n    \"\"\"Class that encapsulates slope properties and provides methods to calculate\n    correction values and find slope properties for a given dataset.\n\n    Attributes\n    ----------\n    optimum: np.float64\n        The optimum value found during the slope property calculation.\n    r_value: np.float64\n        The r-value calculated for the slope properties.\n    aa1: np.float64\n        The slope of the trend line of the correction index with respect to iteration\n        index.\n    bb1: np.float64\n        The exponential decay coefficient calculated for the slope properties.\n\n    Methods\n    -------\n    get_correction(x: npt.NDArray[np.float64]) -&gt; np.float64:\n        Returns the correction values for a given input array `x`.\n    find(data: npt.NDArray[np.float64]) -&gt; 'SlopeProperties':\n        Finds the slope properties for a given dataset `data`.\n\n    \"\"\"\n\n    correction_count: int\n    optimum: np.float64\n    r_value: np.float64\n    aa1: np.float64\n    bb1: np.float64\n\n    def get_correction_count(self, x: np.float64) -&gt; np.float64:\n        \"\"\"Return the correction values for a given input array `x`.\n\n        Parameters\n        ----------\n        x: npt.NDArray[np.float64]\n            Input array for which correction values will be calculated.\n\n        Returns\n        -------\n        np.float64\n            The correction values calculated for the input array `x`.\n\n        \"\"\"\n        return np.multiply(  # type: ignore[no-any-return]\n            np.power(x, self.aa1),\n            self.bb1,\n        )\n\n    @classmethod\n    def find(cls, data: npt.NDArray[np.float64]) -&gt; Self:\n        \"\"\"Find the slope properties for a given dataset `data`.\n\n        Parameters\n        ----------\n        data: npt.NDArray[np.float64]\n            The dataset for which slope properties will be calculated.\n\n        Returns\n        -------\n        SlopeProperties\n            An instance of the SlopeProperties class representing the slope properties\n            of the input data.\n\n        \"\"\"\n        iteration_index: npt.NDArray[np.float64] = data[:, 0]\n        correction_index: npt.NDArray[np.float64] = data[:, 1]\n        correction_value: npt.NDArray[np.float64] = data[int(2 * len(data) / 3) :, 2]\n\n        correction_count = len(data)\n        optimum = find_correction_optimum(data[:, 2])\n\n        r_value = R(correction_value, optimum)\n\n        aa1 = trend(iteration_index, correction_index)\n        bb1 = np.exp(offset(iteration_index, correction_index))\n\n        return cls(correction_count, optimum, r_value, aa1, bb1)\n\n    def save_to(self, dest: Path) -&gt; None:\n        \"\"\"Save properties to file.\"\"\"\n        with dest.open(\"w\", encoding=\"utf-8\") as file:\n            json.dump(asdict(self), file)\n</code></pre>"},{"location":"reference/cssfinder/reports/math.html#cssfinder.reports.math.SlopeProperties.get_correction_count","title":"get_correction_count","text":"<pre><code>get_correction_count(x: np.float64) -&gt; np.float64\n</code></pre> <p>Return the correction values for a given input array <code>x</code>.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float64</code> <p>Input array for which correction values will be calculated.</p> required <p>Returns:</p> Type Description <code>float64</code> <p>The correction values calculated for the input array <code>x</code>.</p> Source code in <code>cssfinder/reports/math.py</code> <pre><code>def get_correction_count(self, x: np.float64) -&gt; np.float64:\n    \"\"\"Return the correction values for a given input array `x`.\n\n    Parameters\n    ----------\n    x: npt.NDArray[np.float64]\n        Input array for which correction values will be calculated.\n\n    Returns\n    -------\n    np.float64\n        The correction values calculated for the input array `x`.\n\n    \"\"\"\n    return np.multiply(  # type: ignore[no-any-return]\n        np.power(x, self.aa1),\n        self.bb1,\n    )\n</code></pre>"},{"location":"reference/cssfinder/reports/math.html#cssfinder.reports.math.SlopeProperties.find","title":"find  <code>classmethod</code>","text":"<pre><code>find(data: npt.NDArray[np.float64]) -&gt; Self\n</code></pre> <p>Find the slope properties for a given dataset <code>data</code>.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>NDArray[float64]</code> <p>The dataset for which slope properties will be calculated.</p> required <p>Returns:</p> Type Description <code>SlopeProperties</code> <p>An instance of the SlopeProperties class representing the slope properties of the input data.</p> Source code in <code>cssfinder/reports/math.py</code> <pre><code>@classmethod\ndef find(cls, data: npt.NDArray[np.float64]) -&gt; Self:\n    \"\"\"Find the slope properties for a given dataset `data`.\n\n    Parameters\n    ----------\n    data: npt.NDArray[np.float64]\n        The dataset for which slope properties will be calculated.\n\n    Returns\n    -------\n    SlopeProperties\n        An instance of the SlopeProperties class representing the slope properties\n        of the input data.\n\n    \"\"\"\n    iteration_index: npt.NDArray[np.float64] = data[:, 0]\n    correction_index: npt.NDArray[np.float64] = data[:, 1]\n    correction_value: npt.NDArray[np.float64] = data[int(2 * len(data) / 3) :, 2]\n\n    correction_count = len(data)\n    optimum = find_correction_optimum(data[:, 2])\n\n    r_value = R(correction_value, optimum)\n\n    aa1 = trend(iteration_index, correction_index)\n    bb1 = np.exp(offset(iteration_index, correction_index))\n\n    return cls(correction_count, optimum, r_value, aa1, bb1)\n</code></pre>"},{"location":"reference/cssfinder/reports/math.html#cssfinder.reports.math.SlopeProperties.save_to","title":"save_to","text":"<pre><code>save_to(dest: Path) -&gt; None\n</code></pre> <p>Save properties to file.</p> Source code in <code>cssfinder/reports/math.py</code> <pre><code>def save_to(self, dest: Path) -&gt; None:\n    \"\"\"Save properties to file.\"\"\"\n    with dest.open(\"w\", encoding=\"utf-8\") as file:\n        json.dump(asdict(self), file)\n</code></pre>"},{"location":"reference/cssfinder/reports/math.html#cssfinder.reports.math.cov","title":"cov","text":"<pre><code>cov(\n    array_1: npt.NDArray[np.float64],\n    array_2: npt.NDArray[np.float64],\n) -&gt; np.float64\n</code></pre> <p>Calculate the covariance between two arrays.</p> <p>Parameters:</p> Name Type Description Default <code>array_1</code> <code>ndarray</code> <p>The first array.</p> required <code>array_2</code> <code>ndarray</code> <p>The second array.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The covariance between the two arrays.</p> Notes <p>The covariance is calculated as the mean of the element-wise product of the deviation from the mean of <code>array_1</code> and <code>array_2</code>. In other words, the covariance measures how much two variables change together, and it is a measure of the linear relationship between them.</p> Source code in <code>cssfinder/reports/math.py</code> <pre><code>def cov(\n    array_1: npt.NDArray[np.float64],\n    array_2: npt.NDArray[np.float64],\n) -&gt; np.float64:\n    \"\"\"Calculate the covariance between two arrays.\n\n    Parameters\n    ----------\n    array_1 : numpy.ndarray\n        The first array.\n    array_2 : numpy.ndarray\n        The second array.\n\n    Returns\n    -------\n    float\n        The covariance between the two arrays.\n\n    Notes\n    -----\n    The covariance is calculated as the mean of the element-wise product of\n    the deviation from the mean of `array_1` and `array_2`. In other words,\n    the covariance measures how much two variables change together, and it\n    is a measure of the linear relationship between them.\n\n    \"\"\"\n    return np.mean(  # type: ignore[no-any-return]\n        np.multiply(\n            np.subtract(array_1, np.mean(array_1)),\n            np.subtract(array_2, np.mean(array_2)),\n        ),\n    )\n</code></pre>"},{"location":"reference/cssfinder/reports/math.html#cssfinder.reports.math.trend","title":"trend","text":"<pre><code>trend(\n    array_1: npt.NDArray[np.float64],\n    array_2: npt.NDArray[np.float64],\n) -&gt; np.float64\n</code></pre> <p>Calculate the trend between two arrays.</p> <p>Parameters:</p> Name Type Description Default <code>array_1</code> <code>ndarray</code> <p>The first array.</p> required <code>array_2</code> <code>ndarray</code> <p>The second array.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The trend between the two arrays.</p> Notes <p>The trend is calculated as the covariance between the logarithm of <code>array_1</code> and <code>array_2</code> divided by the covariance between the logarithm of <code>array_1</code> and itself.</p> Source code in <code>cssfinder/reports/math.py</code> <pre><code>def trend(\n    array_1: npt.NDArray[np.float64],\n    array_2: npt.NDArray[np.float64],\n) -&gt; np.float64:\n    \"\"\"Calculate the trend between two arrays.\n\n    Parameters\n    ----------\n    array_1 : numpy.ndarray\n        The first array.\n    array_2 : numpy.ndarray\n        The second array.\n\n    Returns\n    -------\n    float\n        The trend between the two arrays.\n\n    Notes\n    -----\n    The trend is calculated as the covariance between the logarithm of\n    `array_1` and `array_2` divided by the covariance between the logarithm\n    of `array_1` and itself.\n\n    \"\"\"\n    l1a = np.log(array_1)\n    l2a = np.log(array_2)\n\n    return cov(l1a, l2a) / cov(l1a, l1a)\n</code></pre>"},{"location":"reference/cssfinder/reports/math.html#cssfinder.reports.math.offset","title":"offset","text":"<pre><code>offset(\n    array_1: npt.NDArray[np.float64],\n    array_2: npt.NDArray[np.float64],\n) -&gt; np.float64\n</code></pre> <p>Calculate the offset between the two input arrays.</p> <p>Offset is based on their logarithmic means and a decay trend.</p> <p>Parameters:</p> Name Type Description Default <code>array_1</code> <code>ndarray[float64]</code> <p>The first input array.</p> required <code>array_2</code> <code>ndarray[float64]</code> <p>The second input array.</p> required <p>Returns:</p> Type Description <code>float64</code> <p>The calculated offset between the two input arrays.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the input arrays are empty.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; array_1 = np.array([1.0, 2.0, 3.0])\n&gt;&gt;&gt; array_2 = np.array([4.0, 5.0, 6.0])\n&gt;&gt;&gt; offset(array_1, array_2)\n0.01638058574365686\n</code></pre> Source code in <code>cssfinder/reports/math.py</code> <pre><code>def offset(\n    array_1: npt.NDArray[np.float64],\n    array_2: npt.NDArray[np.float64],\n) -&gt; np.float64:\n    \"\"\"Calculate the offset between the two input arrays.\n\n    Offset is based on their logarithmic means and a decay trend.\n\n    Parameters\n    ----------\n    array_1 : numpy.ndarray[np.float64]\n        The first input array.\n    array_2 : numpy.ndarray[np.float64]\n        The second input array.\n\n    Returns\n    -------\n    numpy.float64\n        The calculated offset between the two input arrays.\n\n    Raises\n    ------\n    ValueError\n        If the input arrays are empty.\n\n    Examples\n    --------\n    ```\n    &gt;&gt;&gt; array_1 = np.array([1.0, 2.0, 3.0])\n    &gt;&gt;&gt; array_2 = np.array([4.0, 5.0, 6.0])\n    &gt;&gt;&gt; offset(array_1, array_2)\n    0.01638058574365686\n\n    ```\n\n    \"\"\"\n    array_1_mean = np.mean(np.log(array_1))\n    array_2_mean = np.mean(np.log(array_2))\n    decay_trend = trend(array_1, array_2)\n\n    return array_1_mean - array_2_mean * decay_trend  # type: ignore[no-any-return]\n</code></pre>"},{"location":"reference/cssfinder/reports/math.html#cssfinder.reports.math.find_correction_optimum","title":"find_correction_optimum","text":"<pre><code>find_correction_optimum(\n    values: npt.NDArray[np.float64],\n) -&gt; np.float64\n</code></pre> <p>Find the optimum correction value for a given input array of values.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>ndarray[float64]</code> <p>The input array of values for which to find the optimum correction.</p> required <p>Returns:</p> Type Description <code>float64</code> <p>The optimum correction value for the input array of values.</p> Source code in <code>cssfinder/reports/math.py</code> <pre><code>def find_correction_optimum(values: npt.NDArray[np.float64]) -&gt; np.float64:\n    \"\"\"Find the optimum correction value for a given input array of values.\n\n    Parameters\n    ----------\n    values : numpy.ndarray[np.float64]\n        The input array of values for which to find the optimum correction.\n\n    Returns\n    -------\n    numpy.float64\n        The optimum correction value for the input array of values.\n\n    \"\"\"\n    upper_half = values[len(values) // 2 :]\n\n    optimum = upper_half[-1] - 1e-6\n    step1 = optimum / 10000\n\n    while R(upper_half, optimum - step1) &gt; R(upper_half, optimum) and optimum &gt; 0:\n        optimum = optimum - step1\n\n    return optimum  # type: ignore[no-any-return]\n</code></pre>"},{"location":"reference/cssfinder/reports/math.html#cssfinder.reports.math.R","title":"R","text":"<pre><code>R(\n    values: npt.NDArray[np.float64], a: np.float64\n) -&gt; np.float64\n</code></pre> <p>Calculate the R value for a given input array of values and a correction factor.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>ndarray[float64]</code> <p>The input array of values for which to calculate the R value.</p> required <code>a</code> <code>float64</code> <p>The correction factor to use when calculating the R value.</p> required <p>Returns:</p> Type Description <code>float64</code> <p>The R value for the input array of values and correction factor.</p> Source code in <code>cssfinder/reports/math.py</code> <pre><code>def R(values: npt.NDArray[np.float64], a: np.float64) -&gt; np.float64:  # noqa: N802\n    \"\"\"Calculate the R value for a given input array of values and a correction factor.\n\n    Parameters\n    ----------\n    values : numpy.ndarray[np.float64]\n        The input array of values for which to calculate the R value.\n    a : numpy.float64\n        The correction factor to use when calculating the R value.\n\n    Returns\n    -------\n    numpy.float64\n        The R value for the input array of values and correction factor.\n\n    \"\"\"\n    ll1 = np.divide(1.0, np.subtract(values, a))\n    length = len(values)\n    indexes = _indexes(length)\n\n    aa1: np.float64 = np.mean(np.multiply(ll1, indexes)) - np.mean(ll1) * np.mean(\n        indexes,\n    )\n    aa2: np.float64 = np.sqrt(\n        (np.mean(np.square(ll1)) - np.square(np.mean(ll1))) * _r_indexes(length),\n    )\n\n    return np.divide(aa1, aa2, dtype=np.float64)  # type: ignore[no-any-return]\n</code></pre>"},{"location":"reference/cssfinder/reports/math.html#cssfinder.reports.math.display_short_report","title":"display_short_report","text":"<pre><code>display_short_report(data: npt.NDArray[np.float64]) -&gt; None\n</code></pre> <p>Display short report.</p> Source code in <code>cssfinder/reports/math.py</code> <pre><code>def display_short_report(data: npt.NDArray[np.float64]) -&gt; None:\n    \"\"\"Display short report.\"\"\"\n    slope_properties = SlopeProperties.find(data)\n\n    expr = f\"corrections = trail ^ {slope_properties.aa1} * {slope_properties.bb1}\"\n\n    sys.stdout.write(\n        \"Basing on decay, the squared HS distance is estimated to be \"\n        f\"{slope_properties.optimum} (R={slope_properties.r_value})\\n\",\n    )\n    sys.stdout.write(\n        f\"The dependence between correction and trail is approximately: {expr}\\n\",\n    )\n</code></pre>"},{"location":"reference/cssfinder/reports/pdf.html","title":"pdf","text":""},{"location":"reference/cssfinder/reports/pdf.html#cssfinder.reports.pdf","title":"pdf","text":"<p>Renderer implementation outputting PDF file.</p>"},{"location":"reference/cssfinder/reports/pdf.html#cssfinder.reports.pdf.WEasyPrintNotAvailableError","title":"WEasyPrintNotAvailableError","text":"<p>             Bases: <code>Exception</code></p> <p>Error raised on Mac OS when attempting to generate PDF report.</p> Source code in <code>cssfinder/reports/pdf.py</code> <pre><code>class WEasyPrintNotAvailableError(Exception):\n    \"\"\"Error raised on Mac OS when attempting to generate PDF report.\"\"\"\n\n    def __init__(self) -&gt; None:\n        super().__init__(WEASYPRINT_NOT_AVAILABLE)\n</code></pre>"},{"location":"reference/cssfinder/reports/pdf.html#cssfinder.reports.pdf.weasyprint","title":"weasyprint","text":"<p>Dummy class for Mac OS where weasyprint fails to import.</p> Source code in <code>cssfinder/reports/pdf.py</code> <pre><code>class weasyprint:  # type: ignore[no-redef] # noqa: N801\n    \"\"\"Dummy class for Mac OS where weasyprint fails to import.\"\"\"\n\n    def HTML(*_a: Any, **__kw: Any) -&gt; Any:  # noqa: N802\n        \"\"\"Raise exception on Mac OS.\"\"\"\n        raise WEasyPrintNotAvailableError\n</code></pre>"},{"location":"reference/cssfinder/reports/pdf.html#cssfinder.reports.pdf.weasyprint.HTML","title":"HTML","text":"<pre><code>HTML(*_a: Any, **__kw: Any) -&gt; Any\n</code></pre> <p>Raise exception on Mac OS.</p> Source code in <code>cssfinder/reports/pdf.py</code> <pre><code>def HTML(*_a: Any, **__kw: Any) -&gt; Any:  # noqa: N802\n    \"\"\"Raise exception on Mac OS.\"\"\"\n    raise WEasyPrintNotAvailableError\n</code></pre>"},{"location":"reference/cssfinder/reports/pdf.html#cssfinder.reports.pdf.PDFRenderer","title":"PDFRenderer","text":"<p>             Bases: <code>HTMLRenderer</code></p> <p>Renderer implementation outputting PDF files content.</p> Source code in <code>cssfinder/reports/pdf.py</code> <pre><code>class PDFRenderer(HTMLRenderer):\n    \"\"\"Renderer implementation outputting PDF files content.\"\"\"\n\n    def render(self) -&gt; Report:\n        \"\"\"Generate report content.\"\"\"\n        report = super().render()\n        return Report(\n            weasyprint.HTML(string=report.content.decode(\"utf-8\")).write_pdf(),\n            ReportType.PDF,\n            self.ctx.task.task_output_directory / \"report.pdf\",\n        )\n</code></pre>"},{"location":"reference/cssfinder/reports/pdf.html#cssfinder.reports.pdf.PDFRenderer.render","title":"render","text":"<pre><code>render() -&gt; Report\n</code></pre> <p>Generate report content.</p> Source code in <code>cssfinder/reports/pdf.py</code> <pre><code>def render(self) -&gt; Report:\n    \"\"\"Generate report content.\"\"\"\n    report = super().render()\n    return Report(\n        weasyprint.HTML(string=report.content.decode(\"utf-8\")).write_pdf(),\n        ReportType.PDF,\n        self.ctx.task.task_output_directory / \"report.pdf\",\n    )\n</code></pre>"},{"location":"reference/cssfinder/reports/plotting.html","title":"plotting","text":""},{"location":"reference/cssfinder/reports/plotting.html#cssfinder.reports.plotting","title":"plotting","text":"<p>Utilities for plot creation.</p>"},{"location":"reference/cssfinder/reports/plotting.html#cssfinder.reports.plotting.Plotter","title":"Plotter","text":"<p>Plot creator class.</p> Source code in <code>cssfinder/reports/plotting.py</code> <pre><code>class Plotter:\n    \"\"\"Plot creator class.\"\"\"\n\n    def __init__(self, corrections: pd.DataFrame) -&gt; None:\n        \"\"\"Initialize plot creator.\n\n        Parameters\n        ----------\n        corrections : pandas.DataFrame\n            A DataFrame containing the distance decay corrections. The DataFrame\n            should have an \"index\" column and a \"value\" column.\n\n        \"\"\"\n        self.corrections = corrections\n        self.slope_props = SlopeProperties.find(self.corrections.to_numpy())\n\n    def plot_corrections(self, axes: Optional[plt.Axes] = None) -&gt; Plot:\n        \"\"\"Create a plot of distance decay corrections.\n\n        Parameters\n        ----------\n        axes : Optional[plt.Axes], optional\n            Optional axes object to reuse, when none is given, new figure is created,\n            by default None\n\n        Returns\n        -------\n        Plot\n            Plot object containing plot axes.\n\n        Notes\n        -----\n        The function creates a line plot of the distance decay corrections,\n        with the \"index\" column on the x-axis and the \"value\" column on the\n        y-axis. The plot includes a grid and axis labels, and a title indicating\n        that it shows distance decay.\n\n        The function returns the Plot object granting access to axes for the created\n        plot, which can be further customized or saved using the methods of the\n        matplotlib API.\n\n        \"\"\"\n        if axes is None:\n            plt.figure()\n            axes = plt.subplot()\n\n        axes.plot(\n            self.corrections[[\"index\"]],\n            self.corrections[[\"value\"]],\n            label=\"correction\",\n        )\n        axes.hlines(\n            [self.slope_props.optimum],\n            xmin=-10,\n            xmax=self.corrections[[\"index\"]].max(),\n            color=\"red\",\n            label=\"H-S distance\",\n            linestyles=\"dashed\",\n        )\n        axes.grid(visible=True)\n\n        axes.set_xlabel(\"Correction index\")\n        axes.set_ylabel(\"Correction value\")\n\n        axes.set_title(\"Distance decay\")\n        plt.legend(loc=\"upper right\")\n\n        return Plot(axes)\n\n    def plot_corrections_inverse(self, axes: Optional[plt.Axes] = None) -&gt; Plot:\n        \"\"\"Create a plot offsets inverse of distance decay corrections.\n\n        Parameters\n        ----------\n        axes : Optional[plt.Axes], optional\n            Optional axes object to reuse, when none is given, new figure is created,\n            by default None\n\n        Returns\n        -------\n        Plot\n            Plot object containing plot axes.\n\n        Notes\n        -----\n        The function creates a line plot of the inverse of distance decay corrections,\n        with the \"index\" column on the x-axis and the \"value\" column inverse on the\n        y-axis. The plot includes a grid and axis labels, and a title indicating\n        that it shows distance decay.\n\n        The function returns the Plot object granting access to axes for the created\n        plot, which can be further customized or saved using the methods of the\n        matplotlib API.\n\n        \"\"\"\n        if axes is None:\n            plt.figure()\n            axes = plt.subplot()\n\n        axes.plot(\n            self.corrections[[\"index\"]],\n            1 / (self.corrections[[\"value\"]] - self.slope_props.optimum),\n        )\n        axes.grid(visible=True)\n\n        axes.set_xlabel(\"Correction index\")\n        axes.set_ylabel(\"Inverse correction value with offset\")\n\n        axes.set_title(\"Inverse distance decay with offset\")\n\n        return Plot(axes)\n\n    def plot_iteration(self, axes: Optional[plt.Axes] = None) -&gt; Plot:\n        \"\"\"Create a plot of iteration linear corrections.\n\n        Returns\n        -------\n        matplotlib.axes.Axes\n            The axes object for the created plot.\n\n        Notes\n        -----\n        The function creates a line plot of the iteration linear corrections,\n        with the \"iteration\" column on the x-axis and the correction values on\n        the y-axis. The correction values are calculated using the\n        `SlopeProperties` class, which takes the \"index\" column as input and\n        returns the corresponding correction values for each iteration.\n\n        The plot includes a grid and axis labels, but no title. The function returns\n        the axes object for the created plot, which can be further customized or\n        saved using the methods of the matplotlib API.\n\n        \"\"\"\n        if axes is None:\n            plt.figure()\n            axes = plt.subplot()\n\n        axes.grid(visible=True)\n\n        axes.set_xlabel(\"Iteration index\")\n        axes.set_ylabel(\"Correction index\")\n\n        axes.set_title(\"Total number of correction\")\n\n        axes.plot(\n            self.corrections[[\"iteration\"]],\n            self.corrections[[\"index\"]],\n        )\n\n        return Plot(axes)\n</code></pre>"},{"location":"reference/cssfinder/reports/plotting.html#cssfinder.reports.plotting.Plotter.__init__","title":"__init__","text":"<pre><code>__init__(corrections: pd.DataFrame) -&gt; None\n</code></pre> <p>Initialize plot creator.</p> <p>Parameters:</p> Name Type Description Default <code>corrections</code> <code>DataFrame</code> <p>A DataFrame containing the distance decay corrections. The DataFrame should have an \"index\" column and a \"value\" column.</p> required Source code in <code>cssfinder/reports/plotting.py</code> <pre><code>def __init__(self, corrections: pd.DataFrame) -&gt; None:\n    \"\"\"Initialize plot creator.\n\n    Parameters\n    ----------\n    corrections : pandas.DataFrame\n        A DataFrame containing the distance decay corrections. The DataFrame\n        should have an \"index\" column and a \"value\" column.\n\n    \"\"\"\n    self.corrections = corrections\n    self.slope_props = SlopeProperties.find(self.corrections.to_numpy())\n</code></pre>"},{"location":"reference/cssfinder/reports/plotting.html#cssfinder.reports.plotting.Plotter.plot_corrections","title":"plot_corrections","text":"<pre><code>plot_corrections(axes: Optional[plt.Axes] = None) -&gt; Plot\n</code></pre> <p>Create a plot of distance decay corrections.</p> <p>Parameters:</p> Name Type Description Default <code>axes</code> <code>Optional[Axes]</code> <p>Optional axes object to reuse, when none is given, new figure is created, by default None</p> <code>None</code> <p>Returns:</p> Type Description <code>Plot</code> <p>Plot object containing plot axes.</p> Notes <p>The function creates a line plot of the distance decay corrections, with the \"index\" column on the x-axis and the \"value\" column on the y-axis. The plot includes a grid and axis labels, and a title indicating that it shows distance decay.</p> <p>The function returns the Plot object granting access to axes for the created plot, which can be further customized or saved using the methods of the matplotlib API.</p> Source code in <code>cssfinder/reports/plotting.py</code> <pre><code>def plot_corrections(self, axes: Optional[plt.Axes] = None) -&gt; Plot:\n    \"\"\"Create a plot of distance decay corrections.\n\n    Parameters\n    ----------\n    axes : Optional[plt.Axes], optional\n        Optional axes object to reuse, when none is given, new figure is created,\n        by default None\n\n    Returns\n    -------\n    Plot\n        Plot object containing plot axes.\n\n    Notes\n    -----\n    The function creates a line plot of the distance decay corrections,\n    with the \"index\" column on the x-axis and the \"value\" column on the\n    y-axis. The plot includes a grid and axis labels, and a title indicating\n    that it shows distance decay.\n\n    The function returns the Plot object granting access to axes for the created\n    plot, which can be further customized or saved using the methods of the\n    matplotlib API.\n\n    \"\"\"\n    if axes is None:\n        plt.figure()\n        axes = plt.subplot()\n\n    axes.plot(\n        self.corrections[[\"index\"]],\n        self.corrections[[\"value\"]],\n        label=\"correction\",\n    )\n    axes.hlines(\n        [self.slope_props.optimum],\n        xmin=-10,\n        xmax=self.corrections[[\"index\"]].max(),\n        color=\"red\",\n        label=\"H-S distance\",\n        linestyles=\"dashed\",\n    )\n    axes.grid(visible=True)\n\n    axes.set_xlabel(\"Correction index\")\n    axes.set_ylabel(\"Correction value\")\n\n    axes.set_title(\"Distance decay\")\n    plt.legend(loc=\"upper right\")\n\n    return Plot(axes)\n</code></pre>"},{"location":"reference/cssfinder/reports/plotting.html#cssfinder.reports.plotting.Plotter.plot_corrections_inverse","title":"plot_corrections_inverse","text":"<pre><code>plot_corrections_inverse(\n    axes: Optional[plt.Axes] = None,\n) -&gt; Plot\n</code></pre> <p>Create a plot offsets inverse of distance decay corrections.</p> <p>Parameters:</p> Name Type Description Default <code>axes</code> <code>Optional[Axes]</code> <p>Optional axes object to reuse, when none is given, new figure is created, by default None</p> <code>None</code> <p>Returns:</p> Type Description <code>Plot</code> <p>Plot object containing plot axes.</p> Notes <p>The function creates a line plot of the inverse of distance decay corrections, with the \"index\" column on the x-axis and the \"value\" column inverse on the y-axis. The plot includes a grid and axis labels, and a title indicating that it shows distance decay.</p> <p>The function returns the Plot object granting access to axes for the created plot, which can be further customized or saved using the methods of the matplotlib API.</p> Source code in <code>cssfinder/reports/plotting.py</code> <pre><code>def plot_corrections_inverse(self, axes: Optional[plt.Axes] = None) -&gt; Plot:\n    \"\"\"Create a plot offsets inverse of distance decay corrections.\n\n    Parameters\n    ----------\n    axes : Optional[plt.Axes], optional\n        Optional axes object to reuse, when none is given, new figure is created,\n        by default None\n\n    Returns\n    -------\n    Plot\n        Plot object containing plot axes.\n\n    Notes\n    -----\n    The function creates a line plot of the inverse of distance decay corrections,\n    with the \"index\" column on the x-axis and the \"value\" column inverse on the\n    y-axis. The plot includes a grid and axis labels, and a title indicating\n    that it shows distance decay.\n\n    The function returns the Plot object granting access to axes for the created\n    plot, which can be further customized or saved using the methods of the\n    matplotlib API.\n\n    \"\"\"\n    if axes is None:\n        plt.figure()\n        axes = plt.subplot()\n\n    axes.plot(\n        self.corrections[[\"index\"]],\n        1 / (self.corrections[[\"value\"]] - self.slope_props.optimum),\n    )\n    axes.grid(visible=True)\n\n    axes.set_xlabel(\"Correction index\")\n    axes.set_ylabel(\"Inverse correction value with offset\")\n\n    axes.set_title(\"Inverse distance decay with offset\")\n\n    return Plot(axes)\n</code></pre>"},{"location":"reference/cssfinder/reports/plotting.html#cssfinder.reports.plotting.Plotter.plot_iteration","title":"plot_iteration","text":"<pre><code>plot_iteration(axes: Optional[plt.Axes] = None) -&gt; Plot\n</code></pre> <p>Create a plot of iteration linear corrections.</p> <p>Returns:</p> Type Description <code>Axes</code> <p>The axes object for the created plot.</p> Notes <p>The function creates a line plot of the iteration linear corrections, with the \"iteration\" column on the x-axis and the correction values on the y-axis. The correction values are calculated using the <code>SlopeProperties</code> class, which takes the \"index\" column as input and returns the corresponding correction values for each iteration.</p> <p>The plot includes a grid and axis labels, but no title. The function returns the axes object for the created plot, which can be further customized or saved using the methods of the matplotlib API.</p> Source code in <code>cssfinder/reports/plotting.py</code> <pre><code>def plot_iteration(self, axes: Optional[plt.Axes] = None) -&gt; Plot:\n    \"\"\"Create a plot of iteration linear corrections.\n\n    Returns\n    -------\n    matplotlib.axes.Axes\n        The axes object for the created plot.\n\n    Notes\n    -----\n    The function creates a line plot of the iteration linear corrections,\n    with the \"iteration\" column on the x-axis and the correction values on\n    the y-axis. The correction values are calculated using the\n    `SlopeProperties` class, which takes the \"index\" column as input and\n    returns the corresponding correction values for each iteration.\n\n    The plot includes a grid and axis labels, but no title. The function returns\n    the axes object for the created plot, which can be further customized or\n    saved using the methods of the matplotlib API.\n\n    \"\"\"\n    if axes is None:\n        plt.figure()\n        axes = plt.subplot()\n\n    axes.grid(visible=True)\n\n    axes.set_xlabel(\"Iteration index\")\n    axes.set_ylabel(\"Correction index\")\n\n    axes.set_title(\"Total number of correction\")\n\n    axes.plot(\n        self.corrections[[\"iteration\"]],\n        self.corrections[[\"index\"]],\n    )\n\n    return Plot(axes)\n</code></pre>"},{"location":"reference/cssfinder/reports/plotting.html#cssfinder.reports.plotting.Plot","title":"Plot  <code>dataclass</code>","text":"<p>Container class for plots generated with Plotter class.</p> Source code in <code>cssfinder/reports/plotting.py</code> <pre><code>@dataclass\nclass Plot:\n    \"\"\"Container class for plots generated with Plotter class.\"\"\"\n\n    axes: plt.Axes\n\n    @property\n    def figure(self) -&gt; fig.Figure:\n        \"\"\"Axes figure.\"\"\"\n        return self.axes.figure\n\n    def configure(self, width: int = 8, height: int = 6) -&gt; Self:\n        \"\"\"Set the size of the current figure.\n\n        Parameters\n        ----------\n        width : int, optional\n            The width of the figure in inches. Default is 10.\n        height : int, optional\n            The height of the figure in inches. Default is 10.\n\n        Returns\n        -------\n        Self\n            Returns the instance of the object to allow for method chaining.\n\n        \"\"\"\n        self.axes.figure.set_figwidth(width)\n        self.axes.figure.set_figheight(height)\n        return self\n\n    def save_plot(\n        self,\n        dest: Path | BytesIO,\n        dpi: int = 300,\n        file_format: Optional[str] = None,\n    ) -&gt; None:\n        \"\"\"Save figure to file.\n\n        Parameters\n        ----------\n        dest : Path | BytesIO\n            Path to file or writable BytesIO.\n        dpi : int, optional\n            Plot output dpi, by default 150\n        file_format : Optional[str], optional\n            File format, when None, deduced from file path, by default None\n\n        \"\"\"\n        self.axes.figure.savefig(\n            dest.as_posix() if isinstance(dest, Path) else dest,\n            dpi=dpi,\n            format=file_format,\n        )\n\n    def base64_encode(self, file_format: Optional[str] = None) -&gt; str:\n        \"\"\"Encode plot as base64 string.\n\n        Parameters\n        ----------\n        file_format : Optional[str], optional\n            Preferred file format, by default None\n\n        Returns\n        -------\n        str\n            Encoded image.\n\n        \"\"\"\n        io = BytesIO()\n        self.save_plot(io, file_format=file_format)\n        io.seek(0)\n\n        return base64.b64encode(io.read()).decode(\"utf-8\")\n</code></pre>"},{"location":"reference/cssfinder/reports/plotting.html#cssfinder.reports.plotting.Plot.figure","title":"figure  <code>property</code>","text":"<pre><code>figure: Figure\n</code></pre> <p>Axes figure.</p>"},{"location":"reference/cssfinder/reports/plotting.html#cssfinder.reports.plotting.Plot.configure","title":"configure","text":"<pre><code>configure(width: int = 8, height: int = 6) -&gt; Self\n</code></pre> <p>Set the size of the current figure.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>The width of the figure in inches. Default is 10.</p> <code>8</code> <code>height</code> <code>int</code> <p>The height of the figure in inches. Default is 10.</p> <code>6</code> <p>Returns:</p> Type Description <code>Self</code> <p>Returns the instance of the object to allow for method chaining.</p> Source code in <code>cssfinder/reports/plotting.py</code> <pre><code>def configure(self, width: int = 8, height: int = 6) -&gt; Self:\n    \"\"\"Set the size of the current figure.\n\n    Parameters\n    ----------\n    width : int, optional\n        The width of the figure in inches. Default is 10.\n    height : int, optional\n        The height of the figure in inches. Default is 10.\n\n    Returns\n    -------\n    Self\n        Returns the instance of the object to allow for method chaining.\n\n    \"\"\"\n    self.axes.figure.set_figwidth(width)\n    self.axes.figure.set_figheight(height)\n    return self\n</code></pre>"},{"location":"reference/cssfinder/reports/plotting.html#cssfinder.reports.plotting.Plot.save_plot","title":"save_plot","text":"<pre><code>save_plot(\n    dest: Path | BytesIO,\n    dpi: int = 300,\n    file_format: Optional[str] = None,\n) -&gt; None\n</code></pre> <p>Save figure to file.</p> <p>Parameters:</p> Name Type Description Default <code>dest</code> <code>Path | BytesIO</code> <p>Path to file or writable BytesIO.</p> required <code>dpi</code> <code>int</code> <p>Plot output dpi, by default 150</p> <code>300</code> <code>file_format</code> <code>Optional[str]</code> <p>File format, when None, deduced from file path, by default None</p> <code>None</code> Source code in <code>cssfinder/reports/plotting.py</code> <pre><code>def save_plot(\n    self,\n    dest: Path | BytesIO,\n    dpi: int = 300,\n    file_format: Optional[str] = None,\n) -&gt; None:\n    \"\"\"Save figure to file.\n\n    Parameters\n    ----------\n    dest : Path | BytesIO\n        Path to file or writable BytesIO.\n    dpi : int, optional\n        Plot output dpi, by default 150\n    file_format : Optional[str], optional\n        File format, when None, deduced from file path, by default None\n\n    \"\"\"\n    self.axes.figure.savefig(\n        dest.as_posix() if isinstance(dest, Path) else dest,\n        dpi=dpi,\n        format=file_format,\n    )\n</code></pre>"},{"location":"reference/cssfinder/reports/plotting.html#cssfinder.reports.plotting.Plot.base64_encode","title":"base64_encode","text":"<pre><code>base64_encode(file_format: Optional[str] = None) -&gt; str\n</code></pre> <p>Encode plot as base64 string.</p> <p>Parameters:</p> Name Type Description Default <code>file_format</code> <code>Optional[str]</code> <p>Preferred file format, by default None</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>Encoded image.</p> Source code in <code>cssfinder/reports/plotting.py</code> <pre><code>def base64_encode(self, file_format: Optional[str] = None) -&gt; str:\n    \"\"\"Encode plot as base64 string.\n\n    Parameters\n    ----------\n    file_format : Optional[str], optional\n        Preferred file format, by default None\n\n    Returns\n    -------\n    str\n        Encoded image.\n\n    \"\"\"\n    io = BytesIO()\n    self.save_plot(io, file_format=file_format)\n    io.seek(0)\n\n    return base64.b64encode(io.read()).decode(\"utf-8\")\n</code></pre>"},{"location":"reference/cssfinder/reports/renderer.html","title":"renderer","text":""},{"location":"reference/cssfinder/reports/renderer.html#cssfinder.reports.renderer","title":"renderer","text":"<p>Abstract base class for implementing report renderers.</p>"},{"location":"reference/cssfinder/reports/renderer.html#cssfinder.reports.renderer.ReportType","title":"ReportType","text":"<p>             Bases: <code>Enum</code></p> <p>Possible report types.</p> Source code in <code>cssfinder/reports/renderer.py</code> <pre><code>class ReportType(Enum):\n    \"\"\"Possible report types.\"\"\"\n\n    HTML = \"html\"\n    PDF = \"pdf\"\n    ARCHIVE = \"zip\"\n    TXT = \"txt\"\n    JSON = \"json\"\n\n    def get_file_name(self) -&gt; str:\n        \"\"\"Return default file name for specific type of report.\"\"\"\n        return f\"report.{self.value}\"\n</code></pre>"},{"location":"reference/cssfinder/reports/renderer.html#cssfinder.reports.renderer.ReportType.get_file_name","title":"get_file_name","text":"<pre><code>get_file_name() -&gt; str\n</code></pre> <p>Return default file name for specific type of report.</p> Source code in <code>cssfinder/reports/renderer.py</code> <pre><code>def get_file_name(self) -&gt; str:\n    \"\"\"Return default file name for specific type of report.\"\"\"\n    return f\"report.{self.value}\"\n</code></pre>"},{"location":"reference/cssfinder/reports/renderer.html#cssfinder.reports.renderer.Renderer","title":"Renderer","text":"<p>             Bases: <code>ABC</code></p> <p>Base class for creating report renderers.</p> Source code in <code>cssfinder/reports/renderer.py</code> <pre><code>class Renderer(ABC):\n    \"\"\"Base class for creating report renderers.\"\"\"\n\n    def __init__(self, props: SlopeProperties, plots: list[Plot], task: Task) -&gt; None:\n        self.ctx = Ctx(props, plots, task)\n\n    @abstractmethod\n    def render(self) -&gt; Report:\n        \"\"\"Render report.\n\n        Returns\n        -------\n        RenderedReport\n            Report handle providing interface for saving report.\n\n        \"\"\"\n</code></pre>"},{"location":"reference/cssfinder/reports/renderer.html#cssfinder.reports.renderer.Renderer.render","title":"render  <code>abstractmethod</code>","text":"<pre><code>render() -&gt; Report\n</code></pre> <p>Render report.</p> <p>Returns:</p> Type Description <code>RenderedReport</code> <p>Report handle providing interface for saving report.</p> Source code in <code>cssfinder/reports/renderer.py</code> <pre><code>@abstractmethod\ndef render(self) -&gt; Report:\n    \"\"\"Render report.\n\n    Returns\n    -------\n    RenderedReport\n        Report handle providing interface for saving report.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/cssfinder/reports/renderer.html#cssfinder.reports.renderer.Ctx","title":"Ctx  <code>dataclass</code>","text":"<p>Report template rendering context.</p> Source code in <code>cssfinder/reports/renderer.py</code> <pre><code>@dataclass\nclass Ctx:\n    \"\"\"Report template rendering context.\"\"\"\n\n    props: SlopeProperties\n    plots: list[Plot]\n    task: Task\n\n    @property\n    def title(self) -&gt; str:\n        \"\"\"Document title.\"\"\"\n        return f\"Report {self.task.project_directory.name} / {self.task.task_name}\"\n\n    @property\n    def meta(self) -&gt; OrderedDict:\n        \"\"\"Return project metadata.\"\"\"\n        return OrderedDict(\n            {\n                \"Project name\": self.task.project.meta.name,\n                \"Task name\": self.task.task_name,\n                \"Author\": self.task.project.meta.author,\n                \"Email\": self.task.project.meta.email,\n                \"Description\": self.task.project.meta.description,\n                \"Version\": self.task.project.meta.version,\n            },\n        )\n\n    @property\n    def math_props(self) -&gt; OrderedDict:\n        \"\"\"Return mathematical properties.\"\"\"\n        return OrderedDict(\n            {\n                \"Correction count\": f\"{self.props.correction_count}\",\n                \"Hilbert-Schmidt distance\": f\"{self.props.optimum:.3f}\",\n                \"Sample correlation coefficient\": f\"{self.props.r_value:.3f}\",\n                \"Offset (optimum)\": f\"{self.props.optimum:.3f}\",\n                \"Trend (aa1)\": f\"{self.props.aa1:.3f}\",\n                \"Exp Offset (bb1)\": f\"{self.props.bb1:.3f}\",\n            },\n        )\n</code></pre>"},{"location":"reference/cssfinder/reports/renderer.html#cssfinder.reports.renderer.Ctx.title","title":"title  <code>property</code>","text":"<pre><code>title: str\n</code></pre> <p>Document title.</p>"},{"location":"reference/cssfinder/reports/renderer.html#cssfinder.reports.renderer.Ctx.meta","title":"meta  <code>property</code>","text":"<pre><code>meta: OrderedDict\n</code></pre> <p>Return project metadata.</p>"},{"location":"reference/cssfinder/reports/renderer.html#cssfinder.reports.renderer.Ctx.math_props","title":"math_props  <code>property</code>","text":"<pre><code>math_props: OrderedDict\n</code></pre> <p>Return mathematical properties.</p>"},{"location":"reference/cssfinder/reports/renderer.html#cssfinder.reports.renderer.Report","title":"Report  <code>dataclass</code>","text":"<p>Container for rendered report.</p> Source code in <code>cssfinder/reports/renderer.py</code> <pre><code>@dataclass\nclass Report:\n    \"\"\"Container for rendered report.\"\"\"\n\n    content: bytes\n    report_type: ReportType\n    default_dest: Optional[Path] = None\n\n    def get_default_dest(self) -&gt; Path:\n        \"\"\"Return path to default destination of report file.\"\"\"\n        if self.default_dest is not None:\n            return self.default_dest\n\n        return Path.cwd() / self.report_type.get_file_name()\n\n    def save_default(self) -&gt; None:\n        \"\"\"Save file to default destination.\"\"\"\n        if self.default_dest is None:\n            raise DefaultDestinationNotSpecifiedError(self.report_type)\n        self.save_to(self.default_dest)\n\n    def save_to(self, dest: Path) -&gt; None:\n        \"\"\"Save report to a file.\n\n        Parameters\n        ----------\n        dest : Path\n            Path to destination file.\n\n        \"\"\"\n        dest.write_bytes(self.content)\n</code></pre>"},{"location":"reference/cssfinder/reports/renderer.html#cssfinder.reports.renderer.Report.get_default_dest","title":"get_default_dest","text":"<pre><code>get_default_dest() -&gt; Path\n</code></pre> <p>Return path to default destination of report file.</p> Source code in <code>cssfinder/reports/renderer.py</code> <pre><code>def get_default_dest(self) -&gt; Path:\n    \"\"\"Return path to default destination of report file.\"\"\"\n    if self.default_dest is not None:\n        return self.default_dest\n\n    return Path.cwd() / self.report_type.get_file_name()\n</code></pre>"},{"location":"reference/cssfinder/reports/renderer.html#cssfinder.reports.renderer.Report.save_default","title":"save_default","text":"<pre><code>save_default() -&gt; None\n</code></pre> <p>Save file to default destination.</p> Source code in <code>cssfinder/reports/renderer.py</code> <pre><code>def save_default(self) -&gt; None:\n    \"\"\"Save file to default destination.\"\"\"\n    if self.default_dest is None:\n        raise DefaultDestinationNotSpecifiedError(self.report_type)\n    self.save_to(self.default_dest)\n</code></pre>"},{"location":"reference/cssfinder/reports/renderer.html#cssfinder.reports.renderer.Report.save_to","title":"save_to","text":"<pre><code>save_to(dest: Path) -&gt; None\n</code></pre> <p>Save report to a file.</p> <p>Parameters:</p> Name Type Description Default <code>dest</code> <code>Path</code> <p>Path to destination file.</p> required Source code in <code>cssfinder/reports/renderer.py</code> <pre><code>def save_to(self, dest: Path) -&gt; None:\n    \"\"\"Save report to a file.\n\n    Parameters\n    ----------\n    dest : Path\n        Path to destination file.\n\n    \"\"\"\n    dest.write_bytes(self.content)\n</code></pre>"},{"location":"reference/cssfinder/reports/renderer.html#cssfinder.reports.renderer.DefaultDestinationNotSpecifiedError","title":"DefaultDestinationNotSpecifiedError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when save_default() was called on Report object with no default_dest.</p> Source code in <code>cssfinder/reports/renderer.py</code> <pre><code>class DefaultDestinationNotSpecifiedError(Exception):\n    \"\"\"Raised when save_default() was called on Report object with no default_dest.\"\"\"\n\n    def __init__(self, report_type: ReportType) -&gt; None:\n        super().__init__(\n            f\"Default destination for report object of type {report_type.name!r} \"\n            \"was not specified.\",\n        )\n</code></pre>"},{"location":"reference/cssfinder/reports/txt.html","title":"txt","text":""},{"location":"reference/cssfinder/reports/txt.html#cssfinder.reports.txt","title":"txt","text":"<p>Text based report renderer.</p>"},{"location":"usage/00_installation_guide.html","title":"Installation Guide","text":"<p>Make sure you have Python installed. CSSFinder is compatible with Python 3.8 up to 3.11. Python release files can be found on the official Python website.</p> <p>Add Python to Path</p> <p>Make sure to  select <code>Add Python to PATH</code> during installation of Python interpreter. After installation is complete, to check if Python was correctly added to system Path, open a new terminal and run following command:</p> <pre><code>python --version\n</code></pre> <p>Output should look similar to this:</p> <pre><code>Python 3.X.Y\n</code></pre> <p>Where <code>3.X.Y</code> is the version of Python you have installed.</p>"},{"location":"usage/00_installation_guide.html#global-installation-quick","title":"Global installation (quick)","text":"LinuxWindows <p>To install CSSFinder globally, run following command:</p> <pre><code>pip install cssfinder\n</code></pre> <p>Tip</p> <p>On some Linux distributions, especially older ones, you may need to use <code>pip3</code> instead of <code>pip</code>.</p> <p>To install CSSFinder globally, run following command:</p> <pre><code>pip install cssfinder\n</code></pre>"},{"location":"usage/00_installation_guide.html#virtual-environment-installation-recommended","title":"Virtual environment installation (recommended)","text":"LinuxWindows <p>To create a new virtual environment, <code>venv</code> module must be available for your Python interpreter. Some of linux distributions may require to install additional package to make this module available.</p> <p>After <code>venv</code> module is available, create a new virtual environment by running:</p> <pre><code>python -m venv cssfinder-env\n</code></pre> <p>Tip</p> <p>On some Linux distributions, especially older ones, you may need to use <code>python3</code> instead of <code>python</code>.</p> <p>Activate the virtual environment:</p> <pre><code>source cssfinder-env/bin/activate\n</code></pre> <p>Install CSSFinder:</p> <pre><code>pip install cssfinder\n</code></pre> <p>To create a new virtual environment, run following command:</p> <pre><code>python -m venv cssfinder-env\n</code></pre> <p>Activate the virtual environment:</p> <pre><code>.\\cssfinder-env\\scripts\\activate\n</code></pre> <p>Install CSSFinder:</p> <pre><code>pip install cssfinder\n</code></pre> <p>PDF export on Windows</p> <p>CSSFinder can export PDF reports (and other formats too), but it uses <code>weasyprint</code> for that and <code>weasyprint</code> relies on <code>GTK3</code>. Unfortunately it is quite hard to get <code>GTK3</code> going on windows and <code>weasyprint</code> requires it to work. Therefore you must handle installation yourself. Here you can find official guidelines from <code>weasyprint</code>. This repository may also help. Alternatively you can use WSL to install and run CSSFinder, as its seamless to do that.</p> <p>Its worth mentioning that other formats are not affected by this issue.</p> <p>With virtual environment approach you will have to activate it every time you open new terminal and want to use CSSFinder, as packages installed are not available outside of virtual environment. This approach allows you to avoid conflicts with other software.</p>"},{"location":"usage/00_installation_guide.html#backend-installation","title":"Backend installation","text":"<p><code>cssfinder</code> package itself does not contain implementations of algorithms. Those are shipped in packages called backends. Currently <code>cssfinder</code> supports two backend packages: <code>cssfinder-backend-numpy</code> and <code>cssfinder-backend-rust</code>. Those can be installed both as extras of <code>cssfinder</code> package and as standalone modules. Both approaches yield the same result.</p> LinuxWindows <p>To install CSSFinder backends, run following commands:</p> <pre><code>pip install cssfinder[numpy]\npip install cssfinder[rust]\n</code></pre> <p>To install CSSFinder backends, run following commands:</p> <pre><code>pip install cssfinder[numpy]\npip install cssfinder[rust]\n</code></pre> <p>You don't need both <code>cssfinder[numpy]</code> and <code>cssfinder[rust]</code>, one will be perfectly fine for most use cases. You can specify backend to use in project settings. Unfortunately if you want to run task which was configured to use backend X and you don't have backend X installed, task will fail.</p> <p>If you are unsure which one to choose, install both. This will spare you from unexpected failures caused by missing backend.</p> <p>As an alternative to installing <code>cssfinder</code> extras (<code>cssfinder[numpy]</code> and <code>cssfinder[rust]</code>) you may install <code>cssfinder-backend-numpy</code> and <code>cssfinder-backend-rust</code> packages, which are exactly the same.</p> <p>Backends are dynamically detected from all locations from where Python can import modules, thus any valid way of making backend code reachable for interpreter will work.</p>"},{"location":"usage/00_installation_guide.html#development-version","title":"Development version","text":"<p>To install development version of CSSFinder, following command:</p> <pre><code>pip install git+https://github.com/Argmaster/pygerber\n</code></pre> <p>This will install latest semi-stable version of CSSFinder from GitHub repository.</p>"},{"location":"usage/01_quick_start.html","title":"Quick Start Guide","text":"<p><code>cssfinder</code> installation</p> <p>This guide will help you get started with the <code>cssfinder</code> library. Before you begin, make sure you have <code>cssfinder</code> installed. If you haven't installed it yet, you can do so by following the instructions on the official website.</p>"},{"location":"usage/01_quick_start.html#example-1","title":"Example #1","text":"<p>Prerequisites</p> <p>This example relies on <code>cssfinder_backend_numpy</code>, please install it before continuing, to avoid problems with running the example.</p> Linux - bashWindows - powershell <pre><code>pip install cssfinder[numpy]\n</code></pre> <pre><code>cssfinder examples list\n</code></pre>"},{"location":"usage/01_quick_start.html#clone-project","title":"Clone project","text":"<p>CSSFinder comes with a set of examples which can be used to get familiar with the library. To list all available examples, use following command:</p> Linux - bashWindows - powershell <pre><code>cssfinder examples list\n</code></pre> <pre><code>cssfinder examples list\n</code></pre> <p>Output should look similar to this:</p> <p></p> <p>We will use <code>5qubits_json</code> example in this tutorial. To clone this example to current working directory, use following command:</p> Linux - bashWindows - powershell <pre><code>cssfinder clone-example 5qubits_json\n</code></pre> <pre><code>cssfinder clone-example 5qubits_json\n</code></pre> <p>Command output on Linux should look similar to this:</p> <pre><code>Found example 'e5qubits_json', 'Krzysztof Wi\u015bniewski; Marcin Wie\u015bniak', 'c317ef12'\nCloned example to '/home/argmaster/dev/repos/cssfinder'\n</code></pre> <p>As result, you should find that <code>5qubits_json</code> directory have been created in your current working directory. This directory contains project configuration files which describe tasks to execute. Configuration also specifies how tasks should be run.</p> <p>Let's check it by listing content of <code>5qubits_json</code> directory:</p> Linux - bashWindows - powershell <pre><code>ls -la\n</code></pre> <p>Ouput should look similar to this:</p> <pre><code>total 16\ndrwxrwxr-x  4 argmaster argmaster 4096 Apr 15 20:47 .\ndrwxrwxr-x 14 argmaster argmaster 4096 Apr 15 20:47 ..\ndrwxrwxr-x  2 argmaster argmaster 4096 Apr 15 20:47 5qubits_json\ndrwxrwxr-x  2 argmaster argmaster 4096 Apr 15 20:47 log\n</code></pre> <pre><code>ls\n</code></pre> <p>Ouput should look similar to this:</p> <pre><code>total 16\ndrwxrwxr-x  4 argmaster argmaster 4096 Apr 15 20:47 .\ndrwxrwxr-x 14 argmaster argmaster 4096 Apr 15 20:47 ..\ndrwxrwxr-x  2 argmaster argmaster 4096 Apr 15 20:47 5qubits_json\ndrwxrwxr-x  2 argmaster argmaster 4096 Apr 15 20:47 log\n</code></pre>"},{"location":"usage/01_quick_start.html#inspect-project","title":"Inspect project","text":"<p>To check contents of the you can use following command:</p> Linux - bashWindows - powershell <pre><code>cssfinder project list-tasks -l ./5qubits_json/\n</code></pre> <pre><code>cssfinder project list-tasks -l ./5qubits_json/\n</code></pre> <p>Output should look similar to this:</p> <pre><code>main mode=FSnQd backend=numpy\ntest_fsnqd_5qubits mode=FSnQd backend=numpy\n</code></pre> <p>Output shows that there are two tasks defined within the project. You can get more information about tasks using following command:</p> Linux - bashWindows - powershell <pre><code>cssfinder project inspect-tasks ./5qubits_json/ main\n</code></pre> <pre><code>cssfinder project inspect-tasks ./5qubits_json/ main\n</code></pre> <p>Output should look similar to this:</p> <pre><code>{\n  \"main\": {\n    \"gilbert\": {\n      \"mode\": \"FSnQd\",\n      \"backend\": {\n        \"name\": \"numpy\",\n        \"precision\": \"single\"\n      },\n      \"state\": {\n        \"file\": \"/home/argmaster/dev/repos/cssfinder/guide/5qubits_json/5qubits_in.mtx\",\n        \"depth\": null,\n        \"quantity\": null\n      },\n      \"runtime\": {\n        \"visibility\": 0.4,\n        \"max_epochs\": 1000,\n        \"iters_per_epoch\": 2000,\n        \"max_corrections\": 1000\n      },\n      \"resources\": {\n        \"symmetries\": null,\n        \"projection\": null\n      }\n    }\n  }\n}\n</code></pre> <p><code>\"main\"</code> is a task utilizing gilbert algorithm. It uses <code>numpy</code> backend with <code>single</code> precision floating point numbers (32-bit). Path to matrix file is expands to <code>\"/home/argmaster/dev/repos/cssfinder/guide/5qubits_json/5qubits_in.mtx\"</code> on PC of the author of this tutorial. You should see path to <code>5qubits_in.mtx</code> file in your output too, likely preceded by different path.</p>"},{"location":"usage/01_quick_start.html#run-tasks","title":"Run tasks","text":"<p>Now we can proceed with running tasks defined within the project. That can be achieved with following command:</p> Linux - bashWindows - powershell <pre><code>cssfinder project run-tasks ./5qubits_json/ -m main\n</code></pre> <pre><code>cssfinder project run-tasks ./5qubits_json/ -m main\n</code></pre> <p>This command will run task called <code>\"main\"</code>, which may take something in between of few seconds and few minutes, depending on your hardware. On AMD Ryzen 9 7950X it takes approximately 30 seconds.</p> <p>After the task is finished, we can check it output directory was created:</p> Linux - bashWindows - powershell <pre><code>ls -la ./5qubits_json/\n</code></pre> <p>As you can see <code>output</code> directory was indeed created:</p> <pre><code>total 20\ndrwxrwxr-x 3 argmaster argmaster 4096 Apr 15 22:20 .\ndrwxrwxr-x 4 argmaster argmaster 4096 Apr 15 20:47 ..\n-rw-rw-r-- 1 argmaster argmaster 1192 Apr 15 20:47 5qubits_in.mtx\n-rw-rw-r-- 1 argmaster argmaster 1819 Apr 15 20:47 cssfproject.json\ndrwxrwxr-x 3 argmaster argmaster 4096 Apr 15 22:20 output\n</code></pre> <pre><code>ls ./5qubits_json/\n</code></pre> <p>As you can see <code>output</code> directory was indeed created:</p> <pre><code>total 20\ndrwxrwxr-x 3 argmaster argmaster 4096 Apr 15 22:20 .\ndrwxrwxr-x 4 argmaster argmaster 4096 Apr 15 20:47 ..\n-rw-rw-r-- 1 argmaster argmaster 1192 Apr 15 20:47 5qubits_in.mtx\n-rw-rw-r-- 1 argmaster argmaster 1819 Apr 15 20:47 cssfproject.json\ndrwxrwxr-x 3 argmaster argmaster 4096 Apr 15 22:20 output\n</code></pre> <p>Now we can check contents of the <code>output</code> directory:</p> Linux - bashWindows - powershell <pre><code>ls -la ./5qubits_json/output/\n</code></pre> <p>Within <code>output</code> directory you should find <code>main</code> directory (name will match name of the task):</p> <pre><code>total 12\ndrwxrwxr-x 3 argmaster argmaster 4096 Apr 15 22:20 .\ndrwxrwxr-x 3 argmaster argmaster 4096 Apr 15 22:20 ..\ndrwxrwxr-x 2 argmaster argmaster 4096 Apr 15 22:20 main\n</code></pre> <pre><code>ls ./5qubits_json/output/\n</code></pre> <p>Within <code>output</code> directory you should find <code>main</code> directory (name will match name of the task):</p> <pre><code>total 12\ndrwxrwxr-x 3 argmaster argmaster 4096 Apr 15 22:20 .\ndrwxrwxr-x 3 argmaster argmaster 4096 Apr 15 22:20 ..\ndrwxrwxr-x 2 argmaster argmaster 4096 Apr 15 22:20 main\n</code></pre> <p>Let's now inspect contents of the <code>main</code> directory:</p> Linux - bashWindows - powershell <pre><code>ls -la ./5qubits_json/output/main\n</code></pre> <p>Within <code>main</code> directory you should find <code>corrections.json</code> file and <code>state.mtx</code> files.</p> <pre><code>total 92\ndrwxrwxr-x 2 argmaster argmaster  4096 Apr 15 22:20 .\ndrwxrwxr-x 3 argmaster argmaster  4096 Apr 15 22:20 ..\n-rw-rw-r-- 1 argmaster argmaster 34334 Apr 15 22:21 corrections.json\n-rwxrwxr-x 1 argmaster argmaster 48176 Apr 15 22:21 state.mtx\n</code></pre> <pre><code>ls ./5qubits_json/output/main\n</code></pre> <p>Within <code>main</code> directory you should find <code>corrections.json</code> file and <code>state.mtx</code> files.</p> <pre><code>total 92\ndrwxrwxr-x 2 argmaster argmaster  4096 Apr 15 22:20 .\ndrwxrwxr-x 3 argmaster argmaster  4096 Apr 15 22:20 ..\n-rw-rw-r-- 1 argmaster argmaster 34334 Apr 15 22:21 corrections.json\n-rwxrwxr-x 1 argmaster argmaster 48176 Apr 15 22:21 state.mtx\n</code></pre> <p>Unfortunately contents of <code>corrections.json</code> and <code>state.mtx</code> files are too large to be included in this tutorial.</p> <p>Now depending on you needs you can proceed with interpretation of those files with use of different software or use CSSFinder to generate report for you.</p>"},{"location":"usage/01_quick_start.html#report-generation","title":"Report generation","text":"<p>Continuation to Example #1</p> <p>This section will be natural continuation to <code>Example #1</code> section and will assume that reader have successfully followed instructions from there.</p> <p>CSSFinder provides a way to generate summary reports showing results of tasks which were run. Those reports can be generated in HTML, PDF and JSON formats. HTML and PDF are primarily intended for human consumption, while JSON is more suitable for machine processing.</p> Linux - bashWindows - powershell <p>To generate report in PDF format and automatically open it, use following command:</p> <pre><code>cssfinder project create-task-report ./5qubits_json/ task_0 --pdf --open\n</code></pre> <p>After running this command, you should see report in your default PDF viewer.</p> <p>To generate report in HTML format and automatically open it, use following command:</p> <pre><code>cssfinder project create-task-report ./5qubits_json/ task_0 --html --open\n</code></pre> <p>PDF reports on Windows</p> <p>Getting PDF reports to work on Windows can be troublesome. Please check out Installation Guide Windows installation for more information.</p> <p>After running this command, you should see report in your default HTML viewer.</p> <p>Example report looks like this:</p> <p> </p>"},{"location":"usage/02_project_guide.html","title":"Project Guide","text":""},{"location":"usage/02_project_guide.html#introduction","title":"Introduction","text":"<p>In CSSFinder, computations are described in special <code>cssfproject.*</code> files within dedicated directories. Such directory with all files within it is called a <code>project</code>. Project must contain either <code>cssfproject.json</code> or <code>cssfproject.py</code> file which describe list of tasks which can be executed with cssfinder.</p> <p><code>JSON</code> file is purely declarative, but with special <code>$ref</code> substitution support, while python scripts (<code>cssfproject.py</code>) allow for dynamic behaviors.</p> <p>Tasks are smallest possible unit of work which can be scheduled for execution by CSSFinder. They can be automatically executed in parallel with automatic queues to speed up calculations.</p>"},{"location":"usage/02_project_guide.html#project-file","title":"Project file","text":"JSONPython <p>Example of project based on <code>cssfproject.json</code> is shipped with cssfinder and can be cloned with:</p> <pre><code>cssfinder clone-example 5qubits_json\n</code></pre> <p>Afterwards you can either open <code>./5qubits_json/cssfproject.json</code> file in your favorite editor or use following command to print it to the console:</p> <pre><code>cssfinder project inspect ./5qubits_json/\n</code></pre> <p>Here is the output:</p> <pre><code>{\n    \"version\": \"1.0.0\",\n    \"meta\": {\n        \"author\": \"Krzysztof Wi\u015bniewski; Marcin Wie\u015bniak\",\n        \"email\": \"argmaster.world@gmail.com\",\n        \"name\": \"5qubits\",\n        \"description\": \"Example of project configuration for 'Full separability of an n-quDit state' mode.\",\n        \"version\": \"1.0.0\"\n    },\n    \"tasks\": {\n        \"main\": {\n            \"gilbert\": {\n                \"mode\": \"FSnQd\",\n                \"backend\": {\n                    \"name\": \"numpy\",\n                    \"precision\": \"single\"\n                },\n                \"runtime\": {\n                    \"visibility\": 0.4,\n                    \"max_epochs\": 1000,\n                    \"iters_per_epoch\": 2000,\n                    \"max_corrections\": 1000\n                },\n                \"state\": {\n                    \"file\": \"{project.project_directory}/5qubits_in.mtx\",\n                    \"depth\": null,\n                    \"quantity\": null\n                },\n                \"resources\": {\n                    \"symmetries\": null,\n                    \"projection\": null\n                }\n            }\n        },\n        \"test_fsnqd_5qubits\": {\n            \"gilbert\": {\n                \"mode\": {\n                    \"$ref\": \"#/tasks/main/gilbert/mode\"\n                },\n                \"backend\": {\n                    \"$ref\": \"#/tasks/main/gilbert/backend\"\n                },\n                \"runtime\": {\n                    \"visibility\": 0.4,\n                    \"max_epochs\": 10,\n                    \"iters_per_epoch\": 1000,\n                    \"max_corrections\": 100\n                },\n                \"state\": {\n                    \"$ref\": \"#/tasks/main/gilbert/state\"\n                },\n                \"resources\": {\n                    \"$ref\": \"#/tasks/main/gilbert/resources\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Example of project based on <code>cssfproject.py</code> is shipped with cssfinder and can be cloned with:</p> <pre><code>cssfinder clone-example 5qubits_py\n</code></pre> <p>Afterwards you can either open <code>./5qubits_json/cssfproject.py</code> file in your favorite editor or use <code>cat</code> to display it in console:</p> <pre><code>cat ./5qubits_py/cssfproject.py\n</code></pre> <p>Here is the output:</p> <pre><code>from __future__ import annotations\n\nfrom pathlib import Path\n\nfrom pydantic import EmailStr\n\nfrom cssfinder.api import run_project\nfrom cssfinder.cssfproject import (\n    AlgoMode,\n    BackendCfg,\n    CSSFProject,\n    GilbertCfg,\n    Meta,\n    Precision,\n    RuntimeCfg,\n    SemVerStr,\n    State,\n    Task,\n)\n\nTASKS = [\n    Task(\n        gilbert=GilbertCfg(\n            mode=AlgoMode.FSnQd,\n            backend=BackendCfg(\n                name=\"numpy\",\n                precision=Precision.SINGLE,\n            ),\n            state=State(file=path.as_posix()),\n            runtime=RuntimeCfg(\n                visibility=0.4,\n                max_epochs=1000,\n                iters_per_epoch=1000,\n                max_corrections=1000,\n            ),\n        ),\n    )\n    for path in Path(__file__).parent.glob(\"*_in.mtx\")\n]\n\n__project__ = CSSFProject(\n    meta=Meta(\n        author=\"Krzysztof Wi\u015bniewski; Marcin Wie\u015bniak\",\n        email=EmailStr(\"argmaster.world@gmail.com\"),\n        name=\"5qubits\",\n        description=\"Example of project configuration for 'Full separability of an \"\n        \"n-quDit state' mode.\",\n        version=SemVerStr(\"1.0.0\"),\n    ),\n    tasks=TASKS,\n    project_path=__file__,\n)\n\nif __name__ == \"__main__\":\n    run_project(__project__)\n</code></pre> <p>CSSFinder can also evaluate Python project file and output equivalent JSON:</p> <pre><code>cssfinder project inspect ./5qubits_json/\n</code></pre> <p>Output should be similar to:</p> <pre><code>{\n    \"meta\": {\n        \"author\": \"Krzysztof Wi\u015bniewski; Marcin Wie\u015bniak\",\n        \"email\": \"argmaster.world@gmail.com\",\n        \"name\": \"5qubits\",\n        \"description\": \"Example of project configuration for 'Full separability of an n-quDit state' mode.\",\n        \"version\": \"1.0.0\"\n    },\n    \"tasks\": {\n        \"0\": {\n            \"gilbert\": {\n                \"mode\": \"FSnQd\",\n                \"backend\": {\n                    \"name\": \"numpy\",\n                    \"precision\": \"single\"\n                },\n                \"state\": {\n                    \"file\": \"/home/argmaster/dev/repos/cssfinder/guide/5qubits_py/5qubits_in.mtx\",\n                    \"depth\": null,\n                    \"quantity\": null\n                },\n                \"runtime\": {\n                    \"visibility\": 0.4,\n                    \"max_epochs\": 1000,\n                    \"iters_per_epoch\": 1000,\n                    \"max_corrections\": 1000\n                },\n                \"resources\": {\n                    \"symmetries\": null,\n                    \"projection\": null\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"usage/02_project_guide.html#project-from-scratch","title":"Project from scratch","text":"JSON - <code>cssfproject.json</code>Python - <code>cssfproject.py</code> <p>To create new project from scratch you can use following command:</p> <pre><code>cssfinder create-new-json-project --no-interactive\n</code></pre> <p>This will create new directory <code>new_project</code> with <code>cssfproject.json</code> file inside. You can edit this file with your favorite editor or use <code>cssfinder</code> commands to add task configuration (described in next section).</p> <p><code>cssfinder create-new-json-project</code> command accepts options matching metadata fields like <code>--author</code>, <code>--email</code> etc. Additionally you can omit <code>--no-interactive</code> flag to be asked for metadata interactively with text user interface. For more information about this command use:</p> <pre><code>cssfinder create-new-json-project --help\n</code></pre> <p>Let's inspect the created project:</p> LinuxWindows <pre><code>ls -la ./new_project/\n</code></pre> <p>Output should be similar to:</p> <pre><code>total 16\ndrwxrwxr-x 2 argmaster argmaster 4096 Apr 16 01:05 .\ndrwxrwxr-x 7 argmaster argmaster 4096 Apr 16 00:38 ..\n-rwxrwxr-x 1 argmaster argmaster  215 Apr 16 01:16 cssfproject.json\n</code></pre> <pre><code>ls ./new_project/\n</code></pre> <p>Output should be similar to:</p> <pre><code>total 16\ndrwxrwxr-x 2 argmaster argmaster 4096 Apr 16 01:05 .\ndrwxrwxr-x 7 argmaster argmaster 4096 Apr 16 00:38 ..\n-rwxrwxr-x 1 argmaster argmaster  215 Apr 16 01:16 cssfproject.json\n</code></pre> <p>To create new project from scratch you can use following command:</p> <pre><code>cssfinder create-new-python-project --no-interactive\n</code></pre> <p>This will create new directory <code>new_project</code> with <code>cssfproject.py</code> file inside. You can edit this file with your favorite editor. CSSFinder does not provide a way to edit Python project files as there are barely any rules for how those files should be structured.</p> <p><code>cssfinder create-new-python-project</code> command accepts options matching metadata fields like <code>--author</code>, <code>--email</code> etc. Additionally you can omit <code>--no-interactive</code> flag to be asked for metadata interactively with text user interface. For more information about this command use:</p> <pre><code>cssfinder create-new-python-project --help\n</code></pre> <p>Let's inspect the created project:</p> LinuxWindows <pre><code>ls -la ./new_project/\n</code></pre> <p>Output should be similar to:</p> <pre><code>total 16\ndrwxrwxr-x 2 argmaster argmaster 4096 Apr 16 01:05 .\ndrwxrwxr-x 7 argmaster argmaster 4096 Apr 16 00:38 ..\n-rwxrwxr-x 1 argmaster argmaster  215 Apr 16 01:16 cssfproject.py\n</code></pre> <pre><code>ls ./new_project/\n</code></pre> <p>Output should be similar to:</p> <pre><code>total 16\ndrwxrwxr-x 2 argmaster argmaster 4096 Apr 16 01:05 .\ndrwxrwxr-x 7 argmaster argmaster 4096 Apr 16 00:38 ..\n-rwxrwxr-x 1 argmaster argmaster  215 Apr 16 01:16 cssfproject.py\n</code></pre> <p>Project file precedence</p> <p>If both <code>cssfproject.json</code> and <code>cssfproject.py</code> files are present in the same directory, <code>cssfproject.json</code> will be used and <code>cssfproject.py</code> will be ignored. There is no particular reason to prefer one over the other, but some loading order must be established, so <code>cssfproject.json</code> was chosen to be first.</p>"},{"location":"usage/02_project_guide.html#adding-tasks-json-only","title":"Adding tasks (JSON only)","text":"<p>Warning</p> <p>This section is a continuation to the previous one. If you haven't created a project yet, please refer to the previous section.</p> <p>Current working directory should contain <code>new_project</code> project directory.</p> <p>Warning</p> <p>This section is only applicable to <code>cssfproject.json</code> projects.</p> <p>Main purpose of a project is to be a container for \"tasks\". Each task is just a dictionary containing configuration for CSSFinder, describing what to do, with what algorithm, what data to use and possibly some additional parameters describing how PC resources should be used. They can be added either manually, by editing <code>cssfproject.json</code> file, or by using <code>cssfinder</code> commands.</p> <p>We will continue with task utilizing Gilbert algorithm, as it is currently only one implemented. To run this algorithm we need to provide a state matrix in form of a file.</p> <p>To create <code>state.mtx</code> file you can use following command:</p> LinuxWindows <pre><code>echo '\"%%MatrixMarket matrix array real symmetric\n%Created with the Wolfram Language : www.wolfram.com\n8 8\n2.5000000000000000E-01\n0.0000000000000000E+00\n0.0000000000000000E+00\n-2.5000000000000000E-01\n0.0000000000000000E+00\n-2.5000000000000000E-01\n-2.5000000000000000E-01\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n2.5000000000000000E-01\n0.0000000000000000E+00\n2.5000000000000000E-01\n2.5000000000000000E-01\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n2.5000000000000000E-01\n2.5000000000000000E-01\n0.0000000000000000E+00\n2.5000000000000000E-01\n0.0000000000000000E+00\n0.0000000000000000E+00\n' &gt; ./new_project/state.mtx\n</code></pre> <pre><code>echo '%%MatrixMarket matrix array real symmetric\n%Created with the Wolfram Language : www.wolfram.com\n8 8\n2.5000000000000000E-01\n0.0000000000000000E+00\n0.0000000000000000E+00\n-2.5000000000000000E-01\n0.0000000000000000E+00\n-2.5000000000000000E-01\n-2.5000000000000000E-01\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n2.5000000000000000E-01\n0.0000000000000000E+00\n2.5000000000000000E-01\n2.5000000000000000E-01\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n0.0000000000000000E+00\n2.5000000000000000E-01\n2.5000000000000000E-01\n0.0000000000000000E+00\n2.5000000000000000E-01\n0.0000000000000000E+00\n0.0000000000000000E+00\n' &gt; ./new_project/state.mtx\n</code></pre> <p>Although you can also copy-paste the matrix into a file with any text editor.</p> <p>After creating matrix file, we can add task to the project. Following command should do exactly that:</p> <pre><code>cssfinder project add-gilbert-task ./new_project/ --no-interactive --state \"{project.project_directory}/state.mtx\"\n</code></pre> <p>Now we can check if task was correctly added by using following command:</p> <pre><code>cssfinder project list-tasks -l ./new_project/\n</code></pre> <p>Here is the output:</p> <pre><code>task_0 mode=FSnQd backend=numpy_jit\n</code></pre> <p>Now we can run this task to make sure it works:</p> <pre><code>cssfinder project run-tasks ./new_project/ -m task_0\n</code></pre> <p>Here is the expected output:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Task task_0 started. \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Task task_0 finished. \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Now you can utilize the output data to, for example, create HTML report. See Quick Start Guide - Report Generation for more information.</p>"},{"location":"usage/02_project_guide.html#json-to-python-conversion","title":"JSON to Python conversion","text":"<p>CSSFinder can convert JSON project file to Python project file. To do this use:</p> <pre><code>cssfinder project to-python ./new_project/\n</code></pre> <p>If project is already a Python project using this command will fail. Because of loading order, if project contains both <code>cssfproject.json</code> and <code>cssfproject.py</code>, <code>cssfproject.json</code> will be loaded first and <code>cssfproject.py</code> will be ignored. Therefore project containing both is not considered a Python project and won't trigger <code>'JSON_PROJECT_PATH': Provided path is not a valid JSON project path.</code> error. However, it will complain about <code>cssfproject.py</code> being present in the directory.</p>"}]}